package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ILoginLogSDAO;import com.cattsoft.tm.vo.LoginLogSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法LoginLogSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class LoginLogSDAOImpl implements ILoginLogSDAO{    private static Logger log = Logger.getLogger(LoginLogSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     LoginLogSVO loginLog=(LoginLogSVO) vo;    if (StringUtil.isBlank(loginLog.getLoginLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO LOGIN_LOG(LOGIN_LOG_ID,LOGIN_TIME,LOGIN_TYPE,REMARKS,USER_ID)");sql.append(" VALUES (:loginLogId,:loginTime,:loginType,:remarks,:userId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(loginLog.getLoginLogId())) {      sql.setNullLong("loginLogId");     } else {    sql.setLong("loginLogId", loginLog.getLoginLogId());    }    if (loginLog.getLoginTime() == null) {      sql.setNullDate("loginTime");     } else {    sql.setTimestamp("loginTime", loginLog.getLoginTime());    }       if (StringUtil.isBlank(loginLog.getLoginType())) {      sql.setNullString("loginType");     } else {    sql.setString("loginType", loginLog.getLoginType());    }       if (StringUtil.isBlank(loginLog.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", loginLog.getRemarks());    }       if (StringUtil.isBlank(loginLog.getUserId())) {      sql.setNullLong("userId");     } else {    sql.setLong("userId", loginLog.getUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     LoginLogSVO loginLog=(LoginLogSVO) vo;    if (StringUtil.isBlank(loginLog.getLoginLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT LOGIN_LOG_ID,LOGIN_TIME,LOGIN_TYPE,REMARKS,USER_ID FROM LOGIN_LOG WHERE 1=1  ");sql.append(" and LOGIN_LOG_ID=:loginLogId");sql.setLong("loginLogId", loginLog.getLoginLogId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      loginLog =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           loginLog = new LoginLogSVO();           loginLog.setLoginLogId(rs.getString("LOGIN_LOG_ID"));           loginLog.setLoginTime(rs.getTimestamp("LOGIN_TIME"));           loginLog.setLoginType(rs.getString("LOGIN_TYPE"));           loginLog.setRemarks(rs.getString("REMARKS"));           loginLog.setUserId(rs.getString("USER_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return loginLog;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       LoginLogSVO loginLog=(LoginLogSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT LOGIN_LOG_ID,LOGIN_TIME,LOGIN_TYPE,REMARKS,USER_ID FROM LOGIN_LOG WHERE 1=1 ");     try {if (loginLog.getFlagLoginLogId() == 1) {      if (StringUtil.isBlank(loginLog.getLoginLogId())) {             sql.append(" and LOGIN_LOG_ID is null ");          }      else{             sql.append(" and LOGIN_LOG_ID=:loginLogId");             sql.setLong("loginLogId", loginLog.getLoginLogId());          }   } if (loginLog.getFlagLoginTime() == 1) {      if (loginLog.getLoginTime() == null) {             sql.append(" and LOGIN_TIME is null ");          }      else{             sql.append(" and LOGIN_TIME=:loginTime");             sql.setTimestamp("loginTime", loginLog.getLoginTime());          }   } if (loginLog.getFlagLoginType() == 1) {      if (StringUtil.isBlank(loginLog.getLoginType())) {             sql.append(" and LOGIN_TYPE is null ");          }      else{             sql.append(" and LOGIN_TYPE=:loginType");             sql.setString("loginType", loginLog.getLoginType());          }   } if (loginLog.getFlagRemarks() == 1) {      if (StringUtil.isBlank(loginLog.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", loginLog.getRemarks());          }   } if (loginLog.getFlagUserId() == 1) {      if (StringUtil.isBlank(loginLog.getUserId())) {             sql.append(" and USER_ID is null ");          }      else{             sql.append(" and USER_ID=:userId");             sql.setLong("userId", loginLog.getUserId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           loginLog = new LoginLogSVO();           loginLog.setLoginLogId(rs.getString("LOGIN_LOG_ID"));           loginLog.setLoginTime(rs.getTimestamp("LOGIN_TIME"));           loginLog.setLoginType(rs.getString("LOGIN_TYPE"));           loginLog.setRemarks(rs.getString("REMARKS"));           loginLog.setUserId(rs.getString("USER_ID"));               res.add(loginLog);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       LoginLogSVO loginLog=(LoginLogSVO) vo;    if (StringUtil.isBlank(loginLog.getLoginLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE LOGIN_LOG SET ");     try {if (loginLog.getFlagLoginTime() == 1) {sql.append("LOGIN_TIME=:loginTime,"); sql.setTimestamp("loginTime", loginLog.getLoginTime()); } if (loginLog.getFlagLoginType() == 1) {sql.append("LOGIN_TYPE=:loginType,"); sql.setString("loginType", loginLog.getLoginType()); } if (loginLog.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", loginLog.getRemarks()); } if (loginLog.getFlagUserId() == 1) {sql.append("USER_ID=:userId,");sql.setLong("userId", loginLog.getUserId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and LOGIN_LOG_ID=:loginLogId");sql.setLong("loginLogId", loginLog.getLoginLogId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO LOGIN_LOG(LOGIN_LOG_ID,LOGIN_TIME,LOGIN_TYPE,REMARKS,USER_ID)");sql.append(" VALUES (:loginLogId,:loginTime,:loginType,:remarks,:userId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       LoginLogSVO loginLog=(LoginLogSVO) list.get(i);         if (loginLog== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(loginLog.getLoginLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(loginLog.getLoginLogId())) {      sql.setNullLong("loginLogId");     } else {    sql.setLong("loginLogId", loginLog.getLoginLogId());    }    if (loginLog.getLoginTime() == null) {      sql.setNullDate("loginTime");     } else {    sql.setTimestamp("loginTime", loginLog.getLoginTime());    }       if (StringUtil.isBlank(loginLog.getLoginType())) {      sql.setNullString("loginType");     } else {    sql.setString("loginType", loginLog.getLoginType());    }       if (StringUtil.isBlank(loginLog.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", loginLog.getRemarks());    }       if (StringUtil.isBlank(loginLog.getUserId())) {      sql.setNullLong("userId");     } else {    sql.setLong("userId", loginLog.getUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     LoginLogSVO loginLog=(LoginLogSVO) vo;    if (StringUtil.isBlank(loginLog.getLoginLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM LOGIN_LOG WHERE 1=1  ");sql.append(" and LOGIN_LOG_ID=:loginLogId");sql.setLong("loginLogId", loginLog.getLoginLogId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     LoginLogSVO loginLog=(LoginLogSVO) vo;       }}
