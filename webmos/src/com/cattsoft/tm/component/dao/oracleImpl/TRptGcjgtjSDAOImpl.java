package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRptGcjgtjSDAO;import com.cattsoft.tm.vo.TRptGcjgtjSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRptGcjgtjSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptGcjgtjSDAOImpl implements ITRptGcjgtjSDAO{    private static Logger log = Logger.getLogger(TRptGcjgtjSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_GCJGTJ(GCMC,JGSJ,ORDERID,SQR,SQSJ)");sql.append(" VALUES (:gcmc,:jgsj,:orderid,:sqr,:sqsj)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tRptGcjgtj.getGcmc())) {      sql.setNullString("gcmc");     } else {    sql.setString("gcmc", tRptGcjgtj.getGcmc());    }    if (tRptGcjgtj.getJgsj() == null) {      sql.setNullDate("jgsj");     } else {    sql.setTimestamp("jgsj", tRptGcjgtj.getJgsj());    }       if (StringUtil.isBlank(tRptGcjgtj.getOrderid())) {      sql.setNullLong("orderid");     } else {    sql.setLong("orderid", tRptGcjgtj.getOrderid());    }       if (StringUtil.isBlank(tRptGcjgtj.getSqr())) {      sql.setNullString("sqr");     } else {    sql.setString("sqr", tRptGcjgtj.getSqr());    }    if (tRptGcjgtj.getSqsj() == null) {      sql.setNullDate("sqsj");     } else {    sql.setTimestamp("sqsj", tRptGcjgtj.getSqsj());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;       Sql sql = new Sql("SELECT GCMC,JGSJ,ORDERID,SQR,SQSJ FROM T_RPT_GCJGTJ WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptGcjgtj =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptGcjgtj = new TRptGcjgtjSVO();           tRptGcjgtj.setGcmc(rs.getString("GCMC"));           tRptGcjgtj.setJgsj(rs.getTimestamp("JGSJ"));           tRptGcjgtj.setOrderid(rs.getString("ORDERID"));           tRptGcjgtj.setSqr(rs.getString("SQR"));           tRptGcjgtj.setSqsj(rs.getTimestamp("SQSJ"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptGcjgtj;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT GCMC,JGSJ,ORDERID,SQR,SQSJ FROM T_RPT_GCJGTJ WHERE 1=1 ");     try {if (tRptGcjgtj.getFlagGcmc() == 1) {      if (StringUtil.isBlank(tRptGcjgtj.getGcmc())) {             sql.append(" and GCMC is null ");          }      else{             sql.append(" and GCMC=:gcmc");             sql.setString("gcmc", tRptGcjgtj.getGcmc());          }   } if (tRptGcjgtj.getFlagJgsj() == 1) {      if (tRptGcjgtj.getJgsj() == null) {             sql.append(" and JGSJ is null ");          }      else{             sql.append(" and JGSJ=:jgsj");             sql.setTimestamp("jgsj", tRptGcjgtj.getJgsj());          }   } if (tRptGcjgtj.getFlagOrderid() == 1) {      if (StringUtil.isBlank(tRptGcjgtj.getOrderid())) {             sql.append(" and ORDERID is null ");          }      else{             sql.append(" and ORDERID=:orderid");             sql.setLong("orderid", tRptGcjgtj.getOrderid());          }   } if (tRptGcjgtj.getFlagSqr() == 1) {      if (StringUtil.isBlank(tRptGcjgtj.getSqr())) {             sql.append(" and SQR is null ");          }      else{             sql.append(" and SQR=:sqr");             sql.setString("sqr", tRptGcjgtj.getSqr());          }   } if (tRptGcjgtj.getFlagSqsj() == 1) {      if (tRptGcjgtj.getSqsj() == null) {             sql.append(" and SQSJ is null ");          }      else{             sql.append(" and SQSJ=:sqsj");             sql.setTimestamp("sqsj", tRptGcjgtj.getSqsj());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptGcjgtj = new TRptGcjgtjSVO();           tRptGcjgtj.setGcmc(rs.getString("GCMC"));           tRptGcjgtj.setJgsj(rs.getTimestamp("JGSJ"));           tRptGcjgtj.setOrderid(rs.getString("ORDERID"));           tRptGcjgtj.setSqr(rs.getString("SQR"));           tRptGcjgtj.setSqsj(rs.getTimestamp("SQSJ"));               res.add(tRptGcjgtj);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_GCJGTJ SET ");     try {if (tRptGcjgtj.getFlagGcmc() == 1) {sql.append("GCMC=:gcmc,"); sql.setString("gcmc", tRptGcjgtj.getGcmc()); } if (tRptGcjgtj.getFlagJgsj() == 1) {sql.append("JGSJ=:jgsj,"); sql.setTimestamp("jgsj", tRptGcjgtj.getJgsj()); } if (tRptGcjgtj.getFlagOrderid() == 1) {sql.append("ORDERID=:orderid,");sql.setLong("orderid", tRptGcjgtj.getOrderid()); } if (tRptGcjgtj.getFlagSqr() == 1) {sql.append("SQR=:sqr,"); sql.setString("sqr", tRptGcjgtj.getSqr()); } if (tRptGcjgtj.getFlagSqsj() == 1) {sql.append("SQSJ=:sqsj,"); sql.setTimestamp("sqsj", tRptGcjgtj.getSqsj()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_GCJGTJ(GCMC,JGSJ,ORDERID,SQR,SQSJ)");sql.append(" VALUES (:gcmc,:jgsj,:orderid,:sqr,:sqsj)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) list.get(i);         if (tRptGcjgtj== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tRptGcjgtj.getGcmc())) {      sql.setNullString("gcmc");     } else {    sql.setString("gcmc", tRptGcjgtj.getGcmc());    }    if (tRptGcjgtj.getJgsj() == null) {      sql.setNullDate("jgsj");     } else {    sql.setTimestamp("jgsj", tRptGcjgtj.getJgsj());    }       if (StringUtil.isBlank(tRptGcjgtj.getOrderid())) {      sql.setNullLong("orderid");     } else {    sql.setLong("orderid", tRptGcjgtj.getOrderid());    }       if (StringUtil.isBlank(tRptGcjgtj.getSqr())) {      sql.setNullString("sqr");     } else {    sql.setString("sqr", tRptGcjgtj.getSqr());    }    if (tRptGcjgtj.getSqsj() == null) {      sql.setNullDate("sqsj");     } else {    sql.setTimestamp("sqsj", tRptGcjgtj.getSqsj());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_GCJGTJ WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptGcjgtjSVO tRptGcjgtj=(TRptGcjgtjSVO) vo;       }}
