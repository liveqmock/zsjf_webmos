package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRpt4grb4gywrbSDAO;import com.cattsoft.tm.vo.TRpt4grb4gywrbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRpt4grb4gywrbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRpt4grb4gywrbSDAOImpl implements ITRpt4grb4gywrbSDAO{    private static Logger log = Logger.getLogger(TRpt4grb4gywrbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_4GRB_4GYWRB(CREATE_DATE,DYLJ,HYLX,KHQ,OPEN_DATE,RFZ,SYTQLJ,TCMC,ZZS)");sql.append(" VALUES (:createDate,:dylj,:hylx,:khq,:openDate,:rfz,:sytqlj,:tcmc,:zzs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tRpt4grb4gywrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt4grb4gywrb.getCreateDate());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getDylj())) {      sql.setNullLong("dylj");     } else {    sql.setLong("dylj", tRpt4grb4gywrb.getDylj());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getHylx())) {      sql.setNullString("hylx");     } else {    sql.setString("hylx", tRpt4grb4gywrb.getHylx());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getKhq())) {      sql.setNullString("khq");     } else {    sql.setString("khq", tRpt4grb4gywrb.getKhq());    }    if (tRpt4grb4gywrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt4grb4gywrb.getOpenDate());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getRfz())) {      sql.setNullLong("rfz");     } else {    sql.setLong("rfz", tRpt4grb4gywrb.getRfz());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getSytqlj())) {      sql.setNullLong("sytqlj");     } else {    sql.setLong("sytqlj", tRpt4grb4gywrb.getSytqlj());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getTcmc())) {      sql.setNullString("tcmc");     } else {    sql.setString("tcmc", tRpt4grb4gywrb.getTcmc());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getZzs())) {      sql.setNullLong("zzs");     } else {    sql.setLong("zzs", tRpt4grb4gywrb.getZzs());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;       Sql sql = new Sql("SELECT CREATE_DATE,DYLJ,HYLX,KHQ,OPEN_DATE,RFZ,SYTQLJ,TCMC,ZZS FROM T_RPT_4GRB_4GYWRB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRpt4grb4gywrb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRpt4grb4gywrb = new TRpt4grb4gywrbSVO();           tRpt4grb4gywrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt4grb4gywrb.setDylj(rs.getString("DYLJ"));           tRpt4grb4gywrb.setHylx(rs.getString("HYLX"));           tRpt4grb4gywrb.setKhq(rs.getString("KHQ"));           tRpt4grb4gywrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRpt4grb4gywrb.setRfz(rs.getString("RFZ"));           tRpt4grb4gywrb.setSytqlj(rs.getString("SYTQLJ"));           tRpt4grb4gywrb.setTcmc(rs.getString("TCMC"));           tRpt4grb4gywrb.setZzs(rs.getString("ZZS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRpt4grb4gywrb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,DYLJ,HYLX,KHQ,OPEN_DATE,RFZ,SYTQLJ,TCMC,ZZS FROM T_RPT_4GRB_4GYWRB WHERE 1=1 ");     try {if (tRpt4grb4gywrb.getFlagCreateDate() == 1) {      if (tRpt4grb4gywrb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRpt4grb4gywrb.getCreateDate());          }   } if (tRpt4grb4gywrb.getFlagDylj() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getDylj())) {             sql.append(" and DYLJ is null ");          }      else{             sql.append(" and DYLJ=:dylj");             sql.setLong("dylj", tRpt4grb4gywrb.getDylj());          }   } if (tRpt4grb4gywrb.getFlagHylx() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getHylx())) {             sql.append(" and HYLX is null ");          }      else{             sql.append(" and HYLX=:hylx");             sql.setString("hylx", tRpt4grb4gywrb.getHylx());          }   } if (tRpt4grb4gywrb.getFlagKhq() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getKhq())) {             sql.append(" and KHQ is null ");          }      else{             sql.append(" and KHQ=:khq");             sql.setString("khq", tRpt4grb4gywrb.getKhq());          }   } if (tRpt4grb4gywrb.getFlagOpenDate() == 1) {      if (tRpt4grb4gywrb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRpt4grb4gywrb.getOpenDate());          }   } if (tRpt4grb4gywrb.getFlagRfz() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getRfz())) {             sql.append(" and RFZ is null ");          }      else{             sql.append(" and RFZ=:rfz");             sql.setLong("rfz", tRpt4grb4gywrb.getRfz());          }   } if (tRpt4grb4gywrb.getFlagSytqlj() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getSytqlj())) {             sql.append(" and SYTQLJ is null ");          }      else{             sql.append(" and SYTQLJ=:sytqlj");             sql.setLong("sytqlj", tRpt4grb4gywrb.getSytqlj());          }   } if (tRpt4grb4gywrb.getFlagTcmc() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getTcmc())) {             sql.append(" and TCMC is null ");          }      else{             sql.append(" and TCMC=:tcmc");             sql.setString("tcmc", tRpt4grb4gywrb.getTcmc());          }   } if (tRpt4grb4gywrb.getFlagZzs() == 1) {      if (StringUtil.isBlank(tRpt4grb4gywrb.getZzs())) {             sql.append(" and ZZS is null ");          }      else{             sql.append(" and ZZS=:zzs");             sql.setLong("zzs", tRpt4grb4gywrb.getZzs());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRpt4grb4gywrb = new TRpt4grb4gywrbSVO();           tRpt4grb4gywrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt4grb4gywrb.setDylj(rs.getString("DYLJ"));           tRpt4grb4gywrb.setHylx(rs.getString("HYLX"));           tRpt4grb4gywrb.setKhq(rs.getString("KHQ"));           tRpt4grb4gywrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRpt4grb4gywrb.setRfz(rs.getString("RFZ"));           tRpt4grb4gywrb.setSytqlj(rs.getString("SYTQLJ"));           tRpt4grb4gywrb.setTcmc(rs.getString("TCMC"));           tRpt4grb4gywrb.setZzs(rs.getString("ZZS"));               res.add(tRpt4grb4gywrb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_4GRB_4GYWRB SET ");     try {if (tRpt4grb4gywrb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRpt4grb4gywrb.getCreateDate()); } if (tRpt4grb4gywrb.getFlagDylj() == 1) {sql.append("DYLJ=:dylj,");sql.setLong("dylj", tRpt4grb4gywrb.getDylj()); } if (tRpt4grb4gywrb.getFlagHylx() == 1) {sql.append("HYLX=:hylx,"); sql.setString("hylx", tRpt4grb4gywrb.getHylx()); } if (tRpt4grb4gywrb.getFlagKhq() == 1) {sql.append("KHQ=:khq,"); sql.setString("khq", tRpt4grb4gywrb.getKhq()); } if (tRpt4grb4gywrb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRpt4grb4gywrb.getOpenDate()); } if (tRpt4grb4gywrb.getFlagRfz() == 1) {sql.append("RFZ=:rfz,");sql.setLong("rfz", tRpt4grb4gywrb.getRfz()); } if (tRpt4grb4gywrb.getFlagSytqlj() == 1) {sql.append("SYTQLJ=:sytqlj,");sql.setLong("sytqlj", tRpt4grb4gywrb.getSytqlj()); } if (tRpt4grb4gywrb.getFlagTcmc() == 1) {sql.append("TCMC=:tcmc,"); sql.setString("tcmc", tRpt4grb4gywrb.getTcmc()); } if (tRpt4grb4gywrb.getFlagZzs() == 1) {sql.append("ZZS=:zzs,");sql.setLong("zzs", tRpt4grb4gywrb.getZzs()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_4GRB_4GYWRB(CREATE_DATE,DYLJ,HYLX,KHQ,OPEN_DATE,RFZ,SYTQLJ,TCMC,ZZS)");sql.append(" VALUES (:createDate,:dylj,:hylx,:khq,:openDate,:rfz,:sytqlj,:tcmc,:zzs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) list.get(i);         if (tRpt4grb4gywrb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (tRpt4grb4gywrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt4grb4gywrb.getCreateDate());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getDylj())) {      sql.setNullLong("dylj");     } else {    sql.setLong("dylj", tRpt4grb4gywrb.getDylj());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getHylx())) {      sql.setNullString("hylx");     } else {    sql.setString("hylx", tRpt4grb4gywrb.getHylx());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getKhq())) {      sql.setNullString("khq");     } else {    sql.setString("khq", tRpt4grb4gywrb.getKhq());    }    if (tRpt4grb4gywrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt4grb4gywrb.getOpenDate());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getRfz())) {      sql.setNullLong("rfz");     } else {    sql.setLong("rfz", tRpt4grb4gywrb.getRfz());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getSytqlj())) {      sql.setNullLong("sytqlj");     } else {    sql.setLong("sytqlj", tRpt4grb4gywrb.getSytqlj());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getTcmc())) {      sql.setNullString("tcmc");     } else {    sql.setString("tcmc", tRpt4grb4gywrb.getTcmc());    }       if (StringUtil.isBlank(tRpt4grb4gywrb.getZzs())) {      sql.setNullLong("zzs");     } else {    sql.setLong("zzs", tRpt4grb4gywrb.getZzs());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_4GRB_4GYWRB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRpt4grb4gywrbSVO tRpt4grb4gywrb=(TRpt4grb4gywrbSVO) vo;       }}
