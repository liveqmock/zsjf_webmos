package com.cattsoft.tm.component.dao;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.tm.vo.TRptHfybKhqSVO; /**   * 方法TRptHfybKhqSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptHfybKhqSDAOImpl implements ITRptHfybKhqSDAO{    private static Logger log = Logger.getLogger(TRptHfybKhqSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_HFYB_KHQ(CL_DYSR,CL_HBSR,CL_SYSR,CL_YHS,CP,CREATE_DATE,CZ_SR,CZ_YHS,JL_SYSR,JL_YHS,KHQ,OPEN_DATE,ZL_DYSR,ZL_YHS,ZZ_DYSR,ZZ_DYYHS,ZZ_HBSR,ZZ_HBYHS,ZZ_SYSR,ZZ_SYYHS)");sql.append(" VALUES (:clDysr,:clHbsr,:clSysr,:clYhs,:cp,:createDate,:czSr,:czYhs,:jlSysr,:jlYhs,:khq,:openDate,:zlDysr,:zlYhs,:zzDysr,:zzDyyhs,:zzHbsr,:zzHbyhs,:zzSysr,:zzSyyhs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tRptHfybKhq.getClDysr())) {      sql.setNullLong("clDysr");     } else {    sql.setLong("clDysr", tRptHfybKhq.getClDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClHbsr())) {      sql.setNullLong("clHbsr");     } else {    sql.setLong("clHbsr", tRptHfybKhq.getClHbsr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClSysr())) {      sql.setNullLong("clSysr");     } else {    sql.setLong("clSysr", tRptHfybKhq.getClSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClYhs())) {      sql.setNullLong("clYhs");     } else {    sql.setLong("clYhs", tRptHfybKhq.getClYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getCp())) {      sql.setNullLong("cp");     } else {    sql.setLong("cp", tRptHfybKhq.getCp());    }    if (tRptHfybKhq.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptHfybKhq.getCreateDate());    }       if (StringUtil.isBlank(tRptHfybKhq.getCzSr())) {      sql.setNullLong("czSr");     } else {    sql.setLong("czSr", tRptHfybKhq.getCzSr());    }       if (StringUtil.isBlank(tRptHfybKhq.getCzYhs())) {      sql.setNullLong("czYhs");     } else {    sql.setLong("czYhs", tRptHfybKhq.getCzYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getJlSysr())) {      sql.setNullLong("jlSysr");     } else {    sql.setLong("jlSysr", tRptHfybKhq.getJlSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getJlYhs())) {      sql.setNullLong("jlYhs");     } else {    sql.setLong("jlYhs", tRptHfybKhq.getJlYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getKhq())) {      sql.setNullString("khq");     } else {    sql.setString("khq", tRptHfybKhq.getKhq());    }    if (tRptHfybKhq.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptHfybKhq.getOpenDate());    }       if (StringUtil.isBlank(tRptHfybKhq.getZlDysr())) {      sql.setNullLong("zlDysr");     } else {    sql.setLong("zlDysr", tRptHfybKhq.getZlDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZlYhs())) {      sql.setNullLong("zlYhs");     } else {    sql.setLong("zlYhs", tRptHfybKhq.getZlYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzDysr())) {      sql.setNullLong("zzDysr");     } else {    sql.setLong("zzDysr", tRptHfybKhq.getZzDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzDyyhs())) {      sql.setNullLong("zzDyyhs");     } else {    sql.setLong("zzDyyhs", tRptHfybKhq.getZzDyyhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzHbsr())) {      sql.setNullLong("zzHbsr");     } else {    sql.setLong("zzHbsr", tRptHfybKhq.getZzHbsr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzHbyhs())) {      sql.setNullLong("zzHbyhs");     } else {    sql.setLong("zzHbyhs", tRptHfybKhq.getZzHbyhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzSysr())) {      sql.setNullLong("zzSysr");     } else {    sql.setLong("zzSysr", tRptHfybKhq.getZzSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzSyyhs())) {      sql.setNullLong("zzSyyhs");     } else {    sql.setLong("zzSyyhs", tRptHfybKhq.getZzSyyhs());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;       Sql sql = new Sql("SELECT CL_DYSR,CL_HBSR,CL_SYSR,CL_YHS,CP,CREATE_DATE,CZ_SR,CZ_YHS,JL_SYSR,JL_YHS,KHQ,OPEN_DATE,ZL_DYSR,ZL_YHS,ZZ_DYSR,ZZ_DYYHS,ZZ_HBSR,ZZ_HBYHS,ZZ_SYSR,ZZ_SYYHS FROM T_RPT_HFYB_KHQ WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptHfybKhq =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptHfybKhq = new TRptHfybKhqSVO();           tRptHfybKhq.setClDysr(rs.getString("CL_DYSR"));           tRptHfybKhq.setClHbsr(rs.getString("CL_HBSR"));           tRptHfybKhq.setClSysr(rs.getString("CL_SYSR"));           tRptHfybKhq.setClYhs(rs.getString("CL_YHS"));           tRptHfybKhq.setCp(rs.getString("CP"));           tRptHfybKhq.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptHfybKhq.setCzSr(rs.getString("CZ_SR"));           tRptHfybKhq.setCzYhs(rs.getString("CZ_YHS"));           tRptHfybKhq.setJlSysr(rs.getString("JL_SYSR"));           tRptHfybKhq.setJlYhs(rs.getString("JL_YHS"));           tRptHfybKhq.setKhq(rs.getString("KHQ"));           tRptHfybKhq.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptHfybKhq.setZlDysr(rs.getString("ZL_DYSR"));           tRptHfybKhq.setZlYhs(rs.getString("ZL_YHS"));           tRptHfybKhq.setZzDysr(rs.getString("ZZ_DYSR"));           tRptHfybKhq.setZzDyyhs(rs.getString("ZZ_DYYHS"));           tRptHfybKhq.setZzHbsr(rs.getString("ZZ_HBSR"));           tRptHfybKhq.setZzHbyhs(rs.getString("ZZ_HBYHS"));           tRptHfybKhq.setZzSysr(rs.getString("ZZ_SYSR"));           tRptHfybKhq.setZzSyyhs(rs.getString("ZZ_SYYHS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptHfybKhq;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CL_DYSR,CL_HBSR,CL_SYSR,CL_YHS,CP,CREATE_DATE,CZ_SR,CZ_YHS,JL_SYSR,JL_YHS,KHQ,OPEN_DATE,ZL_DYSR,ZL_YHS,ZZ_DYSR,ZZ_DYYHS,ZZ_HBSR,ZZ_HBYHS,ZZ_SYSR,ZZ_SYYHS FROM T_RPT_HFYB_KHQ WHERE 1=1 ");     try {if (tRptHfybKhq.getFlagClDysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getClDysr())) {             sql.append(" and CL_DYSR is null ");          }      else{             sql.append(" and CL_DYSR=:clDysr");             sql.setLong("clDysr", tRptHfybKhq.getClDysr());          }   } if (tRptHfybKhq.getFlagClHbsr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getClHbsr())) {             sql.append(" and CL_HBSR is null ");          }      else{             sql.append(" and CL_HBSR=:clHbsr");             sql.setLong("clHbsr", tRptHfybKhq.getClHbsr());          }   } if (tRptHfybKhq.getFlagClSysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getClSysr())) {             sql.append(" and CL_SYSR is null ");          }      else{             sql.append(" and CL_SYSR=:clSysr");             sql.setLong("clSysr", tRptHfybKhq.getClSysr());          }   } if (tRptHfybKhq.getFlagClYhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getClYhs())) {             sql.append(" and CL_YHS is null ");          }      else{             sql.append(" and CL_YHS=:clYhs");             sql.setLong("clYhs", tRptHfybKhq.getClYhs());          }   } if (tRptHfybKhq.getFlagCp() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getCp())) {             sql.append(" and CP is null ");          }      else{             sql.append(" and CP=:cp");             sql.setLong("cp", tRptHfybKhq.getCp());          }   } if (tRptHfybKhq.getFlagCreateDate() == 1) {      if (tRptHfybKhq.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRptHfybKhq.getCreateDate());          }   } if (tRptHfybKhq.getFlagCzSr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getCzSr())) {             sql.append(" and CZ_SR is null ");          }      else{             sql.append(" and CZ_SR=:czSr");             sql.setLong("czSr", tRptHfybKhq.getCzSr());          }   } if (tRptHfybKhq.getFlagCzYhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getCzYhs())) {             sql.append(" and CZ_YHS is null ");          }      else{             sql.append(" and CZ_YHS=:czYhs");             sql.setLong("czYhs", tRptHfybKhq.getCzYhs());          }   } if (tRptHfybKhq.getFlagJlSysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getJlSysr())) {             sql.append(" and JL_SYSR is null ");          }      else{             sql.append(" and JL_SYSR=:jlSysr");             sql.setLong("jlSysr", tRptHfybKhq.getJlSysr());          }   } if (tRptHfybKhq.getFlagJlYhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getJlYhs())) {             sql.append(" and JL_YHS is null ");          }      else{             sql.append(" and JL_YHS=:jlYhs");             sql.setLong("jlYhs", tRptHfybKhq.getJlYhs());          }   } if (tRptHfybKhq.getFlagKhq() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getKhq())) {             sql.append(" and KHQ is null ");          }      else{             sql.append(" and KHQ=:khq");             sql.setString("khq", tRptHfybKhq.getKhq());          }   } if (tRptHfybKhq.getFlagOpenDate() == 1) {      if (tRptHfybKhq.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRptHfybKhq.getOpenDate());          }   } if (tRptHfybKhq.getFlagZlDysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZlDysr())) {             sql.append(" and ZL_DYSR is null ");          }      else{             sql.append(" and ZL_DYSR=:zlDysr");             sql.setLong("zlDysr", tRptHfybKhq.getZlDysr());          }   } if (tRptHfybKhq.getFlagZlYhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZlYhs())) {             sql.append(" and ZL_YHS is null ");          }      else{             sql.append(" and ZL_YHS=:zlYhs");             sql.setLong("zlYhs", tRptHfybKhq.getZlYhs());          }   } if (tRptHfybKhq.getFlagZzDysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzDysr())) {             sql.append(" and ZZ_DYSR is null ");          }      else{             sql.append(" and ZZ_DYSR=:zzDysr");             sql.setLong("zzDysr", tRptHfybKhq.getZzDysr());          }   } if (tRptHfybKhq.getFlagZzDyyhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzDyyhs())) {             sql.append(" and ZZ_DYYHS is null ");          }      else{             sql.append(" and ZZ_DYYHS=:zzDyyhs");             sql.setLong("zzDyyhs", tRptHfybKhq.getZzDyyhs());          }   } if (tRptHfybKhq.getFlagZzHbsr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzHbsr())) {             sql.append(" and ZZ_HBSR is null ");          }      else{             sql.append(" and ZZ_HBSR=:zzHbsr");             sql.setLong("zzHbsr", tRptHfybKhq.getZzHbsr());          }   } if (tRptHfybKhq.getFlagZzHbyhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzHbyhs())) {             sql.append(" and ZZ_HBYHS is null ");          }      else{             sql.append(" and ZZ_HBYHS=:zzHbyhs");             sql.setLong("zzHbyhs", tRptHfybKhq.getZzHbyhs());          }   } if (tRptHfybKhq.getFlagZzSysr() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzSysr())) {             sql.append(" and ZZ_SYSR is null ");          }      else{             sql.append(" and ZZ_SYSR=:zzSysr");             sql.setLong("zzSysr", tRptHfybKhq.getZzSysr());          }   } if (tRptHfybKhq.getFlagZzSyyhs() == 1) {      if (StringUtil.isBlank(tRptHfybKhq.getZzSyyhs())) {             sql.append(" and ZZ_SYYHS is null ");          }      else{             sql.append(" and ZZ_SYYHS=:zzSyyhs");             sql.setLong("zzSyyhs", tRptHfybKhq.getZzSyyhs());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptHfybKhq = new TRptHfybKhqSVO();           tRptHfybKhq.setClDysr(rs.getString("CL_DYSR"));           tRptHfybKhq.setClHbsr(rs.getString("CL_HBSR"));           tRptHfybKhq.setClSysr(rs.getString("CL_SYSR"));           tRptHfybKhq.setClYhs(rs.getString("CL_YHS"));           tRptHfybKhq.setCp(rs.getString("CP"));           tRptHfybKhq.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptHfybKhq.setCzSr(rs.getString("CZ_SR"));           tRptHfybKhq.setCzYhs(rs.getString("CZ_YHS"));           tRptHfybKhq.setJlSysr(rs.getString("JL_SYSR"));           tRptHfybKhq.setJlYhs(rs.getString("JL_YHS"));           tRptHfybKhq.setKhq(rs.getString("KHQ"));           tRptHfybKhq.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptHfybKhq.setZlDysr(rs.getString("ZL_DYSR"));           tRptHfybKhq.setZlYhs(rs.getString("ZL_YHS"));           tRptHfybKhq.setZzDysr(rs.getString("ZZ_DYSR"));           tRptHfybKhq.setZzDyyhs(rs.getString("ZZ_DYYHS"));           tRptHfybKhq.setZzHbsr(rs.getString("ZZ_HBSR"));           tRptHfybKhq.setZzHbyhs(rs.getString("ZZ_HBYHS"));           tRptHfybKhq.setZzSysr(rs.getString("ZZ_SYSR"));           tRptHfybKhq.setZzSyyhs(rs.getString("ZZ_SYYHS"));               res.add(tRptHfybKhq);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_HFYB_KHQ SET ");     try {if (tRptHfybKhq.getFlagClDysr() == 1) {sql.append("CL_DYSR=:clDysr,");sql.setLong("clDysr", tRptHfybKhq.getClDysr()); } if (tRptHfybKhq.getFlagClHbsr() == 1) {sql.append("CL_HBSR=:clHbsr,");sql.setLong("clHbsr", tRptHfybKhq.getClHbsr()); } if (tRptHfybKhq.getFlagClSysr() == 1) {sql.append("CL_SYSR=:clSysr,");sql.setLong("clSysr", tRptHfybKhq.getClSysr()); } if (tRptHfybKhq.getFlagClYhs() == 1) {sql.append("CL_YHS=:clYhs,");sql.setLong("clYhs", tRptHfybKhq.getClYhs()); } if (tRptHfybKhq.getFlagCp() == 1) {sql.append("CP=:cp,");sql.setLong("cp", tRptHfybKhq.getCp()); } if (tRptHfybKhq.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRptHfybKhq.getCreateDate()); } if (tRptHfybKhq.getFlagCzSr() == 1) {sql.append("CZ_SR=:czSr,");sql.setLong("czSr", tRptHfybKhq.getCzSr()); } if (tRptHfybKhq.getFlagCzYhs() == 1) {sql.append("CZ_YHS=:czYhs,");sql.setLong("czYhs", tRptHfybKhq.getCzYhs()); } if (tRptHfybKhq.getFlagJlSysr() == 1) {sql.append("JL_SYSR=:jlSysr,");sql.setLong("jlSysr", tRptHfybKhq.getJlSysr()); } if (tRptHfybKhq.getFlagJlYhs() == 1) {sql.append("JL_YHS=:jlYhs,");sql.setLong("jlYhs", tRptHfybKhq.getJlYhs()); } if (tRptHfybKhq.getFlagKhq() == 1) {sql.append("KHQ=:khq,"); sql.setString("khq", tRptHfybKhq.getKhq()); } if (tRptHfybKhq.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRptHfybKhq.getOpenDate()); } if (tRptHfybKhq.getFlagZlDysr() == 1) {sql.append("ZL_DYSR=:zlDysr,");sql.setLong("zlDysr", tRptHfybKhq.getZlDysr()); } if (tRptHfybKhq.getFlagZlYhs() == 1) {sql.append("ZL_YHS=:zlYhs,");sql.setLong("zlYhs", tRptHfybKhq.getZlYhs()); } if (tRptHfybKhq.getFlagZzDysr() == 1) {sql.append("ZZ_DYSR=:zzDysr,");sql.setLong("zzDysr", tRptHfybKhq.getZzDysr()); } if (tRptHfybKhq.getFlagZzDyyhs() == 1) {sql.append("ZZ_DYYHS=:zzDyyhs,");sql.setLong("zzDyyhs", tRptHfybKhq.getZzDyyhs()); } if (tRptHfybKhq.getFlagZzHbsr() == 1) {sql.append("ZZ_HBSR=:zzHbsr,");sql.setLong("zzHbsr", tRptHfybKhq.getZzHbsr()); } if (tRptHfybKhq.getFlagZzHbyhs() == 1) {sql.append("ZZ_HBYHS=:zzHbyhs,");sql.setLong("zzHbyhs", tRptHfybKhq.getZzHbyhs()); } if (tRptHfybKhq.getFlagZzSysr() == 1) {sql.append("ZZ_SYSR=:zzSysr,");sql.setLong("zzSysr", tRptHfybKhq.getZzSysr()); } if (tRptHfybKhq.getFlagZzSyyhs() == 1) {sql.append("ZZ_SYYHS=:zzSyyhs,");sql.setLong("zzSyyhs", tRptHfybKhq.getZzSyyhs()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_HFYB_KHQ(CL_DYSR,CL_HBSR,CL_SYSR,CL_YHS,CP,CREATE_DATE,CZ_SR,CZ_YHS,JL_SYSR,JL_YHS,KHQ,OPEN_DATE,ZL_DYSR,ZL_YHS,ZZ_DYSR,ZZ_DYYHS,ZZ_HBSR,ZZ_HBYHS,ZZ_SYSR,ZZ_SYYHS)");sql.append(" VALUES (:clDysr,:clHbsr,:clSysr,:clYhs,:cp,:createDate,:czSr,:czYhs,:jlSysr,:jlYhs,:khq,:openDate,:zlDysr,:zlYhs,:zzDysr,:zzDyyhs,:zzHbsr,:zzHbyhs,:zzSysr,:zzSyyhs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) list.get(i);         if (tRptHfybKhq== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tRptHfybKhq.getClDysr())) {      sql.setNullLong("clDysr");     } else {    sql.setLong("clDysr", tRptHfybKhq.getClDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClHbsr())) {      sql.setNullLong("clHbsr");     } else {    sql.setLong("clHbsr", tRptHfybKhq.getClHbsr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClSysr())) {      sql.setNullLong("clSysr");     } else {    sql.setLong("clSysr", tRptHfybKhq.getClSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getClYhs())) {      sql.setNullLong("clYhs");     } else {    sql.setLong("clYhs", tRptHfybKhq.getClYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getCp())) {      sql.setNullLong("cp");     } else {    sql.setLong("cp", tRptHfybKhq.getCp());    }    if (tRptHfybKhq.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptHfybKhq.getCreateDate());    }       if (StringUtil.isBlank(tRptHfybKhq.getCzSr())) {      sql.setNullLong("czSr");     } else {    sql.setLong("czSr", tRptHfybKhq.getCzSr());    }       if (StringUtil.isBlank(tRptHfybKhq.getCzYhs())) {      sql.setNullLong("czYhs");     } else {    sql.setLong("czYhs", tRptHfybKhq.getCzYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getJlSysr())) {      sql.setNullLong("jlSysr");     } else {    sql.setLong("jlSysr", tRptHfybKhq.getJlSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getJlYhs())) {      sql.setNullLong("jlYhs");     } else {    sql.setLong("jlYhs", tRptHfybKhq.getJlYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getKhq())) {      sql.setNullString("khq");     } else {    sql.setString("khq", tRptHfybKhq.getKhq());    }    if (tRptHfybKhq.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptHfybKhq.getOpenDate());    }       if (StringUtil.isBlank(tRptHfybKhq.getZlDysr())) {      sql.setNullLong("zlDysr");     } else {    sql.setLong("zlDysr", tRptHfybKhq.getZlDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZlYhs())) {      sql.setNullLong("zlYhs");     } else {    sql.setLong("zlYhs", tRptHfybKhq.getZlYhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzDysr())) {      sql.setNullLong("zzDysr");     } else {    sql.setLong("zzDysr", tRptHfybKhq.getZzDysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzDyyhs())) {      sql.setNullLong("zzDyyhs");     } else {    sql.setLong("zzDyyhs", tRptHfybKhq.getZzDyyhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzHbsr())) {      sql.setNullLong("zzHbsr");     } else {    sql.setLong("zzHbsr", tRptHfybKhq.getZzHbsr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzHbyhs())) {      sql.setNullLong("zzHbyhs");     } else {    sql.setLong("zzHbyhs", tRptHfybKhq.getZzHbyhs());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzSysr())) {      sql.setNullLong("zzSysr");     } else {    sql.setLong("zzSysr", tRptHfybKhq.getZzSysr());    }       if (StringUtil.isBlank(tRptHfybKhq.getZzSyyhs())) {      sql.setNullLong("zzSyyhs");     } else {    sql.setLong("zzSyyhs", tRptHfybKhq.getZzSyyhs());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_HFYB_KHQ WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptHfybKhqSVO tRptHfybKhq=(TRptHfybKhqSVO) vo;       }}
