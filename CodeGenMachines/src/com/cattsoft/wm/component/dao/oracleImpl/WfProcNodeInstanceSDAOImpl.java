package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcNodeInstanceSDAO;import com.cattsoft.wm.vo.WfProcNodeInstanceSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcNodeInstanceSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcNodeInstanceSDAOImpl implements IWfProcNodeInstanceSDAO{    private static Logger log = Logger.getLogger(WfProcNodeInstanceSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE_INSTANCE(ACTIVITY_ID,CASE_PARAM,CASE_VALUE,CONNECT_TYPE,DERIVED_PROC_NODE_ID,IS_DYNAMIC,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_NAV_INSTANCE_ID,NODE_TYPE,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_INST_ID,PROC_NODE_ID,REMARK,STATE,SUBAREA_NO,UP_PROC_NODE_ID,VERSION_ID,WF_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:activityId,:caseParam,:caseValue,:connectType,:derivedProcNodeId,:isDynamic,:isNeed,:nextProcNodeId,:nodeDesc,:nodeNavInstanceId,:nodeType,:paramType,:parentProcNodeId,:procId,:procInstId,:procNodeId,:remark,:state,:subareaNo,:upProcNodeId,:versionId,:wfProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfProcNodeInstance.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfProcNodeInstance.getActivityId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getCaseParam())) {      sql.setNullString("caseParam");     } else {    sql.setString("caseParam", wfProcNodeInstance.getCaseParam());    }       if (StringUtil.isBlank(wfProcNodeInstance.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfProcNodeInstance.getCaseValue());    }       if (StringUtil.isBlank(wfProcNodeInstance.getConnectType())) {      sql.setNullString("connectType");     } else {    sql.setString("connectType", wfProcNodeInstance.getConnectType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getDerivedProcNodeId())) {      sql.setNullString("derivedProcNodeId");     } else {    sql.setString("derivedProcNodeId", wfProcNodeInstance.getDerivedProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getIsDynamic())) {      sql.setNullString("isDynamic");     } else {    sql.setString("isDynamic", wfProcNodeInstance.getIsDynamic());    }       if (StringUtil.isBlank(wfProcNodeInstance.getIsNeed())) {      sql.setNullString("isNeed");     } else {    sql.setString("isNeed", wfProcNodeInstance.getIsNeed());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfProcNodeInstance.getNextProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeDesc())) {      sql.setNullString("nodeDesc");     } else {    sql.setString("nodeDesc", wfProcNodeInstance.getNodeDesc());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfProcNodeInstance.getNodeType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfProcNodeInstance.getParamType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfProcNodeInstance.getParentProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcNodeInstance.getProcId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcNodeInstance.getProcInstId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfProcNodeInstance.getProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNodeInstance.getRemark());    }       if (StringUtil.isBlank(wfProcNodeInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcNodeInstance.getState());    }       if (StringUtil.isBlank(wfProcNodeInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfProcNodeInstance.getSubareaNo());    }       if (StringUtil.isBlank(wfProcNodeInstance.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfProcNodeInstance.getUpProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getVersionId())) {      sql.setNullLong("versionId");     } else {    sql.setLong("versionId", wfProcNodeInstance.getVersionId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getWfProcNodeId())) {      sql.setNullString("wfProcNodeId");     } else {    sql.setString("wfProcNodeId", wfProcNodeInstance.getWfProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfProcNodeInstance.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTIVITY_ID,CASE_PARAM,CASE_VALUE,CONNECT_TYPE,DERIVED_PROC_NODE_ID,IS_DYNAMIC,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_NAV_INSTANCE_ID,NODE_TYPE,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_INST_ID,PROC_NODE_ID,REMARK,STATE,SUBAREA_NO,UP_PROC_NODE_ID,VERSION_ID,WF_PROC_NODE_ID,XML_NODE_ID FROM WF_PROC_NODE_INSTANCE WHERE 1=1  ");sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProcNodeInstance =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProcNodeInstance = new WfProcNodeInstanceSVO();           wfProcNodeInstance.setActivityId(rs.getString("ACTIVITY_ID"));           wfProcNodeInstance.setCaseParam(rs.getString("CASE_PARAM"));           wfProcNodeInstance.setCaseValue(rs.getString("CASE_VALUE"));           wfProcNodeInstance.setConnectType(rs.getString("CONNECT_TYPE"));           wfProcNodeInstance.setDerivedProcNodeId(rs.getString("DERIVED_PROC_NODE_ID"));           wfProcNodeInstance.setIsDynamic(rs.getString("IS_DYNAMIC"));           wfProcNodeInstance.setIsNeed(rs.getString("IS_NEED"));           wfProcNodeInstance.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfProcNodeInstance.setNodeDesc(rs.getString("NODE_DESC"));           wfProcNodeInstance.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfProcNodeInstance.setNodeType(rs.getString("NODE_TYPE"));           wfProcNodeInstance.setParamType(rs.getString("PARAM_TYPE"));           wfProcNodeInstance.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfProcNodeInstance.setProcId(rs.getString("PROC_ID"));           wfProcNodeInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcNodeInstance.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfProcNodeInstance.setRemark(rs.getString("REMARK"));           wfProcNodeInstance.setState(rs.getString("STATE"));           wfProcNodeInstance.setSubareaNo(rs.getString("SUBAREA_NO"));           wfProcNodeInstance.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfProcNodeInstance.setVersionId(rs.getString("VERSION_ID"));           wfProcNodeInstance.setWfProcNodeId(rs.getString("WF_PROC_NODE_ID"));           wfProcNodeInstance.setXmlNodeId(rs.getString("XML_NODE_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProcNodeInstance;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTIVITY_ID,CASE_PARAM,CASE_VALUE,CONNECT_TYPE,DERIVED_PROC_NODE_ID,IS_DYNAMIC,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_NAV_INSTANCE_ID,NODE_TYPE,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_INST_ID,PROC_NODE_ID,REMARK,STATE,SUBAREA_NO,UP_PROC_NODE_ID,VERSION_ID,WF_PROC_NODE_ID,XML_NODE_ID FROM WF_PROC_NODE_INSTANCE WHERE 1=1 ");     try {if (wfProcNodeInstance.getFlagActivityId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getActivityId())) {             sql.append(" and ACTIVITY_ID is null ");          }      else{             sql.append(" and ACTIVITY_ID=:activityId");             sql.setLong("activityId", wfProcNodeInstance.getActivityId());          }   } if (wfProcNodeInstance.getFlagCaseParam() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getCaseParam())) {             sql.append(" and CASE_PARAM is null ");          }      else{             sql.append(" and CASE_PARAM=:caseParam");             sql.setString("caseParam", wfProcNodeInstance.getCaseParam());          }   } if (wfProcNodeInstance.getFlagCaseValue() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getCaseValue())) {             sql.append(" and CASE_VALUE is null ");          }      else{             sql.append(" and CASE_VALUE=:caseValue");             sql.setString("caseValue", wfProcNodeInstance.getCaseValue());          }   } if (wfProcNodeInstance.getFlagConnectType() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getConnectType())) {             sql.append(" and CONNECT_TYPE is null ");          }      else{             sql.append(" and CONNECT_TYPE=:connectType");             sql.setString("connectType", wfProcNodeInstance.getConnectType());          }   } if (wfProcNodeInstance.getFlagDerivedProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getDerivedProcNodeId())) {             sql.append(" and DERIVED_PROC_NODE_ID is null ");          }      else{             sql.append(" and DERIVED_PROC_NODE_ID=:derivedProcNodeId");             sql.setString("derivedProcNodeId", wfProcNodeInstance.getDerivedProcNodeId());          }   } if (wfProcNodeInstance.getFlagIsDynamic() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getIsDynamic())) {             sql.append(" and IS_DYNAMIC is null ");          }      else{             sql.append(" and IS_DYNAMIC=:isDynamic");             sql.setString("isDynamic", wfProcNodeInstance.getIsDynamic());          }   } if (wfProcNodeInstance.getFlagIsNeed() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getIsNeed())) {             sql.append(" and IS_NEED is null ");          }      else{             sql.append(" and IS_NEED=:isNeed");             sql.setString("isNeed", wfProcNodeInstance.getIsNeed());          }   } if (wfProcNodeInstance.getFlagNextProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getNextProcNodeId())) {             sql.append(" and NEXT_PROC_NODE_ID is null ");          }      else{             sql.append(" and NEXT_PROC_NODE_ID=:nextProcNodeId");             sql.setString("nextProcNodeId", wfProcNodeInstance.getNextProcNodeId());          }   } if (wfProcNodeInstance.getFlagNodeDesc() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getNodeDesc())) {             sql.append(" and NODE_DESC is null ");          }      else{             sql.append(" and NODE_DESC=:nodeDesc");             sql.setString("nodeDesc", wfProcNodeInstance.getNodeDesc());          }   } if (wfProcNodeInstance.getFlagNodeNavInstanceId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {             sql.append(" and NODE_NAV_INSTANCE_ID is null ");          }      else{             sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");             sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());          }   } if (wfProcNodeInstance.getFlagNodeType() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getNodeType())) {             sql.append(" and NODE_TYPE is null ");          }      else{             sql.append(" and NODE_TYPE=:nodeType");             sql.setString("nodeType", wfProcNodeInstance.getNodeType());          }   } if (wfProcNodeInstance.getFlagParamType() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getParamType())) {             sql.append(" and PARAM_TYPE is null ");          }      else{             sql.append(" and PARAM_TYPE=:paramType");             sql.setLong("paramType", wfProcNodeInstance.getParamType());          }   } if (wfProcNodeInstance.getFlagParentProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getParentProcNodeId())) {             sql.append(" and PARENT_PROC_NODE_ID is null ");          }      else{             sql.append(" and PARENT_PROC_NODE_ID=:parentProcNodeId");             sql.setString("parentProcNodeId", wfProcNodeInstance.getParentProcNodeId());          }   } if (wfProcNodeInstance.getFlagProcId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getProcId())) {             sql.append(" and PROC_ID is null ");          }      else{             sql.append(" and PROC_ID=:procId");             sql.setLong("procId", wfProcNodeInstance.getProcId());          }   } if (wfProcNodeInstance.getFlagProcInstId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getProcInstId())) {             sql.append(" and PROC_INST_ID is null ");          }      else{             sql.append(" and PROC_INST_ID=:procInstId");             sql.setLong("procInstId", wfProcNodeInstance.getProcInstId());          }   } if (wfProcNodeInstance.getFlagProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getProcNodeId())) {             sql.append(" and PROC_NODE_ID is null ");          }      else{             sql.append(" and PROC_NODE_ID=:procNodeId");             sql.setString("procNodeId", wfProcNodeInstance.getProcNodeId());          }   } if (wfProcNodeInstance.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfProcNodeInstance.getRemark());          }   } if (wfProcNodeInstance.getFlagState() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfProcNodeInstance.getState());          }   } if (wfProcNodeInstance.getFlagSubareaNo() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getSubareaNo())) {             sql.append(" and SUBAREA_NO is null ");          }      else{             sql.append(" and SUBAREA_NO=:subareaNo");             sql.setLong("subareaNo", wfProcNodeInstance.getSubareaNo());          }   } if (wfProcNodeInstance.getFlagUpProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getUpProcNodeId())) {             sql.append(" and UP_PROC_NODE_ID is null ");          }      else{             sql.append(" and UP_PROC_NODE_ID=:upProcNodeId");             sql.setString("upProcNodeId", wfProcNodeInstance.getUpProcNodeId());          }   } if (wfProcNodeInstance.getFlagVersionId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getVersionId())) {             sql.append(" and VERSION_ID is null ");          }      else{             sql.append(" and VERSION_ID=:versionId");             sql.setLong("versionId", wfProcNodeInstance.getVersionId());          }   } if (wfProcNodeInstance.getFlagWfProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getWfProcNodeId())) {             sql.append(" and WF_PROC_NODE_ID is null ");          }      else{             sql.append(" and WF_PROC_NODE_ID=:wfProcNodeId");             sql.setString("wfProcNodeId", wfProcNodeInstance.getWfProcNodeId());          }   } if (wfProcNodeInstance.getFlagXmlNodeId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstance.getXmlNodeId())) {             sql.append(" and XML_NODE_ID is null ");          }      else{             sql.append(" and XML_NODE_ID=:xmlNodeId");             sql.setString("xmlNodeId", wfProcNodeInstance.getXmlNodeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProcNodeInstance = new WfProcNodeInstanceSVO();           wfProcNodeInstance.setActivityId(rs.getString("ACTIVITY_ID"));           wfProcNodeInstance.setCaseParam(rs.getString("CASE_PARAM"));           wfProcNodeInstance.setCaseValue(rs.getString("CASE_VALUE"));           wfProcNodeInstance.setConnectType(rs.getString("CONNECT_TYPE"));           wfProcNodeInstance.setDerivedProcNodeId(rs.getString("DERIVED_PROC_NODE_ID"));           wfProcNodeInstance.setIsDynamic(rs.getString("IS_DYNAMIC"));           wfProcNodeInstance.setIsNeed(rs.getString("IS_NEED"));           wfProcNodeInstance.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfProcNodeInstance.setNodeDesc(rs.getString("NODE_DESC"));           wfProcNodeInstance.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfProcNodeInstance.setNodeType(rs.getString("NODE_TYPE"));           wfProcNodeInstance.setParamType(rs.getString("PARAM_TYPE"));           wfProcNodeInstance.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfProcNodeInstance.setProcId(rs.getString("PROC_ID"));           wfProcNodeInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcNodeInstance.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfProcNodeInstance.setRemark(rs.getString("REMARK"));           wfProcNodeInstance.setState(rs.getString("STATE"));           wfProcNodeInstance.setSubareaNo(rs.getString("SUBAREA_NO"));           wfProcNodeInstance.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfProcNodeInstance.setVersionId(rs.getString("VERSION_ID"));           wfProcNodeInstance.setWfProcNodeId(rs.getString("WF_PROC_NODE_ID"));           wfProcNodeInstance.setXmlNodeId(rs.getString("XML_NODE_ID"));               res.add(wfProcNodeInstance);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC_NODE_INSTANCE SET ");     try {if (wfProcNodeInstance.getFlagActivityId() == 1) {sql.append("ACTIVITY_ID=:activityId,");sql.setLong("activityId", wfProcNodeInstance.getActivityId()); } if (wfProcNodeInstance.getFlagCaseParam() == 1) {sql.append("CASE_PARAM=:caseParam,"); sql.setString("caseParam", wfProcNodeInstance.getCaseParam()); } if (wfProcNodeInstance.getFlagCaseValue() == 1) {sql.append("CASE_VALUE=:caseValue,"); sql.setString("caseValue", wfProcNodeInstance.getCaseValue()); } if (wfProcNodeInstance.getFlagConnectType() == 1) {sql.append("CONNECT_TYPE=:connectType,"); sql.setString("connectType", wfProcNodeInstance.getConnectType()); } if (wfProcNodeInstance.getFlagDerivedProcNodeId() == 1) {sql.append("DERIVED_PROC_NODE_ID=:derivedProcNodeId,"); sql.setString("derivedProcNodeId", wfProcNodeInstance.getDerivedProcNodeId()); } if (wfProcNodeInstance.getFlagIsDynamic() == 1) {sql.append("IS_DYNAMIC=:isDynamic,"); sql.setString("isDynamic", wfProcNodeInstance.getIsDynamic()); } if (wfProcNodeInstance.getFlagIsNeed() == 1) {sql.append("IS_NEED=:isNeed,"); sql.setString("isNeed", wfProcNodeInstance.getIsNeed()); } if (wfProcNodeInstance.getFlagNextProcNodeId() == 1) {sql.append("NEXT_PROC_NODE_ID=:nextProcNodeId,"); sql.setString("nextProcNodeId", wfProcNodeInstance.getNextProcNodeId()); } if (wfProcNodeInstance.getFlagNodeDesc() == 1) {sql.append("NODE_DESC=:nodeDesc,"); sql.setString("nodeDesc", wfProcNodeInstance.getNodeDesc()); } if (wfProcNodeInstance.getFlagNodeType() == 1) {sql.append("NODE_TYPE=:nodeType,"); sql.setString("nodeType", wfProcNodeInstance.getNodeType()); } if (wfProcNodeInstance.getFlagParamType() == 1) {sql.append("PARAM_TYPE=:paramType,");sql.setLong("paramType", wfProcNodeInstance.getParamType()); } if (wfProcNodeInstance.getFlagParentProcNodeId() == 1) {sql.append("PARENT_PROC_NODE_ID=:parentProcNodeId,"); sql.setString("parentProcNodeId", wfProcNodeInstance.getParentProcNodeId()); } if (wfProcNodeInstance.getFlagProcId() == 1) {sql.append("PROC_ID=:procId,");sql.setLong("procId", wfProcNodeInstance.getProcId()); } if (wfProcNodeInstance.getFlagProcInstId() == 1) {sql.append("PROC_INST_ID=:procInstId,");sql.setLong("procInstId", wfProcNodeInstance.getProcInstId()); } if (wfProcNodeInstance.getFlagProcNodeId() == 1) {sql.append("PROC_NODE_ID=:procNodeId,"); sql.setString("procNodeId", wfProcNodeInstance.getProcNodeId()); } if (wfProcNodeInstance.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfProcNodeInstance.getRemark()); } if (wfProcNodeInstance.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfProcNodeInstance.getState()); } if (wfProcNodeInstance.getFlagSubareaNo() == 1) {sql.append("SUBAREA_NO=:subareaNo,");sql.setLong("subareaNo", wfProcNodeInstance.getSubareaNo()); } if (wfProcNodeInstance.getFlagUpProcNodeId() == 1) {sql.append("UP_PROC_NODE_ID=:upProcNodeId,"); sql.setString("upProcNodeId", wfProcNodeInstance.getUpProcNodeId()); } if (wfProcNodeInstance.getFlagVersionId() == 1) {sql.append("VERSION_ID=:versionId,");sql.setLong("versionId", wfProcNodeInstance.getVersionId()); } if (wfProcNodeInstance.getFlagWfProcNodeId() == 1) {sql.append("WF_PROC_NODE_ID=:wfProcNodeId,"); sql.setString("wfProcNodeId", wfProcNodeInstance.getWfProcNodeId()); } if (wfProcNodeInstance.getFlagXmlNodeId() == 1) {sql.append("XML_NODE_ID=:xmlNodeId,"); sql.setString("xmlNodeId", wfProcNodeInstance.getXmlNodeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE_INSTANCE(ACTIVITY_ID,CASE_PARAM,CASE_VALUE,CONNECT_TYPE,DERIVED_PROC_NODE_ID,IS_DYNAMIC,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_NAV_INSTANCE_ID,NODE_TYPE,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_INST_ID,PROC_NODE_ID,REMARK,STATE,SUBAREA_NO,UP_PROC_NODE_ID,VERSION_ID,WF_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:activityId,:caseParam,:caseValue,:connectType,:derivedProcNodeId,:isDynamic,:isNeed,:nextProcNodeId,:nodeDesc,:nodeNavInstanceId,:nodeType,:paramType,:parentProcNodeId,:procId,:procInstId,:procNodeId,:remark,:state,:subareaNo,:upProcNodeId,:versionId,:wfProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) list.get(i);         if (wfProcNodeInstance== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfProcNodeInstance.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfProcNodeInstance.getActivityId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getCaseParam())) {      sql.setNullString("caseParam");     } else {    sql.setString("caseParam", wfProcNodeInstance.getCaseParam());    }       if (StringUtil.isBlank(wfProcNodeInstance.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfProcNodeInstance.getCaseValue());    }       if (StringUtil.isBlank(wfProcNodeInstance.getConnectType())) {      sql.setNullString("connectType");     } else {    sql.setString("connectType", wfProcNodeInstance.getConnectType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getDerivedProcNodeId())) {      sql.setNullString("derivedProcNodeId");     } else {    sql.setString("derivedProcNodeId", wfProcNodeInstance.getDerivedProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getIsDynamic())) {      sql.setNullString("isDynamic");     } else {    sql.setString("isDynamic", wfProcNodeInstance.getIsDynamic());    }       if (StringUtil.isBlank(wfProcNodeInstance.getIsNeed())) {      sql.setNullString("isNeed");     } else {    sql.setString("isNeed", wfProcNodeInstance.getIsNeed());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfProcNodeInstance.getNextProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeDesc())) {      sql.setNullString("nodeDesc");     } else {    sql.setString("nodeDesc", wfProcNodeInstance.getNodeDesc());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfProcNodeInstance.getNodeType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfProcNodeInstance.getParamType());    }       if (StringUtil.isBlank(wfProcNodeInstance.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfProcNodeInstance.getParentProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcNodeInstance.getProcId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcNodeInstance.getProcInstId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfProcNodeInstance.getProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNodeInstance.getRemark());    }       if (StringUtil.isBlank(wfProcNodeInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcNodeInstance.getState());    }       if (StringUtil.isBlank(wfProcNodeInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfProcNodeInstance.getSubareaNo());    }       if (StringUtil.isBlank(wfProcNodeInstance.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfProcNodeInstance.getUpProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getVersionId())) {      sql.setNullLong("versionId");     } else {    sql.setLong("versionId", wfProcNodeInstance.getVersionId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getWfProcNodeId())) {      sql.setNullString("wfProcNodeId");     } else {    sql.setString("wfProcNodeId", wfProcNodeInstance.getWfProcNodeId());    }       if (StringUtil.isBlank(wfProcNodeInstance.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfProcNodeInstance.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstance.getNodeNavInstanceId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC_NODE_INSTANCE WHERE 1=1  ");sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");sql.setLong("nodeNavInstanceId", wfProcNodeInstance.getNodeNavInstanceId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcNodeInstanceSVO wfProcNodeInstance=(WfProcNodeInstanceSVO) vo;       } public List blurryQueryByProcNodeId(String procInstId, String procNodeId)	throws AppException, SysException {WfProcNodeInstanceSVO wfProcNodeInstance = new WfProcNodeInstanceSVO();List res = new ArrayList();Connection conn = null;PreparedStatement ps = null;ResultSet rs = null;Sql sql = new Sql(		"SELECT ACTIVITY_ID,CASE_PARAM,CASE_VALUE,CONNECT_TYPE,DERIVED_PROC_NODE_ID,IS_DYNAMIC,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_NAV_INSTANCE_ID,NODE_TYPE,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_INST_ID,PROC_NODE_ID,REMARK,STATE,SUBAREA_NO,UP_PROC_NODE_ID,VERSION_ID,XML_NODE_ID FROM WF_PROC_NODE_INSTANCE WHERE 1=1 ");sql.append(" AND PROC_INST_ID = " + procInstId);sql.append(" AND PARENT_PROC_NODE_ID LIKE '" + procNodeId + "%'");try {	conn = ConnectionFactory.getConnection();	ps = conn.prepareStatement(sql.getSql());	ps = sql.fillParams(ps);	sql.log(this.getClass());	rs = ps.executeQuery();	while (rs.next()) {		wfProcNodeInstance = new WfProcNodeInstanceSVO();		wfProcNodeInstance.setActivityId(rs.getString("ACTIVITY_ID"));		wfProcNodeInstance.setCaseParam(rs.getString("CASE_PARAM"));		wfProcNodeInstance.setCaseValue(rs.getString("CASE_VALUE"));		wfProcNodeInstance.setConnectType(rs.getString("CONNECT_TYPE"));		wfProcNodeInstance.setDerivedProcNodeId(rs				.getString("DERIVED_PROC_NODE_ID"));		wfProcNodeInstance.setIsDynamic(rs.getString("IS_DYNAMIC"));		wfProcNodeInstance.setIsNeed(rs.getString("IS_NEED"));		wfProcNodeInstance.setNextProcNodeId(rs				.getString("NEXT_PROC_NODE_ID"));		wfProcNodeInstance.setNodeDesc(rs.getString("NODE_DESC"));		wfProcNodeInstance.setNodeNavInstanceId(rs				.getString("NODE_NAV_INSTANCE_ID"));		wfProcNodeInstance.setNodeType(rs.getString("NODE_TYPE"));		wfProcNodeInstance.setParamType(rs.getString("PARAM_TYPE"));		wfProcNodeInstance.setParentProcNodeId(rs				.getString("PARENT_PROC_NODE_ID"));		wfProcNodeInstance.setProcId(rs.getString("PROC_ID"));		wfProcNodeInstance.setProcInstId(rs.getString("PROC_INST_ID"));		wfProcNodeInstance.setProcNodeId(rs.getString("PROC_NODE_ID"));		wfProcNodeInstance.setRemark(rs.getString("REMARK"));		wfProcNodeInstance.setState(rs.getString("STATE"));		wfProcNodeInstance.setSubareaNo(rs.getString("SUBAREA_NO"));		wfProcNodeInstance.setUpProcNodeId(rs				.getString("UP_PROC_NODE_ID"));		wfProcNodeInstance.setVersionId(rs.getString("VERSION_ID"));		wfProcNodeInstance.setXmlNodeId(rs.getString("XML_NODE_ID"));		res.add(wfProcNodeInstance);	}} catch (SQLException se) {	throw new SysException("100003", "JDBC操作异常！", se);} finally {	JdbcUtil.close(rs, ps);}if (0 == res.size())	res = null;return res;}}
