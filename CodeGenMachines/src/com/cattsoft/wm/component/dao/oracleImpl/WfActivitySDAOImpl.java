package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.wm.component.dao.IWfActivitySDAO;import com.cattsoft.wm.vo.WfActivitySVO;/** * 方法WfActivitySDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class WfActivitySDAOImpl implements IWfActivitySDAO {	// private static Logger log = Logger.getLogger(WfActivitySDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WfActivitySVO wfActivity = (WfActivitySVO) vo;		if (StringUtil.isBlank(wfActivity.getActivityId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WF_ACTIVITY(ACTIVITY_DESC,ACTIVITY_ID,ACTIVITY_LEVEL,ACTIVITY_TYPE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DEAL_PROG,EXEC_EXPRESS,FAIL_REDO_COUNT,FAIL_REDO_EXPRESS,FAIL_REDO_TIME_UNIT,FAIL_REDO_TIME_VALUE,IS_NEED,JNDI_NAME,PAIRED_ID,PASS_WORD,POWER,REDO_EXPRESS,REDO_TYPE,REMARK,STATE,STEP_ID,URL,USER_NAME)");		sql				.append(" VALUES (:activityDesc,:activityId,:activityLevel,:activityType,:changeDate,:changeStaffId,:createDate,:createStaffId,:dealProg,:execExpress,:failRedoCount,:failRedoExpress,:failRedoTimeUnit,:failRedoTimeValue,:isNeed,:jndiName,:pairedId,:passWord,:power,:redoExpress,:redoType,:remark,:state,:stepId,:url,:userName)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(wfActivity.getActivityDesc())) {				sql.setNullString("activityDesc");			} else {				sql.setString("activityDesc", wfActivity.getActivityDesc());			}			if (StringUtil.isBlank(wfActivity.getActivityId())) {				sql.setNullLong("activityId");			} else {				sql.setLong("activityId", wfActivity.getActivityId());			}			if (StringUtil.isBlank(wfActivity.getActivityLevel())) {				sql.setNullLong("activityLevel");			} else {				sql.setLong("activityLevel", wfActivity.getActivityLevel());			}			if (StringUtil.isBlank(wfActivity.getActivityType())) {				sql.setNullString("activityType");			} else {				sql.setString("activityType", wfActivity.getActivityType());			}			if (wfActivity.getChangeDate() == null) {				sql.setNullDate("changeDate");			} else {				sql.setTimestamp("changeDate", wfActivity.getChangeDate());			}			if (StringUtil.isBlank(wfActivity.getChangeStaffId())) {				sql.setNullLong("changeStaffId");			} else {				sql.setLong("changeStaffId", wfActivity.getChangeStaffId());			}			if (wfActivity.getCreateDate() == null) {				sql.setNullDate("createDate");			} else {				sql.setTimestamp("createDate", wfActivity.getCreateDate());			}			if (StringUtil.isBlank(wfActivity.getCreateStaffId())) {				sql.setNullLong("createStaffId");			} else {				sql.setLong("createStaffId", wfActivity.getCreateStaffId());			}			if (StringUtil.isBlank(wfActivity.getDealProg())) {				sql.setNullString("dealProg");			} else {				sql.setString("dealProg", wfActivity.getDealProg());			}			if (StringUtil.isBlank(wfActivity.getExecExpress())) {				sql.setNullLong("execExpress");			} else {				sql.setLong("execExpress", wfActivity.getExecExpress());			}			if (StringUtil.isBlank(wfActivity.getFailRedoCount())) {				sql.setNullString("failRedoCount");			} else {				sql.setString("failRedoCount", wfActivity.getFailRedoCount());			}			if (StringUtil.isBlank(wfActivity.getFailRedoExpress())) {				sql.setNullLong("failRedoExpress");			} else {				sql.setLong("failRedoExpress", wfActivity.getFailRedoExpress());			}			if (StringUtil.isBlank(wfActivity.getFailRedoTimeUnit())) {				sql.setNullLong("failRedoTimeUnit");			} else {				sql.setLong("failRedoTimeUnit", wfActivity						.getFailRedoTimeUnit());			}			if (StringUtil.isBlank(wfActivity.getFailRedoTimeValue())) {				sql.setNullLong("failRedoTimeValue");			} else {				sql.setLong("failRedoTimeValue", wfActivity						.getFailRedoTimeValue());			}			if (StringUtil.isBlank(wfActivity.getIsNeed())) {				sql.setNullString("isNeed");			} else {				sql.setString("isNeed", wfActivity.getIsNeed());			}			if (StringUtil.isBlank(wfActivity.getJndiName())) {				sql.setNullString("jndiName");			} else {				sql.setString("jndiName", wfActivity.getJndiName());			}			if (StringUtil.isBlank(wfActivity.getPairedId())) {				sql.setNullLong("pairedId");			} else {				sql.setLong("pairedId", wfActivity.getPairedId());			}			if (StringUtil.isBlank(wfActivity.getPassWord())) {				sql.setNullString("passWord");			} else {				sql.setString("passWord", wfActivity.getPassWord());			}			if (StringUtil.isBlank(wfActivity.getPower())) {				sql.setNullLong("power");			} else {				sql.setLong("power", wfActivity.getPower());			}			if (StringUtil.isBlank(wfActivity.getRedoExpress())) {				sql.setNullString("redoExpress");			} else {				sql.setString("redoExpress", wfActivity.getRedoExpress());			}			if (StringUtil.isBlank(wfActivity.getRedoType())) {				sql.setNullLong("redoType");			} else {				sql.setLong("redoType", wfActivity.getRedoType());			}			if (StringUtil.isBlank(wfActivity.getRemark())) {				sql.setNullString("remark");			} else {				sql.setString("remark", wfActivity.getRemark());			}			if (StringUtil.isBlank(wfActivity.getState())) {				sql.setNullString("state");			} else {				sql.setString("state", wfActivity.getState());			}			if (StringUtil.isBlank(wfActivity.getStepId())) {				sql.setNullString("stepId");			} else {				sql.setString("stepId", wfActivity.getStepId());			}			if (StringUtil.isBlank(wfActivity.getUrl())) {				sql.setNullString("url");			} else {				sql.setString("url", wfActivity.getUrl());			}			if (StringUtil.isBlank(wfActivity.getUserName())) {				sql.setNullString("userName");			} else {				sql.setString("userName", wfActivity.getUserName());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WfActivitySVO wfActivity = (WfActivitySVO) vo;		if (StringUtil.isBlank(wfActivity.getActivityId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ACTIVITY_DESC,ACTIVITY_ID,ACTIVITY_LEVEL,ACTIVITY_TYPE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DEAL_PROG,EXEC_EXPRESS,FAIL_REDO_COUNT,FAIL_REDO_EXPRESS,FAIL_REDO_TIME_UNIT,FAIL_REDO_TIME_VALUE,IS_NEED,JNDI_NAME,PAIRED_ID,PASS_WORD,POWER,REDO_EXPRESS,REDO_TYPE,REMARK,STATE,STEP_ID,URL,USER_NAME FROM WF_ACTIVITY WHERE 1=1  ");		sql.append(" and ACTIVITY_ID=:activityId");		sql.setLong("activityId", wfActivity.getActivityId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		wfActivity = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				wfActivity = new WfActivitySVO();				wfActivity.setActivityDesc(rs.getString("ACTIVITY_DESC"));				wfActivity.setActivityId(rs.getString("ACTIVITY_ID"));				wfActivity.setActivityLevel(rs.getString("ACTIVITY_LEVEL"));				wfActivity.setActivityType(rs.getString("ACTIVITY_TYPE"));				wfActivity.setChangeDate(rs.getTimestamp("CHANGE_DATE"));				wfActivity.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));				wfActivity.setCreateDate(rs.getTimestamp("CREATE_DATE"));				wfActivity.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));				wfActivity.setDealProg(rs.getString("DEAL_PROG"));				wfActivity.setExecExpress(rs.getString("EXEC_EXPRESS"));				wfActivity.setFailRedoCount(rs.getString("FAIL_REDO_COUNT"));				wfActivity						.setFailRedoExpress(rs.getString("FAIL_REDO_EXPRESS"));				wfActivity.setFailRedoTimeUnit(rs						.getString("FAIL_REDO_TIME_UNIT"));				wfActivity.setFailRedoTimeValue(rs						.getString("FAIL_REDO_TIME_VALUE"));				wfActivity.setIsNeed(rs.getString("IS_NEED"));				wfActivity.setJndiName(rs.getString("JNDI_NAME"));				wfActivity.setPairedId(rs.getString("PAIRED_ID"));				wfActivity.setPassWord(rs.getString("PASS_WORD"));				wfActivity.setPower(rs.getString("POWER"));				wfActivity.setRedoExpress(rs.getString("REDO_EXPRESS"));				wfActivity.setRedoType(rs.getString("REDO_TYPE"));				wfActivity.setRemark(rs.getString("REMARK"));				wfActivity.setState(rs.getString("STATE"));				wfActivity.setStepId(rs.getString("STEP_ID"));				wfActivity.setUrl(rs.getString("URL"));				wfActivity.setUserName(rs.getString("USER_NAME"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return wfActivity;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WfActivitySVO wfActivity = (WfActivitySVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ACTIVITY_DESC,ACTIVITY_ID,ACTIVITY_LEVEL,ACTIVITY_TYPE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DEAL_PROG,EXEC_EXPRESS,FAIL_REDO_COUNT,FAIL_REDO_EXPRESS,FAIL_REDO_TIME_UNIT,FAIL_REDO_TIME_VALUE,IS_NEED,JNDI_NAME,PAIRED_ID,PASS_WORD,POWER,REDO_EXPRESS,REDO_TYPE,REMARK,STATE,STEP_ID,URL,USER_NAME FROM WF_ACTIVITY WHERE 1=1 ");		try {			if (wfActivity.getFlagActivityDesc() == 1) {				if (StringUtil.isBlank(wfActivity.getActivityDesc())) {					sql.append(" and ACTIVITY_DESC is null ");				} else {					sql.append(" and ACTIVITY_DESC=:activityDesc");					sql.setString("activityDesc", wfActivity.getActivityDesc());				}			}			if (wfActivity.getFlagActivityId() == 1) {				if (StringUtil.isBlank(wfActivity.getActivityId())) {					sql.append(" and ACTIVITY_ID is null ");				} else {					sql.append(" and ACTIVITY_ID=:activityId");					sql.setLong("activityId", wfActivity.getActivityId());				}			}			if (wfActivity.getFlagActivityLevel() == 1) {				if (StringUtil.isBlank(wfActivity.getActivityLevel())) {					sql.append(" and ACTIVITY_LEVEL is null ");				} else {					sql.append(" and ACTIVITY_LEVEL=:activityLevel");					sql.setLong("activityLevel", wfActivity.getActivityLevel());				}			}			if (wfActivity.getFlagActivityType() == 1) {				if (StringUtil.isBlank(wfActivity.getActivityType())) {					sql.append(" and ACTIVITY_TYPE is null ");				} else {					sql.append(" and ACTIVITY_TYPE=:activityType");					sql.setString("activityType", wfActivity.getActivityType());				}			}			if (wfActivity.getFlagChangeDate() == 1) {				if (wfActivity.getChangeDate() == null) {					sql.append(" and CHANGE_DATE is null ");				} else {					sql.append(" and CHANGE_DATE=:changeDate");					sql.setTimestamp("changeDate", wfActivity.getChangeDate());				}			}			if (wfActivity.getFlagChangeStaffId() == 1) {				if (StringUtil.isBlank(wfActivity.getChangeStaffId())) {					sql.append(" and CHANGE_STAFF_ID is null ");				} else {					sql.append(" and CHANGE_STAFF_ID=:changeStaffId");					sql.setLong("changeStaffId", wfActivity.getChangeStaffId());				}			}			if (wfActivity.getFlagCreateDate() == 1) {				if (wfActivity.getCreateDate() == null) {					sql.append(" and CREATE_DATE is null ");				} else {					sql.append(" and CREATE_DATE=:createDate");					sql.setTimestamp("createDate", wfActivity.getCreateDate());				}			}			if (wfActivity.getFlagCreateStaffId() == 1) {				if (StringUtil.isBlank(wfActivity.getCreateStaffId())) {					sql.append(" and CREATE_STAFF_ID is null ");				} else {					sql.append(" and CREATE_STAFF_ID=:createStaffId");					sql.setLong("createStaffId", wfActivity.getCreateStaffId());				}			}			if (wfActivity.getFlagDealProg() == 1) {				if (StringUtil.isBlank(wfActivity.getDealProg())) {					sql.append(" and DEAL_PROG is null ");				} else {					sql.append(" and DEAL_PROG=:dealProg");					sql.setString("dealProg", wfActivity.getDealProg());				}			}			if (wfActivity.getFlagExecExpress() == 1) {				if (StringUtil.isBlank(wfActivity.getExecExpress())) {					sql.append(" and EXEC_EXPRESS is null ");				} else {					sql.append(" and EXEC_EXPRESS=:execExpress");					sql.setLong("execExpress", wfActivity.getExecExpress());				}			}			if (wfActivity.getFlagFailRedoCount() == 1) {				if (StringUtil.isBlank(wfActivity.getFailRedoCount())) {					sql.append(" and FAIL_REDO_COUNT is null ");				} else {					sql.append(" and FAIL_REDO_COUNT=:failRedoCount");					sql.setString("failRedoCount", wfActivity							.getFailRedoCount());				}			}			if (wfActivity.getFlagFailRedoExpress() == 1) {				if (StringUtil.isBlank(wfActivity.getFailRedoExpress())) {					sql.append(" and FAIL_REDO_EXPRESS is null ");				} else {					sql.append(" and FAIL_REDO_EXPRESS=:failRedoExpress");					sql.setLong("failRedoExpress", wfActivity							.getFailRedoExpress());				}			}			if (wfActivity.getFlagFailRedoTimeUnit() == 1) {				if (StringUtil.isBlank(wfActivity.getFailRedoTimeUnit())) {					sql.append(" and FAIL_REDO_TIME_UNIT is null ");				} else {					sql.append(" and FAIL_REDO_TIME_UNIT=:failRedoTimeUnit");					sql.setLong("failRedoTimeUnit", wfActivity							.getFailRedoTimeUnit());				}			}			if (wfActivity.getFlagFailRedoTimeValue() == 1) {				if (StringUtil.isBlank(wfActivity.getFailRedoTimeValue())) {					sql.append(" and FAIL_REDO_TIME_VALUE is null ");				} else {					sql.append(" and FAIL_REDO_TIME_VALUE=:failRedoTimeValue");					sql.setLong("failRedoTimeValue", wfActivity							.getFailRedoTimeValue());				}			}			if (wfActivity.getFlagIsNeed() == 1) {				if (StringUtil.isBlank(wfActivity.getIsNeed())) {					sql.append(" and IS_NEED is null ");				} else {					sql.append(" and IS_NEED=:isNeed");					sql.setString("isNeed", wfActivity.getIsNeed());				}			}			if (wfActivity.getFlagJndiName() == 1) {				if (StringUtil.isBlank(wfActivity.getJndiName())) {					sql.append(" and JNDI_NAME is null ");				} else {					sql.append(" and JNDI_NAME=:jndiName");					sql.setString("jndiName", wfActivity.getJndiName());				}			}			if (wfActivity.getFlagPairedId() == 1) {				if (StringUtil.isBlank(wfActivity.getPairedId())) {					sql.append(" and PAIRED_ID is null ");				} else {					sql.append(" and PAIRED_ID=:pairedId");					sql.setLong("pairedId", wfActivity.getPairedId());				}			}			if (wfActivity.getFlagPassWord() == 1) {				if (StringUtil.isBlank(wfActivity.getPassWord())) {					sql.append(" and PASS_WORD is null ");				} else {					sql.append(" and PASS_WORD=:passWord");					sql.setString("passWord", wfActivity.getPassWord());				}			}			if (wfActivity.getFlagPower() == 1) {				if (StringUtil.isBlank(wfActivity.getPower())) {					sql.append(" and POWER is null ");				} else {					sql.append(" and POWER=:power");					sql.setLong("power", wfActivity.getPower());				}			}			if (wfActivity.getFlagRedoExpress() == 1) {				if (StringUtil.isBlank(wfActivity.getRedoExpress())) {					sql.append(" and REDO_EXPRESS is null ");				} else {					sql.append(" and REDO_EXPRESS=:redoExpress");					sql.setString("redoExpress", wfActivity.getRedoExpress());				}			}			if (wfActivity.getFlagRedoType() == 1) {				if (StringUtil.isBlank(wfActivity.getRedoType())) {					sql.append(" and REDO_TYPE is null ");				} else {					sql.append(" and REDO_TYPE=:redoType");					sql.setLong("redoType", wfActivity.getRedoType());				}			}			if (wfActivity.getFlagRemark() == 1) {				if (StringUtil.isBlank(wfActivity.getRemark())) {					sql.append(" and REMARK is null ");				} else {					sql.append(" and REMARK=:remark");					sql.setString("remark", wfActivity.getRemark());				}			}			if (wfActivity.getFlagState() == 1) {				if (StringUtil.isBlank(wfActivity.getState())) {					sql.append(" and STATE is null ");				} else {					sql.append(" and STATE=:state");					sql.setString("state", wfActivity.getState());				}			}			if (wfActivity.getFlagStepId() == 1) {				if (StringUtil.isBlank(wfActivity.getStepId())) {					sql.append(" and STEP_ID is null ");				} else {					sql.append(" and STEP_ID=:stepId");					sql.setString("stepId", wfActivity.getStepId());				}			}			if (wfActivity.getFlagUrl() == 1) {				if (StringUtil.isBlank(wfActivity.getUrl())) {					sql.append(" and URL is null ");				} else {					sql.append(" and URL=:url");					sql.setString("url", wfActivity.getUrl());				}			}			if (wfActivity.getFlagUserName() == 1) {				if (StringUtil.isBlank(wfActivity.getUserName())) {					sql.append(" and USER_NAME is null ");				} else {					sql.append(" and USER_NAME=:userName");					sql.setString("userName", wfActivity.getUserName());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				wfActivity = new WfActivitySVO();				wfActivity.setActivityDesc(rs.getString("ACTIVITY_DESC"));				wfActivity.setActivityId(rs.getString("ACTIVITY_ID"));				wfActivity.setActivityLevel(rs.getString("ACTIVITY_LEVEL"));				wfActivity.setActivityType(rs.getString("ACTIVITY_TYPE"));				wfActivity.setChangeDate(rs.getTimestamp("CHANGE_DATE"));				wfActivity.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));				wfActivity.setCreateDate(rs.getTimestamp("CREATE_DATE"));				wfActivity.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));				wfActivity.setDealProg(rs.getString("DEAL_PROG"));				wfActivity.setExecExpress(rs.getString("EXEC_EXPRESS"));				wfActivity.setFailRedoCount(rs.getString("FAIL_REDO_COUNT"));				wfActivity						.setFailRedoExpress(rs.getString("FAIL_REDO_EXPRESS"));				wfActivity.setFailRedoTimeUnit(rs						.getString("FAIL_REDO_TIME_UNIT"));				wfActivity.setFailRedoTimeValue(rs						.getString("FAIL_REDO_TIME_VALUE"));				wfActivity.setIsNeed(rs.getString("IS_NEED"));				wfActivity.setJndiName(rs.getString("JNDI_NAME"));				wfActivity.setPairedId(rs.getString("PAIRED_ID"));				wfActivity.setPassWord(rs.getString("PASS_WORD"));				wfActivity.setPower(rs.getString("POWER"));				wfActivity.setRedoExpress(rs.getString("REDO_EXPRESS"));				wfActivity.setRedoType(rs.getString("REDO_TYPE"));				wfActivity.setRemark(rs.getString("REMARK"));				wfActivity.setState(rs.getString("STATE"));				wfActivity.setStepId(rs.getString("STEP_ID"));				wfActivity.setUrl(rs.getString("URL"));				wfActivity.setUserName(rs.getString("USER_NAME"));				res.add(wfActivity);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WfActivitySVO wfActivity = (WfActivitySVO) vo;		if (StringUtil.isBlank(wfActivity.getActivityId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE WF_ACTIVITY SET ");		try {			if (wfActivity.getFlagActivityDesc() == 1) {				sql.append("ACTIVITY_DESC=:activityDesc,");				sql.setString("activityDesc", wfActivity.getActivityDesc());			}			if (wfActivity.getFlagActivityLevel() == 1) {				sql.append("ACTIVITY_LEVEL=:activityLevel,");				sql.setLong("activityLevel", wfActivity.getActivityLevel());			}			if (wfActivity.getFlagActivityType() == 1) {				sql.append("ACTIVITY_TYPE=:activityType,");				sql.setString("activityType", wfActivity.getActivityType());			}			if (wfActivity.getFlagChangeDate() == 1) {				sql.append("CHANGE_DATE=:changeDate,");				sql.setTimestamp("changeDate", wfActivity.getChangeDate());			}			if (wfActivity.getFlagChangeStaffId() == 1) {				sql.append("CHANGE_STAFF_ID=:changeStaffId,");				sql.setLong("changeStaffId", wfActivity.getChangeStaffId());			}			if (wfActivity.getFlagCreateDate() == 1) {				sql.append("CREATE_DATE=:createDate,");				sql.setTimestamp("createDate", wfActivity.getCreateDate());			}			if (wfActivity.getFlagCreateStaffId() == 1) {				sql.append("CREATE_STAFF_ID=:createStaffId,");				sql.setLong("createStaffId", wfActivity.getCreateStaffId());			}			if (wfActivity.getFlagDealProg() == 1) {				sql.append("DEAL_PROG=:dealProg,");				sql.setString("dealProg", wfActivity.getDealProg());			}			if (wfActivity.getFlagExecExpress() == 1) {				sql.append("EXEC_EXPRESS=:execExpress,");				sql.setLong("execExpress", wfActivity.getExecExpress());			}			if (wfActivity.getFlagFailRedoCount() == 1) {				sql.append("FAIL_REDO_COUNT=:failRedoCount,");				sql.setString("failRedoCount", wfActivity.getFailRedoCount());			}			if (wfActivity.getFlagFailRedoExpress() == 1) {				sql.append("FAIL_REDO_EXPRESS=:failRedoExpress,");				sql.setLong("failRedoExpress", wfActivity.getFailRedoExpress());			}			if (wfActivity.getFlagFailRedoTimeUnit() == 1) {				sql.append("FAIL_REDO_TIME_UNIT=:failRedoTimeUnit,");				sql.setLong("failRedoTimeUnit", wfActivity						.getFailRedoTimeUnit());			}			if (wfActivity.getFlagFailRedoTimeValue() == 1) {				sql.append("FAIL_REDO_TIME_VALUE=:failRedoTimeValue,");				sql.setLong("failRedoTimeValue", wfActivity						.getFailRedoTimeValue());			}			if (wfActivity.getFlagIsNeed() == 1) {				sql.append("IS_NEED=:isNeed,");				sql.setString("isNeed", wfActivity.getIsNeed());			}			if (wfActivity.getFlagJndiName() == 1) {				sql.append("JNDI_NAME=:jndiName,");				sql.setString("jndiName", wfActivity.getJndiName());			}			if (wfActivity.getFlagPairedId() == 1) {				sql.append("PAIRED_ID=:pairedId,");				sql.setLong("pairedId", wfActivity.getPairedId());			}			if (wfActivity.getFlagPassWord() == 1) {				sql.append("PASS_WORD=:passWord,");				sql.setString("passWord", wfActivity.getPassWord());			}			if (wfActivity.getFlagPower() == 1) {				sql.append("POWER=:power,");				sql.setLong("power", wfActivity.getPower());			}			if (wfActivity.getFlagRedoExpress() == 1) {				sql.append("REDO_EXPRESS=:redoExpress,");				sql.setString("redoExpress", wfActivity.getRedoExpress());			}			if (wfActivity.getFlagRedoType() == 1) {				sql.append("REDO_TYPE=:redoType,");				sql.setLong("redoType", wfActivity.getRedoType());			}			if (wfActivity.getFlagRemark() == 1) {				sql.append("REMARK=:remark,");				sql.setString("remark", wfActivity.getRemark());			}			if (wfActivity.getFlagState() == 1) {				sql.append("STATE=:state,");				sql.setString("state", wfActivity.getState());			}			if (wfActivity.getFlagStepId() == 1) {				sql.append("STEP_ID=:stepId,");				sql.setString("stepId", wfActivity.getStepId());			}			if (wfActivity.getFlagUrl() == 1) {				sql.append("URL=:url,");				sql.setString("url", wfActivity.getUrl());			}			if (wfActivity.getFlagUserName() == 1) {				sql.append("USER_NAME=:userName,");				sql.setString("userName", wfActivity.getUserName());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and ACTIVITY_ID=:activityId");			sql.setLong("activityId", wfActivity.getActivityId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WF_ACTIVITY(ACTIVITY_DESC,ACTIVITY_ID,ACTIVITY_LEVEL,ACTIVITY_TYPE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DEAL_PROG,EXEC_EXPRESS,FAIL_REDO_COUNT,FAIL_REDO_EXPRESS,FAIL_REDO_TIME_UNIT,FAIL_REDO_TIME_VALUE,IS_NEED,JNDI_NAME,PAIRED_ID,PASS_WORD,POWER,REDO_EXPRESS,REDO_TYPE,REMARK,STATE,STEP_ID,URL,USER_NAME)");		sql				.append(" VALUES (:activityDesc,:activityId,:activityLevel,:activityType,:changeDate,:changeStaffId,:createDate,:createStaffId,:dealProg,:execExpress,:failRedoCount,:failRedoExpress,:failRedoTimeUnit,:failRedoTimeValue,:isNeed,:jndiName,:pairedId,:passWord,:power,:redoExpress,:redoType,:remark,:state,:stepId,:url,:userName)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				WfActivitySVO wfActivity = (WfActivitySVO) list.get(i);				if (wfActivity == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(wfActivity.getActivityId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(wfActivity.getActivityDesc())) {					sql.setNullString("activityDesc");				} else {					sql.setString("activityDesc", wfActivity.getActivityDesc());				}				if (StringUtil.isBlank(wfActivity.getActivityId())) {					sql.setNullLong("activityId");				} else {					sql.setLong("activityId", wfActivity.getActivityId());				}				if (StringUtil.isBlank(wfActivity.getActivityLevel())) {					sql.setNullLong("activityLevel");				} else {					sql.setLong("activityLevel", wfActivity.getActivityLevel());				}				if (StringUtil.isBlank(wfActivity.getActivityType())) {					sql.setNullString("activityType");				} else {					sql.setString("activityType", wfActivity.getActivityType());				}				if (wfActivity.getChangeDate() == null) {					sql.setNullDate("changeDate");				} else {					sql.setTimestamp("changeDate", wfActivity.getChangeDate());				}				if (StringUtil.isBlank(wfActivity.getChangeStaffId())) {					sql.setNullLong("changeStaffId");				} else {					sql.setLong("changeStaffId", wfActivity.getChangeStaffId());				}				if (wfActivity.getCreateDate() == null) {					sql.setNullDate("createDate");				} else {					sql.setTimestamp("createDate", wfActivity.getCreateDate());				}				if (StringUtil.isBlank(wfActivity.getCreateStaffId())) {					sql.setNullLong("createStaffId");				} else {					sql.setLong("createStaffId", wfActivity.getCreateStaffId());				}				if (StringUtil.isBlank(wfActivity.getDealProg())) {					sql.setNullString("dealProg");				} else {					sql.setString("dealProg", wfActivity.getDealProg());				}				if (StringUtil.isBlank(wfActivity.getExecExpress())) {					sql.setNullLong("execExpress");				} else {					sql.setLong("execExpress", wfActivity.getExecExpress());				}				if (StringUtil.isBlank(wfActivity.getFailRedoCount())) {					sql.setNullString("failRedoCount");				} else {					sql.setString("failRedoCount", wfActivity							.getFailRedoCount());				}				if (StringUtil.isBlank(wfActivity.getFailRedoExpress())) {					sql.setNullLong("failRedoExpress");				} else {					sql.setLong("failRedoExpress", wfActivity							.getFailRedoExpress());				}				if (StringUtil.isBlank(wfActivity.getFailRedoTimeUnit())) {					sql.setNullLong("failRedoTimeUnit");				} else {					sql.setLong("failRedoTimeUnit", wfActivity							.getFailRedoTimeUnit());				}				if (StringUtil.isBlank(wfActivity.getFailRedoTimeValue())) {					sql.setNullLong("failRedoTimeValue");				} else {					sql.setLong("failRedoTimeValue", wfActivity							.getFailRedoTimeValue());				}				if (StringUtil.isBlank(wfActivity.getIsNeed())) {					sql.setNullString("isNeed");				} else {					sql.setString("isNeed", wfActivity.getIsNeed());				}				if (StringUtil.isBlank(wfActivity.getJndiName())) {					sql.setNullString("jndiName");				} else {					sql.setString("jndiName", wfActivity.getJndiName());				}				if (StringUtil.isBlank(wfActivity.getPairedId())) {					sql.setNullLong("pairedId");				} else {					sql.setLong("pairedId", wfActivity.getPairedId());				}				if (StringUtil.isBlank(wfActivity.getPassWord())) {					sql.setNullString("passWord");				} else {					sql.setString("passWord", wfActivity.getPassWord());				}				if (StringUtil.isBlank(wfActivity.getPower())) {					sql.setNullLong("power");				} else {					sql.setLong("power", wfActivity.getPower());				}				if (StringUtil.isBlank(wfActivity.getRedoExpress())) {					sql.setNullString("redoExpress");				} else {					sql.setString("redoExpress", wfActivity.getRedoExpress());				}				if (StringUtil.isBlank(wfActivity.getRedoType())) {					sql.setNullLong("redoType");				} else {					sql.setLong("redoType", wfActivity.getRedoType());				}				if (StringUtil.isBlank(wfActivity.getRemark())) {					sql.setNullString("remark");				} else {					sql.setString("remark", wfActivity.getRemark());				}				if (StringUtil.isBlank(wfActivity.getState())) {					sql.setNullString("state");				} else {					sql.setString("state", wfActivity.getState());				}				if (StringUtil.isBlank(wfActivity.getStepId())) {					sql.setNullString("stepId");				} else {					sql.setString("stepId", wfActivity.getStepId());				}				if (StringUtil.isBlank(wfActivity.getUrl())) {					sql.setNullString("url");				} else {					sql.setString("url", wfActivity.getUrl());				}				if (StringUtil.isBlank(wfActivity.getUserName())) {					sql.setNullString("userName");				} else {					sql.setString("userName", wfActivity.getUserName());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WfActivitySVO wfActivity = (WfActivitySVO) vo;		if (StringUtil.isBlank(wfActivity.getActivityId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM WF_ACTIVITY WHERE 1=1  ");		sql.append(" and ACTIVITY_ID=:activityId");		sql.setLong("activityId", wfActivity.getActivityId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// WfActivitySVO wfActivity=(WfActivitySVO) vo;	}}