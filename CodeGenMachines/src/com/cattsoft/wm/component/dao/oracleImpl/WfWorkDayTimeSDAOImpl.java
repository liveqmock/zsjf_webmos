package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfWorkDayTimeSDAO;import com.cattsoft.wm.vo.WfWorkDayTimeSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfWorkDayTimeSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfWorkDayTimeSDAOImpl implements IWfWorkDayTimeSDAO{    private static Logger log = Logger.getLogger(WfWorkDayTimeSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;    if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_WORK_DAY_TIME(CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DATASET_LEVEL,DAY,EXPRESS_ID,OBJ_STR,REMARK,STATE,TYPE,WORK_DAY_TIME_ID)");sql.append(" VALUES (:changeDate,:changeStaffId,:createDate,:createStaffId,:datasetLevel,:day,:expressId,:objStr,:remark,:state,:type,:workDayTimeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (wfWorkDayTime.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfWorkDayTime.getChangeDate());    }       if (StringUtil.isBlank(wfWorkDayTime.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfWorkDayTime.getChangeStaffId());    }    if (wfWorkDayTime.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfWorkDayTime.getCreateDate());    }       if (StringUtil.isBlank(wfWorkDayTime.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfWorkDayTime.getCreateStaffId());    }       if (StringUtil.isBlank(wfWorkDayTime.getDatasetLevel())) {      sql.setNullString("datasetLevel");     } else {    sql.setString("datasetLevel", wfWorkDayTime.getDatasetLevel());    }    if (wfWorkDayTime.getDay() == null) {      sql.setNullDate("day");     } else {    sql.setTimestamp("day", wfWorkDayTime.getDay());    }       if (StringUtil.isBlank(wfWorkDayTime.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfWorkDayTime.getExpressId());    }       if (StringUtil.isBlank(wfWorkDayTime.getObjStr())) {      sql.setNullString("objStr");     } else {    sql.setString("objStr", wfWorkDayTime.getObjStr());    }       if (StringUtil.isBlank(wfWorkDayTime.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfWorkDayTime.getRemark());    }       if (StringUtil.isBlank(wfWorkDayTime.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfWorkDayTime.getState());    }       if (StringUtil.isBlank(wfWorkDayTime.getType())) {      sql.setNullString("type");     } else {    sql.setString("type", wfWorkDayTime.getType());    }       if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {      sql.setNullLong("workDayTimeId");     } else {    sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;    if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DATASET_LEVEL,DAY,EXPRESS_ID,OBJ_STR,REMARK,STATE,TYPE,WORK_DAY_TIME_ID FROM WF_WORK_DAY_TIME WHERE 1=1  ");sql.append(" and WORK_DAY_TIME_ID=:workDayTimeId");sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfWorkDayTime =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfWorkDayTime = new WfWorkDayTimeSVO();           wfWorkDayTime.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfWorkDayTime.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfWorkDayTime.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfWorkDayTime.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfWorkDayTime.setDatasetLevel(rs.getString("DATASET_LEVEL"));           wfWorkDayTime.setDay(rs.getTimestamp("DAY"));           wfWorkDayTime.setExpressId(rs.getString("EXPRESS_ID"));           wfWorkDayTime.setObjStr(rs.getString("OBJ_STR"));           wfWorkDayTime.setRemark(rs.getString("REMARK"));           wfWorkDayTime.setState(rs.getString("STATE"));           wfWorkDayTime.setType(rs.getString("TYPE"));           wfWorkDayTime.setWorkDayTimeId(rs.getString("WORK_DAY_TIME_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfWorkDayTime;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DATASET_LEVEL,DAY,EXPRESS_ID,OBJ_STR,REMARK,STATE,TYPE,WORK_DAY_TIME_ID FROM WF_WORK_DAY_TIME WHERE 1=1 ");     try {if (wfWorkDayTime.getFlagChangeDate() == 1) {      if (wfWorkDayTime.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfWorkDayTime.getChangeDate());          }   } if (wfWorkDayTime.getFlagChangeStaffId() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getChangeStaffId())) {             sql.append(" and CHANGE_STAFF_ID is null ");          }      else{             sql.append(" and CHANGE_STAFF_ID=:changeStaffId");             sql.setLong("changeStaffId", wfWorkDayTime.getChangeStaffId());          }   } if (wfWorkDayTime.getFlagCreateDate() == 1) {      if (wfWorkDayTime.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfWorkDayTime.getCreateDate());          }   } if (wfWorkDayTime.getFlagCreateStaffId() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getCreateStaffId())) {             sql.append(" and CREATE_STAFF_ID is null ");          }      else{             sql.append(" and CREATE_STAFF_ID=:createStaffId");             sql.setLong("createStaffId", wfWorkDayTime.getCreateStaffId());          }   } if (wfWorkDayTime.getFlagDatasetLevel() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getDatasetLevel())) {             sql.append(" and DATASET_LEVEL is null ");          }      else{             sql.append(" and DATASET_LEVEL=:datasetLevel");             sql.setString("datasetLevel", wfWorkDayTime.getDatasetLevel());          }   } if (wfWorkDayTime.getFlagDay() == 1) {      if (wfWorkDayTime.getDay() == null) {             sql.append(" and DAY is null ");          }      else{             sql.append(" and DAY=:day");             sql.setTimestamp("day", wfWorkDayTime.getDay());          }   } if (wfWorkDayTime.getFlagExpressId() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getExpressId())) {             sql.append(" and EXPRESS_ID is null ");          }      else{             sql.append(" and EXPRESS_ID=:expressId");             sql.setLong("expressId", wfWorkDayTime.getExpressId());          }   } if (wfWorkDayTime.getFlagObjStr() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getObjStr())) {             sql.append(" and OBJ_STR is null ");          }      else{             sql.append(" and OBJ_STR=:objStr");             sql.setString("objStr", wfWorkDayTime.getObjStr());          }   } if (wfWorkDayTime.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfWorkDayTime.getRemark());          }   } if (wfWorkDayTime.getFlagState() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfWorkDayTime.getState());          }   } if (wfWorkDayTime.getFlagType() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getType())) {             sql.append(" and TYPE is null ");          }      else{             sql.append(" and TYPE=:type");             sql.setString("type", wfWorkDayTime.getType());          }   } if (wfWorkDayTime.getFlagWorkDayTimeId() == 1) {      if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {             sql.append(" and WORK_DAY_TIME_ID is null ");          }      else{             sql.append(" and WORK_DAY_TIME_ID=:workDayTimeId");             sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfWorkDayTime = new WfWorkDayTimeSVO();           wfWorkDayTime.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfWorkDayTime.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfWorkDayTime.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfWorkDayTime.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfWorkDayTime.setDatasetLevel(rs.getString("DATASET_LEVEL"));           wfWorkDayTime.setDay(rs.getTimestamp("DAY"));           wfWorkDayTime.setExpressId(rs.getString("EXPRESS_ID"));           wfWorkDayTime.setObjStr(rs.getString("OBJ_STR"));           wfWorkDayTime.setRemark(rs.getString("REMARK"));           wfWorkDayTime.setState(rs.getString("STATE"));           wfWorkDayTime.setType(rs.getString("TYPE"));           wfWorkDayTime.setWorkDayTimeId(rs.getString("WORK_DAY_TIME_ID"));               res.add(wfWorkDayTime);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;    if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_WORK_DAY_TIME SET ");     try {if (wfWorkDayTime.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfWorkDayTime.getChangeDate()); } if (wfWorkDayTime.getFlagChangeStaffId() == 1) {sql.append("CHANGE_STAFF_ID=:changeStaffId,");sql.setLong("changeStaffId", wfWorkDayTime.getChangeStaffId()); } if (wfWorkDayTime.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfWorkDayTime.getCreateDate()); } if (wfWorkDayTime.getFlagCreateStaffId() == 1) {sql.append("CREATE_STAFF_ID=:createStaffId,");sql.setLong("createStaffId", wfWorkDayTime.getCreateStaffId()); } if (wfWorkDayTime.getFlagDatasetLevel() == 1) {sql.append("DATASET_LEVEL=:datasetLevel,"); sql.setString("datasetLevel", wfWorkDayTime.getDatasetLevel()); } if (wfWorkDayTime.getFlagDay() == 1) {sql.append("DAY=:day,"); sql.setTimestamp("day", wfWorkDayTime.getDay()); } if (wfWorkDayTime.getFlagExpressId() == 1) {sql.append("EXPRESS_ID=:expressId,");sql.setLong("expressId", wfWorkDayTime.getExpressId()); } if (wfWorkDayTime.getFlagObjStr() == 1) {sql.append("OBJ_STR=:objStr,"); sql.setString("objStr", wfWorkDayTime.getObjStr()); } if (wfWorkDayTime.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfWorkDayTime.getRemark()); } if (wfWorkDayTime.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfWorkDayTime.getState()); } if (wfWorkDayTime.getFlagType() == 1) {sql.append("TYPE=:type,"); sql.setString("type", wfWorkDayTime.getType()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and WORK_DAY_TIME_ID=:workDayTimeId");sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_WORK_DAY_TIME(CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,DATASET_LEVEL,DAY,EXPRESS_ID,OBJ_STR,REMARK,STATE,TYPE,WORK_DAY_TIME_ID)");sql.append(" VALUES (:changeDate,:changeStaffId,:createDate,:createStaffId,:datasetLevel,:day,:expressId,:objStr,:remark,:state,:type,:workDayTimeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) list.get(i);         if (wfWorkDayTime== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (wfWorkDayTime.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfWorkDayTime.getChangeDate());    }       if (StringUtil.isBlank(wfWorkDayTime.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfWorkDayTime.getChangeStaffId());    }    if (wfWorkDayTime.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfWorkDayTime.getCreateDate());    }       if (StringUtil.isBlank(wfWorkDayTime.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfWorkDayTime.getCreateStaffId());    }       if (StringUtil.isBlank(wfWorkDayTime.getDatasetLevel())) {      sql.setNullString("datasetLevel");     } else {    sql.setString("datasetLevel", wfWorkDayTime.getDatasetLevel());    }    if (wfWorkDayTime.getDay() == null) {      sql.setNullDate("day");     } else {    sql.setTimestamp("day", wfWorkDayTime.getDay());    }       if (StringUtil.isBlank(wfWorkDayTime.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfWorkDayTime.getExpressId());    }       if (StringUtil.isBlank(wfWorkDayTime.getObjStr())) {      sql.setNullString("objStr");     } else {    sql.setString("objStr", wfWorkDayTime.getObjStr());    }       if (StringUtil.isBlank(wfWorkDayTime.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfWorkDayTime.getRemark());    }       if (StringUtil.isBlank(wfWorkDayTime.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfWorkDayTime.getState());    }       if (StringUtil.isBlank(wfWorkDayTime.getType())) {      sql.setNullString("type");     } else {    sql.setString("type", wfWorkDayTime.getType());    }       if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {      sql.setNullLong("workDayTimeId");     } else {    sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;    if (StringUtil.isBlank(wfWorkDayTime.getWorkDayTimeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_WORK_DAY_TIME WHERE 1=1  ");sql.append(" and WORK_DAY_TIME_ID=:workDayTimeId");sql.setLong("workDayTimeId", wfWorkDayTime.getWorkDayTimeId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfWorkDayTimeSVO wfWorkDayTime=(WfWorkDayTimeSVO) vo;       }}
