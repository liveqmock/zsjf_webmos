package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfExpFlowInstanceSDAO;import com.cattsoft.wm.vo.WfExpFlowInstanceSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfExpFlowInstanceSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfExpFlowInstanceSDAOImpl implements IWfExpFlowInstanceSDAO{    private static Logger log = Logger.getLogger(WfExpFlowInstanceSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;    if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_EXP_FLOW_INSTANCE(CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXP_CODE,EXP_FLOW_NAME,EXP_TYPE,FAIL_REASON_NAME,STATE,WF_EXP_FLOW_INST_ID)");sql.append(" VALUES (:changeDate,:changeStaffId,:createDate,:createStaffId,:expCode,:expFlowName,:expType,:failReasonName,:state,:wfExpFlowInstId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (wfExpFlowInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfExpFlowInstance.getChangeDate());    }       if (StringUtil.isBlank(wfExpFlowInstance.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfExpFlowInstance.getChangeStaffId());    }    if (wfExpFlowInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfExpFlowInstance.getCreateDate());    }       if (StringUtil.isBlank(wfExpFlowInstance.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfExpFlowInstance.getCreateStaffId());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpCode())) {      sql.setNullString("expCode");     } else {    sql.setString("expCode", wfExpFlowInstance.getExpCode());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpFlowName())) {      sql.setNullString("expFlowName");     } else {    sql.setString("expFlowName", wfExpFlowInstance.getExpFlowName());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpType())) {      sql.setNullString("expType");     } else {    sql.setString("expType", wfExpFlowInstance.getExpType());    }       if (StringUtil.isBlank(wfExpFlowInstance.getFailReasonName())) {      sql.setNullString("failReasonName");     } else {    sql.setString("failReasonName", wfExpFlowInstance.getFailReasonName());    }       if (StringUtil.isBlank(wfExpFlowInstance.getState())) {      sql.setNullLong("state");     } else {    sql.setLong("state", wfExpFlowInstance.getState());    }       if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {      sql.setNullLong("wfExpFlowInstId");     } else {    sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;    if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXP_CODE,EXP_FLOW_NAME,EXP_TYPE,FAIL_REASON_NAME,STATE,WF_EXP_FLOW_INST_ID FROM WF_EXP_FLOW_INSTANCE WHERE 1=1  ");sql.append(" and WF_EXP_FLOW_INST_ID=:wfExpFlowInstId");sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfExpFlowInstance =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfExpFlowInstance = new WfExpFlowInstanceSVO();           wfExpFlowInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfExpFlowInstance.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfExpFlowInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfExpFlowInstance.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfExpFlowInstance.setExpCode(rs.getString("EXP_CODE"));           wfExpFlowInstance.setExpFlowName(rs.getString("EXP_FLOW_NAME"));           wfExpFlowInstance.setExpType(rs.getString("EXP_TYPE"));           wfExpFlowInstance.setFailReasonName(rs.getString("FAIL_REASON_NAME"));           wfExpFlowInstance.setState(rs.getString("STATE"));           wfExpFlowInstance.setWfExpFlowInstId(rs.getString("WF_EXP_FLOW_INST_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfExpFlowInstance;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXP_CODE,EXP_FLOW_NAME,EXP_TYPE,FAIL_REASON_NAME,STATE,WF_EXP_FLOW_INST_ID FROM WF_EXP_FLOW_INSTANCE WHERE 1=1 ");     try {if (wfExpFlowInstance.getFlagChangeDate() == 1) {      if (wfExpFlowInstance.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfExpFlowInstance.getChangeDate());          }   } if (wfExpFlowInstance.getFlagChangeStaffId() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getChangeStaffId())) {             sql.append(" and CHANGE_STAFF_ID is null ");          }      else{             sql.append(" and CHANGE_STAFF_ID=:changeStaffId");             sql.setLong("changeStaffId", wfExpFlowInstance.getChangeStaffId());          }   } if (wfExpFlowInstance.getFlagCreateDate() == 1) {      if (wfExpFlowInstance.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfExpFlowInstance.getCreateDate());          }   } if (wfExpFlowInstance.getFlagCreateStaffId() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getCreateStaffId())) {             sql.append(" and CREATE_STAFF_ID is null ");          }      else{             sql.append(" and CREATE_STAFF_ID=:createStaffId");             sql.setLong("createStaffId", wfExpFlowInstance.getCreateStaffId());          }   } if (wfExpFlowInstance.getFlagExpCode() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getExpCode())) {             sql.append(" and EXP_CODE is null ");          }      else{             sql.append(" and EXP_CODE=:expCode");             sql.setString("expCode", wfExpFlowInstance.getExpCode());          }   } if (wfExpFlowInstance.getFlagExpFlowName() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getExpFlowName())) {             sql.append(" and EXP_FLOW_NAME is null ");          }      else{             sql.append(" and EXP_FLOW_NAME=:expFlowName");             sql.setString("expFlowName", wfExpFlowInstance.getExpFlowName());          }   } if (wfExpFlowInstance.getFlagExpType() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getExpType())) {             sql.append(" and EXP_TYPE is null ");          }      else{             sql.append(" and EXP_TYPE=:expType");             sql.setString("expType", wfExpFlowInstance.getExpType());          }   } if (wfExpFlowInstance.getFlagFailReasonName() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getFailReasonName())) {             sql.append(" and FAIL_REASON_NAME is null ");          }      else{             sql.append(" and FAIL_REASON_NAME=:failReasonName");             sql.setString("failReasonName", wfExpFlowInstance.getFailReasonName());          }   } if (wfExpFlowInstance.getFlagState() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setLong("state", wfExpFlowInstance.getState());          }   } if (wfExpFlowInstance.getFlagWfExpFlowInstId() == 1) {      if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {             sql.append(" and WF_EXP_FLOW_INST_ID is null ");          }      else{             sql.append(" and WF_EXP_FLOW_INST_ID=:wfExpFlowInstId");             sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfExpFlowInstance = new WfExpFlowInstanceSVO();           wfExpFlowInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfExpFlowInstance.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfExpFlowInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfExpFlowInstance.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfExpFlowInstance.setExpCode(rs.getString("EXP_CODE"));           wfExpFlowInstance.setExpFlowName(rs.getString("EXP_FLOW_NAME"));           wfExpFlowInstance.setExpType(rs.getString("EXP_TYPE"));           wfExpFlowInstance.setFailReasonName(rs.getString("FAIL_REASON_NAME"));           wfExpFlowInstance.setState(rs.getString("STATE"));           wfExpFlowInstance.setWfExpFlowInstId(rs.getString("WF_EXP_FLOW_INST_ID"));               res.add(wfExpFlowInstance);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;    if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_EXP_FLOW_INSTANCE SET ");     try {if (wfExpFlowInstance.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfExpFlowInstance.getChangeDate()); } if (wfExpFlowInstance.getFlagChangeStaffId() == 1) {sql.append("CHANGE_STAFF_ID=:changeStaffId,");sql.setLong("changeStaffId", wfExpFlowInstance.getChangeStaffId()); } if (wfExpFlowInstance.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfExpFlowInstance.getCreateDate()); } if (wfExpFlowInstance.getFlagCreateStaffId() == 1) {sql.append("CREATE_STAFF_ID=:createStaffId,");sql.setLong("createStaffId", wfExpFlowInstance.getCreateStaffId()); } if (wfExpFlowInstance.getFlagExpCode() == 1) {sql.append("EXP_CODE=:expCode,"); sql.setString("expCode", wfExpFlowInstance.getExpCode()); } if (wfExpFlowInstance.getFlagExpFlowName() == 1) {sql.append("EXP_FLOW_NAME=:expFlowName,"); sql.setString("expFlowName", wfExpFlowInstance.getExpFlowName()); } if (wfExpFlowInstance.getFlagExpType() == 1) {sql.append("EXP_TYPE=:expType,"); sql.setString("expType", wfExpFlowInstance.getExpType()); } if (wfExpFlowInstance.getFlagFailReasonName() == 1) {sql.append("FAIL_REASON_NAME=:failReasonName,"); sql.setString("failReasonName", wfExpFlowInstance.getFailReasonName()); } if (wfExpFlowInstance.getFlagState() == 1) {sql.append("STATE=:state,");sql.setLong("state", wfExpFlowInstance.getState()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and WF_EXP_FLOW_INST_ID=:wfExpFlowInstId");sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_EXP_FLOW_INSTANCE(CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXP_CODE,EXP_FLOW_NAME,EXP_TYPE,FAIL_REASON_NAME,STATE,WF_EXP_FLOW_INST_ID)");sql.append(" VALUES (:changeDate,:changeStaffId,:createDate,:createStaffId,:expCode,:expFlowName,:expType,:failReasonName,:state,:wfExpFlowInstId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) list.get(i);         if (wfExpFlowInstance== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (wfExpFlowInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfExpFlowInstance.getChangeDate());    }       if (StringUtil.isBlank(wfExpFlowInstance.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfExpFlowInstance.getChangeStaffId());    }    if (wfExpFlowInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfExpFlowInstance.getCreateDate());    }       if (StringUtil.isBlank(wfExpFlowInstance.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfExpFlowInstance.getCreateStaffId());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpCode())) {      sql.setNullString("expCode");     } else {    sql.setString("expCode", wfExpFlowInstance.getExpCode());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpFlowName())) {      sql.setNullString("expFlowName");     } else {    sql.setString("expFlowName", wfExpFlowInstance.getExpFlowName());    }       if (StringUtil.isBlank(wfExpFlowInstance.getExpType())) {      sql.setNullString("expType");     } else {    sql.setString("expType", wfExpFlowInstance.getExpType());    }       if (StringUtil.isBlank(wfExpFlowInstance.getFailReasonName())) {      sql.setNullString("failReasonName");     } else {    sql.setString("failReasonName", wfExpFlowInstance.getFailReasonName());    }       if (StringUtil.isBlank(wfExpFlowInstance.getState())) {      sql.setNullLong("state");     } else {    sql.setLong("state", wfExpFlowInstance.getState());    }       if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {      sql.setNullLong("wfExpFlowInstId");     } else {    sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;    if (StringUtil.isBlank(wfExpFlowInstance.getWfExpFlowInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_EXP_FLOW_INSTANCE WHERE 1=1  ");sql.append(" and WF_EXP_FLOW_INST_ID=:wfExpFlowInstId");sql.setLong("wfExpFlowInstId", wfExpFlowInstance.getWfExpFlowInstId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfExpFlowInstanceSVO wfExpFlowInstance=(WfExpFlowInstanceSVO) vo;       }}
