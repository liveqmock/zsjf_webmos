package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcInstanceLimitSDAO;import com.cattsoft.wm.vo.WfProcInstanceLimitSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcInstanceLimitSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcInstanceLimitSDAOImpl implements IWfProcInstanceLimitSDAO{    private static Logger log = Logger.getLogger(WfProcInstanceLimitSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;    if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_INSTANCE_LIMIT(BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PROC_INST_ID,REMARK,STATE,WF_PROC_INSTANCE_LIMIT_ID)");sql.append(" VALUES (:beginState,:changeDate,:changeStaffId,:createDate,:createStaffId,:expressId,:metricUnit,:metricValue,:preValue,:procInstId,:remark,:state,:wfProcInstanceLimitId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfProcInstanceLimit.getBeginState())) {      sql.setNullString("beginState");     } else {    sql.setString("beginState", wfProcInstanceLimit.getBeginState());    }    if (wfProcInstanceLimit.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcInstanceLimit.getChangeDate());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfProcInstanceLimit.getChangeStaffId());    }    if (wfProcInstanceLimit.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcInstanceLimit.getCreateDate());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProcInstanceLimit.getCreateStaffId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfProcInstanceLimit.getExpressId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", wfProcInstanceLimit.getMetricUnit());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", wfProcInstanceLimit.getMetricValue());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", wfProcInstanceLimit.getPreValue());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcInstanceLimit.getProcInstId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcInstanceLimit.getRemark());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcInstanceLimit.getState());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {      sql.setNullLong("wfProcInstanceLimitId");     } else {    sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;    if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PROC_INST_ID,REMARK,STATE,WF_PROC_INSTANCE_LIMIT_ID FROM WF_PROC_INSTANCE_LIMIT WHERE 1=1  ");sql.append(" and WF_PROC_INSTANCE_LIMIT_ID=:wfProcInstanceLimitId");sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProcInstanceLimit =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProcInstanceLimit = new WfProcInstanceLimitSVO();           wfProcInstanceLimit.setBeginState(rs.getString("BEGIN_STATE"));           wfProcInstanceLimit.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcInstanceLimit.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfProcInstanceLimit.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcInstanceLimit.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProcInstanceLimit.setExpressId(rs.getString("EXPRESS_ID"));           wfProcInstanceLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           wfProcInstanceLimit.setMetricValue(rs.getString("METRIC_VALUE"));           wfProcInstanceLimit.setPreValue(rs.getString("PRE_VALUE"));           wfProcInstanceLimit.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcInstanceLimit.setRemark(rs.getString("REMARK"));           wfProcInstanceLimit.setState(rs.getString("STATE"));           wfProcInstanceLimit.setWfProcInstanceLimitId(rs.getString("WF_PROC_INSTANCE_LIMIT_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProcInstanceLimit;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PROC_INST_ID,REMARK,STATE,WF_PROC_INSTANCE_LIMIT_ID FROM WF_PROC_INSTANCE_LIMIT WHERE 1=1 ");     try {if (wfProcInstanceLimit.getFlagBeginState() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getBeginState())) {             sql.append(" and BEGIN_STATE is null ");          }      else{             sql.append(" and BEGIN_STATE=:beginState");             sql.setString("beginState", wfProcInstanceLimit.getBeginState());          }   } if (wfProcInstanceLimit.getFlagChangeDate() == 1) {      if (wfProcInstanceLimit.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfProcInstanceLimit.getChangeDate());          }   } if (wfProcInstanceLimit.getFlagChangeStaffId() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getChangeStaffId())) {             sql.append(" and CHANGE_STAFF_ID is null ");          }      else{             sql.append(" and CHANGE_STAFF_ID=:changeStaffId");             sql.setLong("changeStaffId", wfProcInstanceLimit.getChangeStaffId());          }   } if (wfProcInstanceLimit.getFlagCreateDate() == 1) {      if (wfProcInstanceLimit.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfProcInstanceLimit.getCreateDate());          }   } if (wfProcInstanceLimit.getFlagCreateStaffId() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getCreateStaffId())) {             sql.append(" and CREATE_STAFF_ID is null ");          }      else{             sql.append(" and CREATE_STAFF_ID=:createStaffId");             sql.setLong("createStaffId", wfProcInstanceLimit.getCreateStaffId());          }   } if (wfProcInstanceLimit.getFlagExpressId() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getExpressId())) {             sql.append(" and EXPRESS_ID is null ");          }      else{             sql.append(" and EXPRESS_ID=:expressId");             sql.setLong("expressId", wfProcInstanceLimit.getExpressId());          }   } if (wfProcInstanceLimit.getFlagMetricUnit() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getMetricUnit())) {             sql.append(" and METRIC_UNIT is null ");          }      else{             sql.append(" and METRIC_UNIT=:metricUnit");             sql.setLong("metricUnit", wfProcInstanceLimit.getMetricUnit());          }   } if (wfProcInstanceLimit.getFlagMetricValue() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getMetricValue())) {             sql.append(" and METRIC_VALUE is null ");          }      else{             sql.append(" and METRIC_VALUE=:metricValue");             sql.setLong("metricValue", wfProcInstanceLimit.getMetricValue());          }   } if (wfProcInstanceLimit.getFlagPreValue() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getPreValue())) {             sql.append(" and PRE_VALUE is null ");          }      else{             sql.append(" and PRE_VALUE=:preValue");             sql.setLong("preValue", wfProcInstanceLimit.getPreValue());          }   } if (wfProcInstanceLimit.getFlagProcInstId() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getProcInstId())) {             sql.append(" and PROC_INST_ID is null ");          }      else{             sql.append(" and PROC_INST_ID=:procInstId");             sql.setLong("procInstId", wfProcInstanceLimit.getProcInstId());          }   } if (wfProcInstanceLimit.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfProcInstanceLimit.getRemark());          }   } if (wfProcInstanceLimit.getFlagState() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfProcInstanceLimit.getState());          }   } if (wfProcInstanceLimit.getFlagWfProcInstanceLimitId() == 1) {      if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {             sql.append(" and WF_PROC_INSTANCE_LIMIT_ID is null ");          }      else{             sql.append(" and WF_PROC_INSTANCE_LIMIT_ID=:wfProcInstanceLimitId");             sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProcInstanceLimit = new WfProcInstanceLimitSVO();           wfProcInstanceLimit.setBeginState(rs.getString("BEGIN_STATE"));           wfProcInstanceLimit.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcInstanceLimit.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfProcInstanceLimit.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcInstanceLimit.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProcInstanceLimit.setExpressId(rs.getString("EXPRESS_ID"));           wfProcInstanceLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           wfProcInstanceLimit.setMetricValue(rs.getString("METRIC_VALUE"));           wfProcInstanceLimit.setPreValue(rs.getString("PRE_VALUE"));           wfProcInstanceLimit.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcInstanceLimit.setRemark(rs.getString("REMARK"));           wfProcInstanceLimit.setState(rs.getString("STATE"));           wfProcInstanceLimit.setWfProcInstanceLimitId(rs.getString("WF_PROC_INSTANCE_LIMIT_ID"));               res.add(wfProcInstanceLimit);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;    if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC_INSTANCE_LIMIT SET ");     try {if (wfProcInstanceLimit.getFlagBeginState() == 1) {sql.append("BEGIN_STATE=:beginState,"); sql.setString("beginState", wfProcInstanceLimit.getBeginState()); } if (wfProcInstanceLimit.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfProcInstanceLimit.getChangeDate()); } if (wfProcInstanceLimit.getFlagChangeStaffId() == 1) {sql.append("CHANGE_STAFF_ID=:changeStaffId,");sql.setLong("changeStaffId", wfProcInstanceLimit.getChangeStaffId()); } if (wfProcInstanceLimit.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfProcInstanceLimit.getCreateDate()); } if (wfProcInstanceLimit.getFlagCreateStaffId() == 1) {sql.append("CREATE_STAFF_ID=:createStaffId,");sql.setLong("createStaffId", wfProcInstanceLimit.getCreateStaffId()); } if (wfProcInstanceLimit.getFlagExpressId() == 1) {sql.append("EXPRESS_ID=:expressId,");sql.setLong("expressId", wfProcInstanceLimit.getExpressId()); } if (wfProcInstanceLimit.getFlagMetricUnit() == 1) {sql.append("METRIC_UNIT=:metricUnit,");sql.setLong("metricUnit", wfProcInstanceLimit.getMetricUnit()); } if (wfProcInstanceLimit.getFlagMetricValue() == 1) {sql.append("METRIC_VALUE=:metricValue,");sql.setLong("metricValue", wfProcInstanceLimit.getMetricValue()); } if (wfProcInstanceLimit.getFlagPreValue() == 1) {sql.append("PRE_VALUE=:preValue,");sql.setLong("preValue", wfProcInstanceLimit.getPreValue()); } if (wfProcInstanceLimit.getFlagProcInstId() == 1) {sql.append("PROC_INST_ID=:procInstId,");sql.setLong("procInstId", wfProcInstanceLimit.getProcInstId()); } if (wfProcInstanceLimit.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfProcInstanceLimit.getRemark()); } if (wfProcInstanceLimit.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfProcInstanceLimit.getState()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and WF_PROC_INSTANCE_LIMIT_ID=:wfProcInstanceLimitId");sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_INSTANCE_LIMIT(BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PROC_INST_ID,REMARK,STATE,WF_PROC_INSTANCE_LIMIT_ID)");sql.append(" VALUES (:beginState,:changeDate,:changeStaffId,:createDate,:createStaffId,:expressId,:metricUnit,:metricValue,:preValue,:procInstId,:remark,:state,:wfProcInstanceLimitId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) list.get(i);         if (wfProcInstanceLimit== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfProcInstanceLimit.getBeginState())) {      sql.setNullString("beginState");     } else {    sql.setString("beginState", wfProcInstanceLimit.getBeginState());    }    if (wfProcInstanceLimit.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcInstanceLimit.getChangeDate());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfProcInstanceLimit.getChangeStaffId());    }    if (wfProcInstanceLimit.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcInstanceLimit.getCreateDate());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProcInstanceLimit.getCreateStaffId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfProcInstanceLimit.getExpressId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", wfProcInstanceLimit.getMetricUnit());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", wfProcInstanceLimit.getMetricValue());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", wfProcInstanceLimit.getPreValue());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcInstanceLimit.getProcInstId());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcInstanceLimit.getRemark());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcInstanceLimit.getState());    }       if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {      sql.setNullLong("wfProcInstanceLimitId");     } else {    sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;    if (StringUtil.isBlank(wfProcInstanceLimit.getWfProcInstanceLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC_INSTANCE_LIMIT WHERE 1=1  ");sql.append(" and WF_PROC_INSTANCE_LIMIT_ID=:wfProcInstanceLimitId");sql.setLong("wfProcInstanceLimitId", wfProcInstanceLimit.getWfProcInstanceLimitId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcInstanceLimitSVO wfProcInstanceLimit=(WfProcInstanceLimitSVO) vo;       }}
