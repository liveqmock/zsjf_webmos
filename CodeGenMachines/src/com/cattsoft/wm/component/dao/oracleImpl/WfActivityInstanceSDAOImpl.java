package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfActivityInstanceSDAO;import com.cattsoft.wm.vo.WfActivityInstanceSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfActivityInstanceSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfActivityInstanceSDAOImpl implements IWfActivityInstanceSDAO{    private static Logger log = Logger.getLogger(WfActivityInstanceSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;    if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_ACTIVITY_INSTANCE(ACTIVITY_ID,ACTIVITY_INST_ID,ACTIVITY_KIND,CASE_PARAM,CASE_VALUE,CHANGE_DATE,CREATE_DATE,CREATE_TYPE,ERROR_COUNT,FROM_WORK_ITEM_ID,HASTEN_DATE,IS_NEED,LIMIT_DATE,NEXT_PROC_NODE_ID,NODE_NAV_INSTANCE_ID,NODE_TYPE,OLD_STATE,PARAM_TYPE,PARENT_PROC_NODE_ID,PRE_LIMIT_DATE,PROC_INST_ID,PROC_NODE_ID,RELA_ACTIVITY_INST_ID,REQUIRE_DATE,STATE,SUBAREA_NO,UP_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:activityId,:activityInstId,:activityKind,:caseParam,:caseValue,:changeDate,:createDate,:createType,:errorCount,:fromWorkItemId,:hastenDate,:isNeed,:limitDate,:nextProcNodeId,:nodeNavInstanceId,:nodeType,:oldState,:paramType,:parentProcNodeId,:preLimitDate,:procInstId,:procNodeId,:relaActivityInstId,:requireDate,:state,:subareaNo,:upProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfActivityInstance.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfActivityInstance.getActivityId());    }       if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {      sql.setNullLong("activityInstId");     } else {    sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());    }       if (StringUtil.isBlank(wfActivityInstance.getActivityKind())) {      sql.setNullLong("activityKind");     } else {    sql.setLong("activityKind", wfActivityInstance.getActivityKind());    }       if (StringUtil.isBlank(wfActivityInstance.getCaseParam())) {      sql.setNullString("caseParam");     } else {    sql.setString("caseParam", wfActivityInstance.getCaseParam());    }       if (StringUtil.isBlank(wfActivityInstance.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfActivityInstance.getCaseValue());    }    if (wfActivityInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfActivityInstance.getChangeDate());    }    if (wfActivityInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfActivityInstance.getCreateDate());    }       if (StringUtil.isBlank(wfActivityInstance.getCreateType())) {      sql.setNullLong("createType");     } else {    sql.setLong("createType", wfActivityInstance.getCreateType());    }       if (StringUtil.isBlank(wfActivityInstance.getErrorCount())) {      sql.setNullLong("errorCount");     } else {    sql.setLong("errorCount", wfActivityInstance.getErrorCount());    }       if (StringUtil.isBlank(wfActivityInstance.getFromWorkItemId())) {      sql.setNullLong("fromWorkItemId");     } else {    sql.setLong("fromWorkItemId", wfActivityInstance.getFromWorkItemId());    }    if (wfActivityInstance.getHastenDate() == null) {      sql.setNullDate("hastenDate");     } else {    sql.setTimestamp("hastenDate", wfActivityInstance.getHastenDate());    }       if (StringUtil.isBlank(wfActivityInstance.getIsNeed())) {      sql.setNullLong("isNeed");     } else {    sql.setLong("isNeed", wfActivityInstance.getIsNeed());    }    if (wfActivityInstance.getLimitDate() == null) {      sql.setNullDate("limitDate");     } else {    sql.setTimestamp("limitDate", wfActivityInstance.getLimitDate());    }       if (StringUtil.isBlank(wfActivityInstance.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfActivityInstance.getNextProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfActivityInstance.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfActivityInstance.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfActivityInstance.getNodeType());    }       if (StringUtil.isBlank(wfActivityInstance.getOldState())) {      sql.setNullString("oldState");     } else {    sql.setString("oldState", wfActivityInstance.getOldState());    }       if (StringUtil.isBlank(wfActivityInstance.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfActivityInstance.getParamType());    }       if (StringUtil.isBlank(wfActivityInstance.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfActivityInstance.getParentProcNodeId());    }    if (wfActivityInstance.getPreLimitDate() == null) {      sql.setNullDate("preLimitDate");     } else {    sql.setTimestamp("preLimitDate", wfActivityInstance.getPreLimitDate());    }       if (StringUtil.isBlank(wfActivityInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfActivityInstance.getProcInstId());    }       if (StringUtil.isBlank(wfActivityInstance.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfActivityInstance.getProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getRelaActivityInstId())) {      sql.setNullLong("relaActivityInstId");     } else {    sql.setLong("relaActivityInstId", wfActivityInstance.getRelaActivityInstId());    }    if (wfActivityInstance.getRequireDate() == null) {      sql.setNullDate("requireDate");     } else {    sql.setTimestamp("requireDate", wfActivityInstance.getRequireDate());    }       if (StringUtil.isBlank(wfActivityInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfActivityInstance.getState());    }       if (StringUtil.isBlank(wfActivityInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfActivityInstance.getSubareaNo());    }       if (StringUtil.isBlank(wfActivityInstance.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfActivityInstance.getUpProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfActivityInstance.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;    if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTIVITY_ID,ACTIVITY_INST_ID,ACTIVITY_KIND,CASE_PARAM,CASE_VALUE,CHANGE_DATE,CREATE_DATE,CREATE_TYPE,ERROR_COUNT,FROM_WORK_ITEM_ID,HASTEN_DATE,IS_NEED,LIMIT_DATE,NEXT_PROC_NODE_ID,NODE_NAV_INSTANCE_ID,NODE_TYPE,OLD_STATE,PARAM_TYPE,PARENT_PROC_NODE_ID,PRE_LIMIT_DATE,PROC_INST_ID,PROC_NODE_ID,RELA_ACTIVITY_INST_ID,REQUIRE_DATE,STATE,SUBAREA_NO,UP_PROC_NODE_ID,XML_NODE_ID FROM WF_ACTIVITY_INSTANCE WHERE 1=1  ");sql.append(" and ACTIVITY_INST_ID=:activityInstId");sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfActivityInstance =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfActivityInstance = new WfActivityInstanceSVO();           wfActivityInstance.setActivityId(rs.getString("ACTIVITY_ID"));           wfActivityInstance.setActivityInstId(rs.getString("ACTIVITY_INST_ID"));           wfActivityInstance.setActivityKind(rs.getString("ACTIVITY_KIND"));           wfActivityInstance.setCaseParam(rs.getString("CASE_PARAM"));           wfActivityInstance.setCaseValue(rs.getString("CASE_VALUE"));           wfActivityInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfActivityInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfActivityInstance.setCreateType(rs.getString("CREATE_TYPE"));           wfActivityInstance.setErrorCount(rs.getString("ERROR_COUNT"));           wfActivityInstance.setFromWorkItemId(rs.getString("FROM_WORK_ITEM_ID"));           wfActivityInstance.setHastenDate(rs.getTimestamp("HASTEN_DATE"));           wfActivityInstance.setIsNeed(rs.getString("IS_NEED"));           wfActivityInstance.setLimitDate(rs.getTimestamp("LIMIT_DATE"));           wfActivityInstance.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfActivityInstance.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfActivityInstance.setNodeType(rs.getString("NODE_TYPE"));           wfActivityInstance.setOldState(rs.getString("OLD_STATE"));           wfActivityInstance.setParamType(rs.getString("PARAM_TYPE"));           wfActivityInstance.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfActivityInstance.setPreLimitDate(rs.getTimestamp("PRE_LIMIT_DATE"));           wfActivityInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfActivityInstance.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfActivityInstance.setRelaActivityInstId(rs.getString("RELA_ACTIVITY_INST_ID"));           wfActivityInstance.setRequireDate(rs.getTimestamp("REQUIRE_DATE"));           wfActivityInstance.setState(rs.getString("STATE"));           wfActivityInstance.setSubareaNo(rs.getString("SUBAREA_NO"));           wfActivityInstance.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfActivityInstance.setXmlNodeId(rs.getString("XML_NODE_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfActivityInstance;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTIVITY_ID,ACTIVITY_INST_ID,ACTIVITY_KIND,CASE_PARAM,CASE_VALUE,CHANGE_DATE,CREATE_DATE,CREATE_TYPE,ERROR_COUNT,FROM_WORK_ITEM_ID,HASTEN_DATE,IS_NEED,LIMIT_DATE,NEXT_PROC_NODE_ID,NODE_NAV_INSTANCE_ID,NODE_TYPE,OLD_STATE,PARAM_TYPE,PARENT_PROC_NODE_ID,PRE_LIMIT_DATE,PROC_INST_ID,PROC_NODE_ID,RELA_ACTIVITY_INST_ID,REQUIRE_DATE,STATE,SUBAREA_NO,UP_PROC_NODE_ID,XML_NODE_ID FROM WF_ACTIVITY_INSTANCE WHERE 1=1 ");     try {if (wfActivityInstance.getFlagActivityId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getActivityId())) {             sql.append(" and ACTIVITY_ID is null ");          }      else{             sql.append(" and ACTIVITY_ID=:activityId");             sql.setLong("activityId", wfActivityInstance.getActivityId());          }   } if (wfActivityInstance.getFlagActivityInstId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {             sql.append(" and ACTIVITY_INST_ID is null ");          }      else{             sql.append(" and ACTIVITY_INST_ID=:activityInstId");             sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());          }   } if (wfActivityInstance.getFlagActivityKind() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getActivityKind())) {             sql.append(" and ACTIVITY_KIND is null ");          }      else{             sql.append(" and ACTIVITY_KIND=:activityKind");             sql.setLong("activityKind", wfActivityInstance.getActivityKind());          }   } if (wfActivityInstance.getFlagCaseParam() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getCaseParam())) {             sql.append(" and CASE_PARAM is null ");          }      else{             sql.append(" and CASE_PARAM=:caseParam");             sql.setString("caseParam", wfActivityInstance.getCaseParam());          }   } if (wfActivityInstance.getFlagCaseValue() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getCaseValue())) {             sql.append(" and CASE_VALUE is null ");          }      else{             sql.append(" and CASE_VALUE=:caseValue");             sql.setString("caseValue", wfActivityInstance.getCaseValue());          }   } if (wfActivityInstance.getFlagChangeDate() == 1) {      if (wfActivityInstance.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfActivityInstance.getChangeDate());          }   } if (wfActivityInstance.getFlagCreateDate() == 1) {      if (wfActivityInstance.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfActivityInstance.getCreateDate());          }   } if (wfActivityInstance.getFlagCreateType() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getCreateType())) {             sql.append(" and CREATE_TYPE is null ");          }      else{             sql.append(" and CREATE_TYPE=:createType");             sql.setLong("createType", wfActivityInstance.getCreateType());          }   } if (wfActivityInstance.getFlagErrorCount() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getErrorCount())) {             sql.append(" and ERROR_COUNT is null ");          }      else{             sql.append(" and ERROR_COUNT=:errorCount");             sql.setLong("errorCount", wfActivityInstance.getErrorCount());          }   } if (wfActivityInstance.getFlagFromWorkItemId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getFromWorkItemId())) {             sql.append(" and FROM_WORK_ITEM_ID is null ");          }      else{             sql.append(" and FROM_WORK_ITEM_ID=:fromWorkItemId");             sql.setLong("fromWorkItemId", wfActivityInstance.getFromWorkItemId());          }   } if (wfActivityInstance.getFlagHastenDate() == 1) {      if (wfActivityInstance.getHastenDate() == null) {             sql.append(" and HASTEN_DATE is null ");          }      else{             sql.append(" and HASTEN_DATE=:hastenDate");             sql.setTimestamp("hastenDate", wfActivityInstance.getHastenDate());          }   } if (wfActivityInstance.getFlagIsNeed() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getIsNeed())) {             sql.append(" and IS_NEED is null ");          }      else{             sql.append(" and IS_NEED=:isNeed");             sql.setLong("isNeed", wfActivityInstance.getIsNeed());          }   } if (wfActivityInstance.getFlagLimitDate() == 1) {      if (wfActivityInstance.getLimitDate() == null) {             sql.append(" and LIMIT_DATE is null ");          }      else{             sql.append(" and LIMIT_DATE=:limitDate");             sql.setTimestamp("limitDate", wfActivityInstance.getLimitDate());          }   } if (wfActivityInstance.getFlagNextProcNodeId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getNextProcNodeId())) {             sql.append(" and NEXT_PROC_NODE_ID is null ");          }      else{             sql.append(" and NEXT_PROC_NODE_ID=:nextProcNodeId");             sql.setString("nextProcNodeId", wfActivityInstance.getNextProcNodeId());          }   } if (wfActivityInstance.getFlagNodeNavInstanceId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getNodeNavInstanceId())) {             sql.append(" and NODE_NAV_INSTANCE_ID is null ");          }      else{             sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");             sql.setLong("nodeNavInstanceId", wfActivityInstance.getNodeNavInstanceId());          }   } if (wfActivityInstance.getFlagNodeType() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getNodeType())) {             sql.append(" and NODE_TYPE is null ");          }      else{             sql.append(" and NODE_TYPE=:nodeType");             sql.setString("nodeType", wfActivityInstance.getNodeType());          }   } if (wfActivityInstance.getFlagOldState() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getOldState())) {             sql.append(" and OLD_STATE is null ");          }      else{             sql.append(" and OLD_STATE=:oldState");             sql.setString("oldState", wfActivityInstance.getOldState());          }   } if (wfActivityInstance.getFlagParamType() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getParamType())) {             sql.append(" and PARAM_TYPE is null ");          }      else{             sql.append(" and PARAM_TYPE=:paramType");             sql.setLong("paramType", wfActivityInstance.getParamType());          }   } if (wfActivityInstance.getFlagParentProcNodeId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getParentProcNodeId())) {             sql.append(" and PARENT_PROC_NODE_ID is null ");          }      else{             sql.append(" and PARENT_PROC_NODE_ID=:parentProcNodeId");             sql.setString("parentProcNodeId", wfActivityInstance.getParentProcNodeId());          }   } if (wfActivityInstance.getFlagPreLimitDate() == 1) {      if (wfActivityInstance.getPreLimitDate() == null) {             sql.append(" and PRE_LIMIT_DATE is null ");          }      else{             sql.append(" and PRE_LIMIT_DATE=:preLimitDate");             sql.setTimestamp("preLimitDate", wfActivityInstance.getPreLimitDate());          }   } if (wfActivityInstance.getFlagProcInstId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getProcInstId())) {             sql.append(" and PROC_INST_ID is null ");          }      else{             sql.append(" and PROC_INST_ID=:procInstId");             sql.setLong("procInstId", wfActivityInstance.getProcInstId());          }   } if (wfActivityInstance.getFlagProcNodeId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getProcNodeId())) {             sql.append(" and PROC_NODE_ID is null ");          }      else{             sql.append(" and PROC_NODE_ID=:procNodeId");             sql.setString("procNodeId", wfActivityInstance.getProcNodeId());          }   } if (wfActivityInstance.getFlagRelaActivityInstId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getRelaActivityInstId())) {             sql.append(" and RELA_ACTIVITY_INST_ID is null ");          }      else{             sql.append(" and RELA_ACTIVITY_INST_ID=:relaActivityInstId");             sql.setLong("relaActivityInstId", wfActivityInstance.getRelaActivityInstId());          }   } if (wfActivityInstance.getFlagRequireDate() == 1) {      if (wfActivityInstance.getRequireDate() == null) {             sql.append(" and REQUIRE_DATE is null ");          }      else{             sql.append(" and REQUIRE_DATE=:requireDate");             sql.setTimestamp("requireDate", wfActivityInstance.getRequireDate());          }   } if (wfActivityInstance.getFlagState() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfActivityInstance.getState());          }   } if (wfActivityInstance.getFlagSubareaNo() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getSubareaNo())) {             sql.append(" and SUBAREA_NO is null ");          }      else{             sql.append(" and SUBAREA_NO=:subareaNo");             sql.setLong("subareaNo", wfActivityInstance.getSubareaNo());          }   } if (wfActivityInstance.getFlagUpProcNodeId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getUpProcNodeId())) {             sql.append(" and UP_PROC_NODE_ID is null ");          }      else{             sql.append(" and UP_PROC_NODE_ID=:upProcNodeId");             sql.setString("upProcNodeId", wfActivityInstance.getUpProcNodeId());          }   } if (wfActivityInstance.getFlagXmlNodeId() == 1) {      if (StringUtil.isBlank(wfActivityInstance.getXmlNodeId())) {             sql.append(" and XML_NODE_ID is null ");          }      else{             sql.append(" and XML_NODE_ID=:xmlNodeId");             sql.setString("xmlNodeId", wfActivityInstance.getXmlNodeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfActivityInstance = new WfActivityInstanceSVO();           wfActivityInstance.setActivityId(rs.getString("ACTIVITY_ID"));           wfActivityInstance.setActivityInstId(rs.getString("ACTIVITY_INST_ID"));           wfActivityInstance.setActivityKind(rs.getString("ACTIVITY_KIND"));           wfActivityInstance.setCaseParam(rs.getString("CASE_PARAM"));           wfActivityInstance.setCaseValue(rs.getString("CASE_VALUE"));           wfActivityInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfActivityInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfActivityInstance.setCreateType(rs.getString("CREATE_TYPE"));           wfActivityInstance.setErrorCount(rs.getString("ERROR_COUNT"));           wfActivityInstance.setFromWorkItemId(rs.getString("FROM_WORK_ITEM_ID"));           wfActivityInstance.setHastenDate(rs.getTimestamp("HASTEN_DATE"));           wfActivityInstance.setIsNeed(rs.getString("IS_NEED"));           wfActivityInstance.setLimitDate(rs.getTimestamp("LIMIT_DATE"));           wfActivityInstance.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfActivityInstance.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfActivityInstance.setNodeType(rs.getString("NODE_TYPE"));           wfActivityInstance.setOldState(rs.getString("OLD_STATE"));           wfActivityInstance.setParamType(rs.getString("PARAM_TYPE"));           wfActivityInstance.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfActivityInstance.setPreLimitDate(rs.getTimestamp("PRE_LIMIT_DATE"));           wfActivityInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfActivityInstance.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfActivityInstance.setRelaActivityInstId(rs.getString("RELA_ACTIVITY_INST_ID"));           wfActivityInstance.setRequireDate(rs.getTimestamp("REQUIRE_DATE"));           wfActivityInstance.setState(rs.getString("STATE"));           wfActivityInstance.setSubareaNo(rs.getString("SUBAREA_NO"));           wfActivityInstance.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfActivityInstance.setXmlNodeId(rs.getString("XML_NODE_ID"));               res.add(wfActivityInstance);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;    if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_ACTIVITY_INSTANCE SET ");     try {if (wfActivityInstance.getFlagActivityId() == 1) {sql.append("ACTIVITY_ID=:activityId,");sql.setLong("activityId", wfActivityInstance.getActivityId()); } if (wfActivityInstance.getFlagActivityKind() == 1) {sql.append("ACTIVITY_KIND=:activityKind,");sql.setLong("activityKind", wfActivityInstance.getActivityKind()); } if (wfActivityInstance.getFlagCaseParam() == 1) {sql.append("CASE_PARAM=:caseParam,"); sql.setString("caseParam", wfActivityInstance.getCaseParam()); } if (wfActivityInstance.getFlagCaseValue() == 1) {sql.append("CASE_VALUE=:caseValue,"); sql.setString("caseValue", wfActivityInstance.getCaseValue()); } if (wfActivityInstance.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfActivityInstance.getChangeDate()); } if (wfActivityInstance.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfActivityInstance.getCreateDate()); } if (wfActivityInstance.getFlagCreateType() == 1) {sql.append("CREATE_TYPE=:createType,");sql.setLong("createType", wfActivityInstance.getCreateType()); } if (wfActivityInstance.getFlagErrorCount() == 1) {sql.append("ERROR_COUNT=:errorCount,");sql.setLong("errorCount", wfActivityInstance.getErrorCount()); } if (wfActivityInstance.getFlagFromWorkItemId() == 1) {sql.append("FROM_WORK_ITEM_ID=:fromWorkItemId,");sql.setLong("fromWorkItemId", wfActivityInstance.getFromWorkItemId()); } if (wfActivityInstance.getFlagHastenDate() == 1) {sql.append("HASTEN_DATE=:hastenDate,"); sql.setTimestamp("hastenDate", wfActivityInstance.getHastenDate()); } if (wfActivityInstance.getFlagIsNeed() == 1) {sql.append("IS_NEED=:isNeed,");sql.setLong("isNeed", wfActivityInstance.getIsNeed()); } if (wfActivityInstance.getFlagLimitDate() == 1) {sql.append("LIMIT_DATE=:limitDate,"); sql.setTimestamp("limitDate", wfActivityInstance.getLimitDate()); } if (wfActivityInstance.getFlagNextProcNodeId() == 1) {sql.append("NEXT_PROC_NODE_ID=:nextProcNodeId,"); sql.setString("nextProcNodeId", wfActivityInstance.getNextProcNodeId()); } if (wfActivityInstance.getFlagNodeNavInstanceId() == 1) {sql.append("NODE_NAV_INSTANCE_ID=:nodeNavInstanceId,");sql.setLong("nodeNavInstanceId", wfActivityInstance.getNodeNavInstanceId()); } if (wfActivityInstance.getFlagNodeType() == 1) {sql.append("NODE_TYPE=:nodeType,"); sql.setString("nodeType", wfActivityInstance.getNodeType()); } if (wfActivityInstance.getFlagOldState() == 1) {sql.append("OLD_STATE=:oldState,"); sql.setString("oldState", wfActivityInstance.getOldState()); } if (wfActivityInstance.getFlagParamType() == 1) {sql.append("PARAM_TYPE=:paramType,");sql.setLong("paramType", wfActivityInstance.getParamType()); } if (wfActivityInstance.getFlagParentProcNodeId() == 1) {sql.append("PARENT_PROC_NODE_ID=:parentProcNodeId,"); sql.setString("parentProcNodeId", wfActivityInstance.getParentProcNodeId()); } if (wfActivityInstance.getFlagPreLimitDate() == 1) {sql.append("PRE_LIMIT_DATE=:preLimitDate,"); sql.setTimestamp("preLimitDate", wfActivityInstance.getPreLimitDate()); } if (wfActivityInstance.getFlagProcInstId() == 1) {sql.append("PROC_INST_ID=:procInstId,");sql.setLong("procInstId", wfActivityInstance.getProcInstId()); } if (wfActivityInstance.getFlagProcNodeId() == 1) {sql.append("PROC_NODE_ID=:procNodeId,"); sql.setString("procNodeId", wfActivityInstance.getProcNodeId()); } if (wfActivityInstance.getFlagRelaActivityInstId() == 1) {sql.append("RELA_ACTIVITY_INST_ID=:relaActivityInstId,");sql.setLong("relaActivityInstId", wfActivityInstance.getRelaActivityInstId()); } if (wfActivityInstance.getFlagRequireDate() == 1) {sql.append("REQUIRE_DATE=:requireDate,"); sql.setTimestamp("requireDate", wfActivityInstance.getRequireDate()); } if (wfActivityInstance.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfActivityInstance.getState()); } if (wfActivityInstance.getFlagSubareaNo() == 1) {sql.append("SUBAREA_NO=:subareaNo,");sql.setLong("subareaNo", wfActivityInstance.getSubareaNo()); } if (wfActivityInstance.getFlagUpProcNodeId() == 1) {sql.append("UP_PROC_NODE_ID=:upProcNodeId,"); sql.setString("upProcNodeId", wfActivityInstance.getUpProcNodeId()); } if (wfActivityInstance.getFlagXmlNodeId() == 1) {sql.append("XML_NODE_ID=:xmlNodeId,"); sql.setString("xmlNodeId", wfActivityInstance.getXmlNodeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and ACTIVITY_INST_ID=:activityInstId");sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_ACTIVITY_INSTANCE(ACTIVITY_ID,ACTIVITY_INST_ID,ACTIVITY_KIND,CASE_PARAM,CASE_VALUE,CHANGE_DATE,CREATE_DATE,CREATE_TYPE,ERROR_COUNT,FROM_WORK_ITEM_ID,HASTEN_DATE,IS_NEED,LIMIT_DATE,NEXT_PROC_NODE_ID,NODE_NAV_INSTANCE_ID,NODE_TYPE,OLD_STATE,PARAM_TYPE,PARENT_PROC_NODE_ID,PRE_LIMIT_DATE,PROC_INST_ID,PROC_NODE_ID,RELA_ACTIVITY_INST_ID,REQUIRE_DATE,STATE,SUBAREA_NO,UP_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:activityId,:activityInstId,:activityKind,:caseParam,:caseValue,:changeDate,:createDate,:createType,:errorCount,:fromWorkItemId,:hastenDate,:isNeed,:limitDate,:nextProcNodeId,:nodeNavInstanceId,:nodeType,:oldState,:paramType,:parentProcNodeId,:preLimitDate,:procInstId,:procNodeId,:relaActivityInstId,:requireDate,:state,:subareaNo,:upProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) list.get(i);         if (wfActivityInstance== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfActivityInstance.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfActivityInstance.getActivityId());    }       if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {      sql.setNullLong("activityInstId");     } else {    sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());    }       if (StringUtil.isBlank(wfActivityInstance.getActivityKind())) {      sql.setNullLong("activityKind");     } else {    sql.setLong("activityKind", wfActivityInstance.getActivityKind());    }       if (StringUtil.isBlank(wfActivityInstance.getCaseParam())) {      sql.setNullString("caseParam");     } else {    sql.setString("caseParam", wfActivityInstance.getCaseParam());    }       if (StringUtil.isBlank(wfActivityInstance.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfActivityInstance.getCaseValue());    }    if (wfActivityInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfActivityInstance.getChangeDate());    }    if (wfActivityInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfActivityInstance.getCreateDate());    }       if (StringUtil.isBlank(wfActivityInstance.getCreateType())) {      sql.setNullLong("createType");     } else {    sql.setLong("createType", wfActivityInstance.getCreateType());    }       if (StringUtil.isBlank(wfActivityInstance.getErrorCount())) {      sql.setNullLong("errorCount");     } else {    sql.setLong("errorCount", wfActivityInstance.getErrorCount());    }       if (StringUtil.isBlank(wfActivityInstance.getFromWorkItemId())) {      sql.setNullLong("fromWorkItemId");     } else {    sql.setLong("fromWorkItemId", wfActivityInstance.getFromWorkItemId());    }    if (wfActivityInstance.getHastenDate() == null) {      sql.setNullDate("hastenDate");     } else {    sql.setTimestamp("hastenDate", wfActivityInstance.getHastenDate());    }       if (StringUtil.isBlank(wfActivityInstance.getIsNeed())) {      sql.setNullLong("isNeed");     } else {    sql.setLong("isNeed", wfActivityInstance.getIsNeed());    }    if (wfActivityInstance.getLimitDate() == null) {      sql.setNullDate("limitDate");     } else {    sql.setTimestamp("limitDate", wfActivityInstance.getLimitDate());    }       if (StringUtil.isBlank(wfActivityInstance.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfActivityInstance.getNextProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfActivityInstance.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfActivityInstance.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfActivityInstance.getNodeType());    }       if (StringUtil.isBlank(wfActivityInstance.getOldState())) {      sql.setNullString("oldState");     } else {    sql.setString("oldState", wfActivityInstance.getOldState());    }       if (StringUtil.isBlank(wfActivityInstance.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfActivityInstance.getParamType());    }       if (StringUtil.isBlank(wfActivityInstance.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfActivityInstance.getParentProcNodeId());    }    if (wfActivityInstance.getPreLimitDate() == null) {      sql.setNullDate("preLimitDate");     } else {    sql.setTimestamp("preLimitDate", wfActivityInstance.getPreLimitDate());    }       if (StringUtil.isBlank(wfActivityInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfActivityInstance.getProcInstId());    }       if (StringUtil.isBlank(wfActivityInstance.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfActivityInstance.getProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getRelaActivityInstId())) {      sql.setNullLong("relaActivityInstId");     } else {    sql.setLong("relaActivityInstId", wfActivityInstance.getRelaActivityInstId());    }    if (wfActivityInstance.getRequireDate() == null) {      sql.setNullDate("requireDate");     } else {    sql.setTimestamp("requireDate", wfActivityInstance.getRequireDate());    }       if (StringUtil.isBlank(wfActivityInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfActivityInstance.getState());    }       if (StringUtil.isBlank(wfActivityInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfActivityInstance.getSubareaNo());    }       if (StringUtil.isBlank(wfActivityInstance.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfActivityInstance.getUpProcNodeId());    }       if (StringUtil.isBlank(wfActivityInstance.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfActivityInstance.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;    if (StringUtil.isBlank(wfActivityInstance.getActivityInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_ACTIVITY_INSTANCE WHERE 1=1  ");sql.append(" and ACTIVITY_INST_ID=:activityInstId");sql.setLong("activityInstId", wfActivityInstance.getActivityInstId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfActivityInstanceSVO wfActivityInstance=(WfActivityInstanceSVO) vo;       }}
