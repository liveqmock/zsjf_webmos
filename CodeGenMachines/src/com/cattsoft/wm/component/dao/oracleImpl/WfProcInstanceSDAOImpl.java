package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcInstanceSDAO;import com.cattsoft.wm.vo.WfProcInstanceSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcInstanceSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcInstanceSDAOImpl implements IWfProcInstanceSDAO{    private static Logger log = Logger.getLogger(WfProcInstanceSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;    if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_INSTANCE(ACTIVE_DATE,AREA_ID,AREA_TYPE,CANC_TYPE,CHANGE_DATE,CREATE_DATE,EXT_SYSTEM_ID,EXT_WORK_ID,FINISH_DATE,LIMIT_DATE,OLD_STATE,PRECONTRACT_DATE,PRE_LIMIT_DATE,PRIORITY,PROCESS_XML,PROC_ID,PROC_INST_ID,REALTIME_FLAG,REQUIRE_DATE,STATE,SUBAREA_NO)");sql.append(" VALUES (:activeDate,:areaId,:areaType,:cancType,:changeDate,:createDate,:extSystemId,:extWorkId,:finishDate,:limitDate,:oldState,:precontractDate,:preLimitDate,:priority,:processXml,:procId,:procInstId,:realtimeFlag,:requireDate,:state,:subareaNo)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (wfProcInstance.getActiveDate() == null) {      sql.setNullDate("activeDate");     } else {    sql.setTimestamp("activeDate", wfProcInstance.getActiveDate());    }       if (StringUtil.isBlank(wfProcInstance.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfProcInstance.getAreaId());    }       if (StringUtil.isBlank(wfProcInstance.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfProcInstance.getAreaType());    }       if (StringUtil.isBlank(wfProcInstance.getCancType())) {      sql.setNullLong("cancType");     } else {    sql.setLong("cancType", wfProcInstance.getCancType());    }    if (wfProcInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcInstance.getChangeDate());    }    if (wfProcInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcInstance.getCreateDate());    }       if (StringUtil.isBlank(wfProcInstance.getExtSystemId())) {      sql.setNullString("extSystemId");     } else {    sql.setString("extSystemId", wfProcInstance.getExtSystemId());    }       if (StringUtil.isBlank(wfProcInstance.getExtWorkId())) {      sql.setNullString("extWorkId");     } else {    sql.setString("extWorkId", wfProcInstance.getExtWorkId());    }    if (wfProcInstance.getFinishDate() == null) {      sql.setNullDate("finishDate");     } else {    sql.setTimestamp("finishDate", wfProcInstance.getFinishDate());    }    if (wfProcInstance.getLimitDate() == null) {      sql.setNullDate("limitDate");     } else {    sql.setTimestamp("limitDate", wfProcInstance.getLimitDate());    }       if (StringUtil.isBlank(wfProcInstance.getOldState())) {      sql.setNullString("oldState");     } else {    sql.setString("oldState", wfProcInstance.getOldState());    }    if (wfProcInstance.getPrecontractDate() == null) {      sql.setNullDate("precontractDate");     } else {    sql.setTimestamp("precontractDate", wfProcInstance.getPrecontractDate());    }    if (wfProcInstance.getPreLimitDate() == null) {      sql.setNullDate("preLimitDate");     } else {    sql.setTimestamp("preLimitDate", wfProcInstance.getPreLimitDate());    }       if (StringUtil.isBlank(wfProcInstance.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", wfProcInstance.getPriority());    }       if (wfProcInstance.getProcessXml() == null) {      sql.setNullClob("processXml");     } else {    sql.setClob("processXml", wfProcInstance.getProcessXml());    }       if (StringUtil.isBlank(wfProcInstance.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcInstance.getProcId());    }       if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcInstance.getProcInstId());    }       if (StringUtil.isBlank(wfProcInstance.getRealtimeFlag())) {      sql.setNullLong("realtimeFlag");     } else {    sql.setLong("realtimeFlag", wfProcInstance.getRealtimeFlag());    }    if (wfProcInstance.getRequireDate() == null) {      sql.setNullDate("requireDate");     } else {    sql.setTimestamp("requireDate", wfProcInstance.getRequireDate());    }       if (StringUtil.isBlank(wfProcInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcInstance.getState());    }       if (StringUtil.isBlank(wfProcInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfProcInstance.getSubareaNo());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;    if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTIVE_DATE,AREA_ID,AREA_TYPE,CANC_TYPE,CHANGE_DATE,CREATE_DATE,EXT_SYSTEM_ID,EXT_WORK_ID,FINISH_DATE,LIMIT_DATE,OLD_STATE,PRECONTRACT_DATE,PRE_LIMIT_DATE,PRIORITY,PROCESS_XML,PROC_ID,PROC_INST_ID,REALTIME_FLAG,REQUIRE_DATE,STATE,SUBAREA_NO FROM WF_PROC_INSTANCE WHERE 1=1  ");sql.append(" and PROC_INST_ID=:procInstId");sql.setLong("procInstId", wfProcInstance.getProcInstId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProcInstance =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProcInstance = new WfProcInstanceSVO();           wfProcInstance.setActiveDate(rs.getTimestamp("ACTIVE_DATE"));           wfProcInstance.setAreaId(rs.getString("AREA_ID"));           wfProcInstance.setAreaType(rs.getString("AREA_TYPE"));           wfProcInstance.setCancType(rs.getString("CANC_TYPE"));           wfProcInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcInstance.setExtSystemId(rs.getString("EXT_SYSTEM_ID"));           wfProcInstance.setExtWorkId(rs.getString("EXT_WORK_ID"));           wfProcInstance.setFinishDate(rs.getTimestamp("FINISH_DATE"));           wfProcInstance.setLimitDate(rs.getTimestamp("LIMIT_DATE"));           wfProcInstance.setOldState(rs.getString("OLD_STATE"));           wfProcInstance.setPrecontractDate(rs.getTimestamp("PRECONTRACT_DATE"));           wfProcInstance.setPreLimitDate(rs.getTimestamp("PRE_LIMIT_DATE"));           wfProcInstance.setPriority(rs.getString("PRIORITY"));           wfProcInstance.setProcessXml(rs.getClob("PROCESS_XML"));           wfProcInstance.setProcId(rs.getString("PROC_ID"));           wfProcInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcInstance.setRealtimeFlag(rs.getString("REALTIME_FLAG"));           wfProcInstance.setRequireDate(rs.getTimestamp("REQUIRE_DATE"));           wfProcInstance.setState(rs.getString("STATE"));           wfProcInstance.setSubareaNo(rs.getString("SUBAREA_NO"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProcInstance;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTIVE_DATE,AREA_ID,AREA_TYPE,CANC_TYPE,CHANGE_DATE,CREATE_DATE,EXT_SYSTEM_ID,EXT_WORK_ID,FINISH_DATE,LIMIT_DATE,OLD_STATE,PRECONTRACT_DATE,PRE_LIMIT_DATE,PRIORITY,PROCESS_XML,PROC_ID,PROC_INST_ID,REALTIME_FLAG,REQUIRE_DATE,STATE,SUBAREA_NO FROM WF_PROC_INSTANCE WHERE 1=1 ");     try {if (wfProcInstance.getFlagActiveDate() == 1) {      if (wfProcInstance.getActiveDate() == null) {             sql.append(" and ACTIVE_DATE is null ");          }      else{             sql.append(" and ACTIVE_DATE=:activeDate");             sql.setTimestamp("activeDate", wfProcInstance.getActiveDate());          }   } if (wfProcInstance.getFlagAreaId() == 1) {      if (StringUtil.isBlank(wfProcInstance.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setString("areaId", wfProcInstance.getAreaId());          }   } if (wfProcInstance.getFlagAreaType() == 1) {      if (StringUtil.isBlank(wfProcInstance.getAreaType())) {             sql.append(" and AREA_TYPE is null ");          }      else{             sql.append(" and AREA_TYPE=:areaType");             sql.setString("areaType", wfProcInstance.getAreaType());          }   } if (wfProcInstance.getFlagCancType() == 1) {      if (StringUtil.isBlank(wfProcInstance.getCancType())) {             sql.append(" and CANC_TYPE is null ");          }      else{             sql.append(" and CANC_TYPE=:cancType");             sql.setLong("cancType", wfProcInstance.getCancType());          }   } if (wfProcInstance.getFlagChangeDate() == 1) {      if (wfProcInstance.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfProcInstance.getChangeDate());          }   } if (wfProcInstance.getFlagCreateDate() == 1) {      if (wfProcInstance.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfProcInstance.getCreateDate());          }   } if (wfProcInstance.getFlagExtSystemId() == 1) {      if (StringUtil.isBlank(wfProcInstance.getExtSystemId())) {             sql.append(" and EXT_SYSTEM_ID is null ");          }      else{             sql.append(" and EXT_SYSTEM_ID=:extSystemId");             sql.setString("extSystemId", wfProcInstance.getExtSystemId());          }   } if (wfProcInstance.getFlagExtWorkId() == 1) {      if (StringUtil.isBlank(wfProcInstance.getExtWorkId())) {             sql.append(" and EXT_WORK_ID is null ");          }      else{             sql.append(" and EXT_WORK_ID=:extWorkId");             sql.setString("extWorkId", wfProcInstance.getExtWorkId());          }   } if (wfProcInstance.getFlagFinishDate() == 1) {      if (wfProcInstance.getFinishDate() == null) {             sql.append(" and FINISH_DATE is null ");          }      else{             sql.append(" and FINISH_DATE=:finishDate");             sql.setTimestamp("finishDate", wfProcInstance.getFinishDate());          }   } if (wfProcInstance.getFlagLimitDate() == 1) {      if (wfProcInstance.getLimitDate() == null) {             sql.append(" and LIMIT_DATE is null ");          }      else{             sql.append(" and LIMIT_DATE=:limitDate");             sql.setTimestamp("limitDate", wfProcInstance.getLimitDate());          }   } if (wfProcInstance.getFlagOldState() == 1) {      if (StringUtil.isBlank(wfProcInstance.getOldState())) {             sql.append(" and OLD_STATE is null ");          }      else{             sql.append(" and OLD_STATE=:oldState");             sql.setString("oldState", wfProcInstance.getOldState());          }   } if (wfProcInstance.getFlagPrecontractDate() == 1) {      if (wfProcInstance.getPrecontractDate() == null) {             sql.append(" and PRECONTRACT_DATE is null ");          }      else{             sql.append(" and PRECONTRACT_DATE=:precontractDate");             sql.setTimestamp("precontractDate", wfProcInstance.getPrecontractDate());          }   } if (wfProcInstance.getFlagPreLimitDate() == 1) {      if (wfProcInstance.getPreLimitDate() == null) {             sql.append(" and PRE_LIMIT_DATE is null ");          }      else{             sql.append(" and PRE_LIMIT_DATE=:preLimitDate");             sql.setTimestamp("preLimitDate", wfProcInstance.getPreLimitDate());          }   } if (wfProcInstance.getFlagPriority() == 1) {      if (StringUtil.isBlank(wfProcInstance.getPriority())) {             sql.append(" and PRIORITY is null ");          }      else{             sql.append(" and PRIORITY=:priority");             sql.setLong("priority", wfProcInstance.getPriority());          }   } if (wfProcInstance.getFlagProcessXml() == 1) {      if (wfProcInstance.getProcessXml() == null) {             sql.append(" and PROCESS_XML is null ");          }      else{             sql.append(" and PROCESS_XML=:processXml");             sql.setClob("processXml", wfProcInstance.getProcessXml());          }   } if (wfProcInstance.getFlagProcId() == 1) {      if (StringUtil.isBlank(wfProcInstance.getProcId())) {             sql.append(" and PROC_ID is null ");          }      else{             sql.append(" and PROC_ID=:procId");             sql.setLong("procId", wfProcInstance.getProcId());          }   } if (wfProcInstance.getFlagProcInstId() == 1) {      if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {             sql.append(" and PROC_INST_ID is null ");          }      else{             sql.append(" and PROC_INST_ID=:procInstId");             sql.setLong("procInstId", wfProcInstance.getProcInstId());          }   } if (wfProcInstance.getFlagRealtimeFlag() == 1) {      if (StringUtil.isBlank(wfProcInstance.getRealtimeFlag())) {             sql.append(" and REALTIME_FLAG is null ");          }      else{             sql.append(" and REALTIME_FLAG=:realtimeFlag");             sql.setLong("realtimeFlag", wfProcInstance.getRealtimeFlag());          }   } if (wfProcInstance.getFlagRequireDate() == 1) {      if (wfProcInstance.getRequireDate() == null) {             sql.append(" and REQUIRE_DATE is null ");          }      else{             sql.append(" and REQUIRE_DATE=:requireDate");             sql.setTimestamp("requireDate", wfProcInstance.getRequireDate());          }   } if (wfProcInstance.getFlagState() == 1) {      if (StringUtil.isBlank(wfProcInstance.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfProcInstance.getState());          }   } if (wfProcInstance.getFlagSubareaNo() == 1) {      if (StringUtil.isBlank(wfProcInstance.getSubareaNo())) {             sql.append(" and SUBAREA_NO is null ");          }      else{             sql.append(" and SUBAREA_NO=:subareaNo");             sql.setLong("subareaNo", wfProcInstance.getSubareaNo());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProcInstance = new WfProcInstanceSVO();           wfProcInstance.setActiveDate(rs.getTimestamp("ACTIVE_DATE"));           wfProcInstance.setAreaId(rs.getString("AREA_ID"));           wfProcInstance.setAreaType(rs.getString("AREA_TYPE"));           wfProcInstance.setCancType(rs.getString("CANC_TYPE"));           wfProcInstance.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcInstance.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcInstance.setExtSystemId(rs.getString("EXT_SYSTEM_ID"));           wfProcInstance.setExtWorkId(rs.getString("EXT_WORK_ID"));           wfProcInstance.setFinishDate(rs.getTimestamp("FINISH_DATE"));           wfProcInstance.setLimitDate(rs.getTimestamp("LIMIT_DATE"));           wfProcInstance.setOldState(rs.getString("OLD_STATE"));           wfProcInstance.setPrecontractDate(rs.getTimestamp("PRECONTRACT_DATE"));           wfProcInstance.setPreLimitDate(rs.getTimestamp("PRE_LIMIT_DATE"));           wfProcInstance.setPriority(rs.getString("PRIORITY"));           wfProcInstance.setProcessXml(rs.getClob("PROCESS_XML"));           wfProcInstance.setProcId(rs.getString("PROC_ID"));           wfProcInstance.setProcInstId(rs.getString("PROC_INST_ID"));           wfProcInstance.setRealtimeFlag(rs.getString("REALTIME_FLAG"));           wfProcInstance.setRequireDate(rs.getTimestamp("REQUIRE_DATE"));           wfProcInstance.setState(rs.getString("STATE"));           wfProcInstance.setSubareaNo(rs.getString("SUBAREA_NO"));               res.add(wfProcInstance);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;    if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC_INSTANCE SET ");     try {if (wfProcInstance.getFlagActiveDate() == 1) {sql.append("ACTIVE_DATE=:activeDate,"); sql.setTimestamp("activeDate", wfProcInstance.getActiveDate()); } if (wfProcInstance.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,"); sql.setString("areaId", wfProcInstance.getAreaId()); } if (wfProcInstance.getFlagAreaType() == 1) {sql.append("AREA_TYPE=:areaType,"); sql.setString("areaType", wfProcInstance.getAreaType()); } if (wfProcInstance.getFlagCancType() == 1) {sql.append("CANC_TYPE=:cancType,");sql.setLong("cancType", wfProcInstance.getCancType()); } if (wfProcInstance.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfProcInstance.getChangeDate()); } if (wfProcInstance.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfProcInstance.getCreateDate()); } if (wfProcInstance.getFlagExtSystemId() == 1) {sql.append("EXT_SYSTEM_ID=:extSystemId,"); sql.setString("extSystemId", wfProcInstance.getExtSystemId()); } if (wfProcInstance.getFlagExtWorkId() == 1) {sql.append("EXT_WORK_ID=:extWorkId,"); sql.setString("extWorkId", wfProcInstance.getExtWorkId()); } if (wfProcInstance.getFlagFinishDate() == 1) {sql.append("FINISH_DATE=:finishDate,"); sql.setTimestamp("finishDate", wfProcInstance.getFinishDate()); } if (wfProcInstance.getFlagLimitDate() == 1) {sql.append("LIMIT_DATE=:limitDate,"); sql.setTimestamp("limitDate", wfProcInstance.getLimitDate()); } if (wfProcInstance.getFlagOldState() == 1) {sql.append("OLD_STATE=:oldState,"); sql.setString("oldState", wfProcInstance.getOldState()); } if (wfProcInstance.getFlagPrecontractDate() == 1) {sql.append("PRECONTRACT_DATE=:precontractDate,"); sql.setTimestamp("precontractDate", wfProcInstance.getPrecontractDate()); } if (wfProcInstance.getFlagPreLimitDate() == 1) {sql.append("PRE_LIMIT_DATE=:preLimitDate,"); sql.setTimestamp("preLimitDate", wfProcInstance.getPreLimitDate()); } if (wfProcInstance.getFlagPriority() == 1) {sql.append("PRIORITY=:priority,");sql.setLong("priority", wfProcInstance.getPriority()); } if (wfProcInstance.getFlagProcessXml() == 1) {sql.append("PROCESS_XML=:processXml,"); sql.setClob("processXml", wfProcInstance.getProcessXml()); } if (wfProcInstance.getFlagProcId() == 1) {sql.append("PROC_ID=:procId,");sql.setLong("procId", wfProcInstance.getProcId()); } if (wfProcInstance.getFlagRealtimeFlag() == 1) {sql.append("REALTIME_FLAG=:realtimeFlag,");sql.setLong("realtimeFlag", wfProcInstance.getRealtimeFlag()); } if (wfProcInstance.getFlagRequireDate() == 1) {sql.append("REQUIRE_DATE=:requireDate,"); sql.setTimestamp("requireDate", wfProcInstance.getRequireDate()); } if (wfProcInstance.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfProcInstance.getState()); } if (wfProcInstance.getFlagSubareaNo() == 1) {sql.append("SUBAREA_NO=:subareaNo,");sql.setLong("subareaNo", wfProcInstance.getSubareaNo()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and PROC_INST_ID=:procInstId");sql.setLong("procInstId", wfProcInstance.getProcInstId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_INSTANCE(ACTIVE_DATE,AREA_ID,AREA_TYPE,CANC_TYPE,CHANGE_DATE,CREATE_DATE,EXT_SYSTEM_ID,EXT_WORK_ID,FINISH_DATE,LIMIT_DATE,OLD_STATE,PRECONTRACT_DATE,PRE_LIMIT_DATE,PRIORITY,PROCESS_XML,PROC_ID,PROC_INST_ID,REALTIME_FLAG,REQUIRE_DATE,STATE,SUBAREA_NO)");sql.append(" VALUES (:activeDate,:areaId,:areaType,:cancType,:changeDate,:createDate,:extSystemId,:extWorkId,:finishDate,:limitDate,:oldState,:precontractDate,:preLimitDate,:priority,:processXml,:procId,:procInstId,:realtimeFlag,:requireDate,:state,:subareaNo)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) list.get(i);         if (wfProcInstance== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (wfProcInstance.getActiveDate() == null) {      sql.setNullDate("activeDate");     } else {    sql.setTimestamp("activeDate", wfProcInstance.getActiveDate());    }       if (StringUtil.isBlank(wfProcInstance.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfProcInstance.getAreaId());    }       if (StringUtil.isBlank(wfProcInstance.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfProcInstance.getAreaType());    }       if (StringUtil.isBlank(wfProcInstance.getCancType())) {      sql.setNullLong("cancType");     } else {    sql.setLong("cancType", wfProcInstance.getCancType());    }    if (wfProcInstance.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcInstance.getChangeDate());    }    if (wfProcInstance.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcInstance.getCreateDate());    }       if (StringUtil.isBlank(wfProcInstance.getExtSystemId())) {      sql.setNullString("extSystemId");     } else {    sql.setString("extSystemId", wfProcInstance.getExtSystemId());    }       if (StringUtil.isBlank(wfProcInstance.getExtWorkId())) {      sql.setNullString("extWorkId");     } else {    sql.setString("extWorkId", wfProcInstance.getExtWorkId());    }    if (wfProcInstance.getFinishDate() == null) {      sql.setNullDate("finishDate");     } else {    sql.setTimestamp("finishDate", wfProcInstance.getFinishDate());    }    if (wfProcInstance.getLimitDate() == null) {      sql.setNullDate("limitDate");     } else {    sql.setTimestamp("limitDate", wfProcInstance.getLimitDate());    }       if (StringUtil.isBlank(wfProcInstance.getOldState())) {      sql.setNullString("oldState");     } else {    sql.setString("oldState", wfProcInstance.getOldState());    }    if (wfProcInstance.getPrecontractDate() == null) {      sql.setNullDate("precontractDate");     } else {    sql.setTimestamp("precontractDate", wfProcInstance.getPrecontractDate());    }    if (wfProcInstance.getPreLimitDate() == null) {      sql.setNullDate("preLimitDate");     } else {    sql.setTimestamp("preLimitDate", wfProcInstance.getPreLimitDate());    }       if (StringUtil.isBlank(wfProcInstance.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", wfProcInstance.getPriority());    }       if (wfProcInstance.getProcessXml() == null) {      sql.setNullClob("processXml");     } else {    sql.setClob("processXml", wfProcInstance.getProcessXml());    }       if (StringUtil.isBlank(wfProcInstance.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcInstance.getProcId());    }       if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", wfProcInstance.getProcInstId());    }       if (StringUtil.isBlank(wfProcInstance.getRealtimeFlag())) {      sql.setNullLong("realtimeFlag");     } else {    sql.setLong("realtimeFlag", wfProcInstance.getRealtimeFlag());    }    if (wfProcInstance.getRequireDate() == null) {      sql.setNullDate("requireDate");     } else {    sql.setTimestamp("requireDate", wfProcInstance.getRequireDate());    }       if (StringUtil.isBlank(wfProcInstance.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcInstance.getState());    }       if (StringUtil.isBlank(wfProcInstance.getSubareaNo())) {      sql.setNullLong("subareaNo");     } else {    sql.setLong("subareaNo", wfProcInstance.getSubareaNo());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;    if (StringUtil.isBlank(wfProcInstance.getProcInstId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC_INSTANCE WHERE 1=1  ");sql.append(" and PROC_INST_ID=:procInstId");sql.setLong("procInstId", wfProcInstance.getProcInstId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcInstanceSVO wfProcInstance=(WfProcInstanceSVO) vo;       }}
