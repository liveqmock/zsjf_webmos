package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcNodeInstLimitSDAO;import com.cattsoft.wm.vo.WfProcNodeInstLimitSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcNodeInstLimitSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcNodeInstLimitSDAOImpl implements IWfProcNodeInstLimitSDAO{    private static Logger log = Logger.getLogger(WfProcNodeInstLimitSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE_INST_LIMIT(BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,HASTEN_VALUE,METRIC_UNIT,METRIC_VALUE,NODE_NAV_INSTANCE_ID,PRE_VALUE,REMARK,STATE,WF_PROC_NODE_INST_LIMIT_ID)");sql.append(" VALUES (:beginState,:changeDate,:changeStaffId,:createDate,:createStaffId,:expressId,:hastenValue,:metricUnit,:metricValue,:nodeNavInstanceId,:preValue,:remark,:state,:wfProcNodeInstLimitId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfProcNodeInstLimit.getBeginState())) {      sql.setNullString("beginState");     } else {    sql.setString("beginState", wfProcNodeInstLimit.getBeginState());    }    if (wfProcNodeInstLimit.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcNodeInstLimit.getChangeDate());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfProcNodeInstLimit.getChangeStaffId());    }    if (wfProcNodeInstLimit.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcNodeInstLimit.getCreateDate());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProcNodeInstLimit.getCreateStaffId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfProcNodeInstLimit.getExpressId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getHastenValue())) {      sql.setNullLong("hastenValue");     } else {    sql.setLong("hastenValue", wfProcNodeInstLimit.getHastenValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", wfProcNodeInstLimit.getMetricUnit());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", wfProcNodeInstLimit.getMetricValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfProcNodeInstLimit.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", wfProcNodeInstLimit.getPreValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNodeInstLimit.getRemark());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcNodeInstLimit.getState());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {      sql.setNullLong("wfProcNodeInstLimitId");     } else {    sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,HASTEN_VALUE,METRIC_UNIT,METRIC_VALUE,NODE_NAV_INSTANCE_ID,PRE_VALUE,REMARK,STATE,WF_PROC_NODE_INST_LIMIT_ID FROM WF_PROC_NODE_INST_LIMIT WHERE 1=1  ");sql.append(" and WF_PROC_NODE_INST_LIMIT_ID=:wfProcNodeInstLimitId");sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProcNodeInstLimit =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProcNodeInstLimit = new WfProcNodeInstLimitSVO();           wfProcNodeInstLimit.setBeginState(rs.getString("BEGIN_STATE"));           wfProcNodeInstLimit.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcNodeInstLimit.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfProcNodeInstLimit.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcNodeInstLimit.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProcNodeInstLimit.setExpressId(rs.getString("EXPRESS_ID"));           wfProcNodeInstLimit.setHastenValue(rs.getString("HASTEN_VALUE"));           wfProcNodeInstLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           wfProcNodeInstLimit.setMetricValue(rs.getString("METRIC_VALUE"));           wfProcNodeInstLimit.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfProcNodeInstLimit.setPreValue(rs.getString("PRE_VALUE"));           wfProcNodeInstLimit.setRemark(rs.getString("REMARK"));           wfProcNodeInstLimit.setState(rs.getString("STATE"));           wfProcNodeInstLimit.setWfProcNodeInstLimitId(rs.getString("WF_PROC_NODE_INST_LIMIT_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProcNodeInstLimit;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,HASTEN_VALUE,METRIC_UNIT,METRIC_VALUE,NODE_NAV_INSTANCE_ID,PRE_VALUE,REMARK,STATE,WF_PROC_NODE_INST_LIMIT_ID FROM WF_PROC_NODE_INST_LIMIT WHERE 1=1 ");     try {if (wfProcNodeInstLimit.getFlagBeginState() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getBeginState())) {             sql.append(" and BEGIN_STATE is null ");          }      else{             sql.append(" and BEGIN_STATE=:beginState");             sql.setString("beginState", wfProcNodeInstLimit.getBeginState());          }   } if (wfProcNodeInstLimit.getFlagChangeDate() == 1) {      if (wfProcNodeInstLimit.getChangeDate() == null) {             sql.append(" and CHANGE_DATE is null ");          }      else{             sql.append(" and CHANGE_DATE=:changeDate");             sql.setTimestamp("changeDate", wfProcNodeInstLimit.getChangeDate());          }   } if (wfProcNodeInstLimit.getFlagChangeStaffId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getChangeStaffId())) {             sql.append(" and CHANGE_STAFF_ID is null ");          }      else{             sql.append(" and CHANGE_STAFF_ID=:changeStaffId");             sql.setLong("changeStaffId", wfProcNodeInstLimit.getChangeStaffId());          }   } if (wfProcNodeInstLimit.getFlagCreateDate() == 1) {      if (wfProcNodeInstLimit.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfProcNodeInstLimit.getCreateDate());          }   } if (wfProcNodeInstLimit.getFlagCreateStaffId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getCreateStaffId())) {             sql.append(" and CREATE_STAFF_ID is null ");          }      else{             sql.append(" and CREATE_STAFF_ID=:createStaffId");             sql.setLong("createStaffId", wfProcNodeInstLimit.getCreateStaffId());          }   } if (wfProcNodeInstLimit.getFlagExpressId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getExpressId())) {             sql.append(" and EXPRESS_ID is null ");          }      else{             sql.append(" and EXPRESS_ID=:expressId");             sql.setLong("expressId", wfProcNodeInstLimit.getExpressId());          }   } if (wfProcNodeInstLimit.getFlagHastenValue() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getHastenValue())) {             sql.append(" and HASTEN_VALUE is null ");          }      else{             sql.append(" and HASTEN_VALUE=:hastenValue");             sql.setLong("hastenValue", wfProcNodeInstLimit.getHastenValue());          }   } if (wfProcNodeInstLimit.getFlagMetricUnit() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricUnit())) {             sql.append(" and METRIC_UNIT is null ");          }      else{             sql.append(" and METRIC_UNIT=:metricUnit");             sql.setLong("metricUnit", wfProcNodeInstLimit.getMetricUnit());          }   } if (wfProcNodeInstLimit.getFlagMetricValue() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricValue())) {             sql.append(" and METRIC_VALUE is null ");          }      else{             sql.append(" and METRIC_VALUE=:metricValue");             sql.setLong("metricValue", wfProcNodeInstLimit.getMetricValue());          }   } if (wfProcNodeInstLimit.getFlagNodeNavInstanceId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getNodeNavInstanceId())) {             sql.append(" and NODE_NAV_INSTANCE_ID is null ");          }      else{             sql.append(" and NODE_NAV_INSTANCE_ID=:nodeNavInstanceId");             sql.setLong("nodeNavInstanceId", wfProcNodeInstLimit.getNodeNavInstanceId());          }   } if (wfProcNodeInstLimit.getFlagPreValue() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getPreValue())) {             sql.append(" and PRE_VALUE is null ");          }      else{             sql.append(" and PRE_VALUE=:preValue");             sql.setLong("preValue", wfProcNodeInstLimit.getPreValue());          }   } if (wfProcNodeInstLimit.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfProcNodeInstLimit.getRemark());          }   } if (wfProcNodeInstLimit.getFlagState() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfProcNodeInstLimit.getState());          }   } if (wfProcNodeInstLimit.getFlagWfProcNodeInstLimitId() == 1) {      if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {             sql.append(" and WF_PROC_NODE_INST_LIMIT_ID is null ");          }      else{             sql.append(" and WF_PROC_NODE_INST_LIMIT_ID=:wfProcNodeInstLimitId");             sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProcNodeInstLimit = new WfProcNodeInstLimitSVO();           wfProcNodeInstLimit.setBeginState(rs.getString("BEGIN_STATE"));           wfProcNodeInstLimit.setChangeDate(rs.getTimestamp("CHANGE_DATE"));           wfProcNodeInstLimit.setChangeStaffId(rs.getString("CHANGE_STAFF_ID"));           wfProcNodeInstLimit.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProcNodeInstLimit.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProcNodeInstLimit.setExpressId(rs.getString("EXPRESS_ID"));           wfProcNodeInstLimit.setHastenValue(rs.getString("HASTEN_VALUE"));           wfProcNodeInstLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           wfProcNodeInstLimit.setMetricValue(rs.getString("METRIC_VALUE"));           wfProcNodeInstLimit.setNodeNavInstanceId(rs.getString("NODE_NAV_INSTANCE_ID"));           wfProcNodeInstLimit.setPreValue(rs.getString("PRE_VALUE"));           wfProcNodeInstLimit.setRemark(rs.getString("REMARK"));           wfProcNodeInstLimit.setState(rs.getString("STATE"));           wfProcNodeInstLimit.setWfProcNodeInstLimitId(rs.getString("WF_PROC_NODE_INST_LIMIT_ID"));               res.add(wfProcNodeInstLimit);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC_NODE_INST_LIMIT SET ");     try {if (wfProcNodeInstLimit.getFlagBeginState() == 1) {sql.append("BEGIN_STATE=:beginState,"); sql.setString("beginState", wfProcNodeInstLimit.getBeginState()); } if (wfProcNodeInstLimit.getFlagChangeDate() == 1) {sql.append("CHANGE_DATE=:changeDate,"); sql.setTimestamp("changeDate", wfProcNodeInstLimit.getChangeDate()); } if (wfProcNodeInstLimit.getFlagChangeStaffId() == 1) {sql.append("CHANGE_STAFF_ID=:changeStaffId,");sql.setLong("changeStaffId", wfProcNodeInstLimit.getChangeStaffId()); } if (wfProcNodeInstLimit.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfProcNodeInstLimit.getCreateDate()); } if (wfProcNodeInstLimit.getFlagCreateStaffId() == 1) {sql.append("CREATE_STAFF_ID=:createStaffId,");sql.setLong("createStaffId", wfProcNodeInstLimit.getCreateStaffId()); } if (wfProcNodeInstLimit.getFlagExpressId() == 1) {sql.append("EXPRESS_ID=:expressId,");sql.setLong("expressId", wfProcNodeInstLimit.getExpressId()); } if (wfProcNodeInstLimit.getFlagHastenValue() == 1) {sql.append("HASTEN_VALUE=:hastenValue,");sql.setLong("hastenValue", wfProcNodeInstLimit.getHastenValue()); } if (wfProcNodeInstLimit.getFlagMetricUnit() == 1) {sql.append("METRIC_UNIT=:metricUnit,");sql.setLong("metricUnit", wfProcNodeInstLimit.getMetricUnit()); } if (wfProcNodeInstLimit.getFlagMetricValue() == 1) {sql.append("METRIC_VALUE=:metricValue,");sql.setLong("metricValue", wfProcNodeInstLimit.getMetricValue()); } if (wfProcNodeInstLimit.getFlagNodeNavInstanceId() == 1) {sql.append("NODE_NAV_INSTANCE_ID=:nodeNavInstanceId,");sql.setLong("nodeNavInstanceId", wfProcNodeInstLimit.getNodeNavInstanceId()); } if (wfProcNodeInstLimit.getFlagPreValue() == 1) {sql.append("PRE_VALUE=:preValue,");sql.setLong("preValue", wfProcNodeInstLimit.getPreValue()); } if (wfProcNodeInstLimit.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfProcNodeInstLimit.getRemark()); } if (wfProcNodeInstLimit.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfProcNodeInstLimit.getState()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and WF_PROC_NODE_INST_LIMIT_ID=:wfProcNodeInstLimitId");sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE_INST_LIMIT(BEGIN_STATE,CHANGE_DATE,CHANGE_STAFF_ID,CREATE_DATE,CREATE_STAFF_ID,EXPRESS_ID,HASTEN_VALUE,METRIC_UNIT,METRIC_VALUE,NODE_NAV_INSTANCE_ID,PRE_VALUE,REMARK,STATE,WF_PROC_NODE_INST_LIMIT_ID)");sql.append(" VALUES (:beginState,:changeDate,:changeStaffId,:createDate,:createStaffId,:expressId,:hastenValue,:metricUnit,:metricValue,:nodeNavInstanceId,:preValue,:remark,:state,:wfProcNodeInstLimitId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) list.get(i);         if (wfProcNodeInstLimit== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfProcNodeInstLimit.getBeginState())) {      sql.setNullString("beginState");     } else {    sql.setString("beginState", wfProcNodeInstLimit.getBeginState());    }    if (wfProcNodeInstLimit.getChangeDate() == null) {      sql.setNullDate("changeDate");     } else {    sql.setTimestamp("changeDate", wfProcNodeInstLimit.getChangeDate());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getChangeStaffId())) {      sql.setNullLong("changeStaffId");     } else {    sql.setLong("changeStaffId", wfProcNodeInstLimit.getChangeStaffId());    }    if (wfProcNodeInstLimit.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProcNodeInstLimit.getCreateDate());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProcNodeInstLimit.getCreateStaffId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getExpressId())) {      sql.setNullLong("expressId");     } else {    sql.setLong("expressId", wfProcNodeInstLimit.getExpressId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getHastenValue())) {      sql.setNullLong("hastenValue");     } else {    sql.setLong("hastenValue", wfProcNodeInstLimit.getHastenValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", wfProcNodeInstLimit.getMetricUnit());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", wfProcNodeInstLimit.getMetricValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getNodeNavInstanceId())) {      sql.setNullLong("nodeNavInstanceId");     } else {    sql.setLong("nodeNavInstanceId", wfProcNodeInstLimit.getNodeNavInstanceId());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", wfProcNodeInstLimit.getPreValue());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNodeInstLimit.getRemark());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProcNodeInstLimit.getState());    }       if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {      sql.setNullLong("wfProcNodeInstLimitId");     } else {    sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;    if (StringUtil.isBlank(wfProcNodeInstLimit.getWfProcNodeInstLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC_NODE_INST_LIMIT WHERE 1=1  ");sql.append(" and WF_PROC_NODE_INST_LIMIT_ID=:wfProcNodeInstLimitId");sql.setLong("wfProcNodeInstLimitId", wfProcNodeInstLimit.getWfProcNodeInstLimitId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcNodeInstLimitSVO wfProcNodeInstLimit=(WfProcNodeInstLimitSVO) vo;       }}
