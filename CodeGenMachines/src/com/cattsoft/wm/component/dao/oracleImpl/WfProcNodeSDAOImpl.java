package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcNodeSDAO;import com.cattsoft.wm.vo.WfProcNodeSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcNodeSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcNodeSDAOImpl implements IWfProcNodeSDAO{    private static Logger log = Logger.getLogger(WfProcNodeSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;    if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE(CASE_VALUE,CONNECT_TYPE,EXPRESS_PARAM,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_TYPE,OBJ_ID,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_NODE_ID,REMARK,UP_PROC_NODE_ID,WF_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:caseValue,:connectType,:expressParam,:isNeed,:nextProcNodeId,:nodeDesc,:nodeType,:objId,:paramType,:parentProcNodeId,:procId,:procNodeId,:remark,:upProcNodeId,:wfProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfProcNode.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfProcNode.getCaseValue());    }       if (StringUtil.isBlank(wfProcNode.getConnectType())) {      sql.setNullString("connectType");     } else {    sql.setString("connectType", wfProcNode.getConnectType());    }       if (StringUtil.isBlank(wfProcNode.getExpressParam())) {      sql.setNullLong("expressParam");     } else {    sql.setLong("expressParam", wfProcNode.getExpressParam());    }       if (StringUtil.isBlank(wfProcNode.getIsNeed())) {      sql.setNullString("isNeed");     } else {    sql.setString("isNeed", wfProcNode.getIsNeed());    }       if (StringUtil.isBlank(wfProcNode.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfProcNode.getNextProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getNodeDesc())) {      sql.setNullString("nodeDesc");     } else {    sql.setString("nodeDesc", wfProcNode.getNodeDesc());    }       if (StringUtil.isBlank(wfProcNode.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfProcNode.getNodeType());    }       if (StringUtil.isBlank(wfProcNode.getObjId())) {      sql.setNullLong("objId");     } else {    sql.setLong("objId", wfProcNode.getObjId());    }       if (StringUtil.isBlank(wfProcNode.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfProcNode.getParamType());    }       if (StringUtil.isBlank(wfProcNode.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfProcNode.getParentProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcNode.getProcId());    }       if (StringUtil.isBlank(wfProcNode.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfProcNode.getProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNode.getRemark());    }       if (StringUtil.isBlank(wfProcNode.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfProcNode.getUpProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {      sql.setNullLong("wfProcNodeId");     } else {    sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfProcNode.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;    if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CASE_VALUE,CONNECT_TYPE,EXPRESS_PARAM,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_TYPE,OBJ_ID,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_NODE_ID,REMARK,UP_PROC_NODE_ID,WF_PROC_NODE_ID,XML_NODE_ID FROM WF_PROC_NODE WHERE 1=1  ");sql.append(" and WF_PROC_NODE_ID=:wfProcNodeId");sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProcNode =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProcNode = new WfProcNodeSVO();           wfProcNode.setCaseValue(rs.getString("CASE_VALUE"));           wfProcNode.setConnectType(rs.getString("CONNECT_TYPE"));           wfProcNode.setExpressParam(rs.getString("EXPRESS_PARAM"));           wfProcNode.setIsNeed(rs.getString("IS_NEED"));           wfProcNode.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfProcNode.setNodeDesc(rs.getString("NODE_DESC"));           wfProcNode.setNodeType(rs.getString("NODE_TYPE"));           wfProcNode.setObjId(rs.getString("OBJ_ID"));           wfProcNode.setParamType(rs.getString("PARAM_TYPE"));           wfProcNode.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfProcNode.setProcId(rs.getString("PROC_ID"));           wfProcNode.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfProcNode.setRemark(rs.getString("REMARK"));           wfProcNode.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfProcNode.setWfProcNodeId(rs.getString("WF_PROC_NODE_ID"));           wfProcNode.setXmlNodeId(rs.getString("XML_NODE_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProcNode;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CASE_VALUE,CONNECT_TYPE,EXPRESS_PARAM,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_TYPE,OBJ_ID,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_NODE_ID,REMARK,UP_PROC_NODE_ID,WF_PROC_NODE_ID,XML_NODE_ID FROM WF_PROC_NODE WHERE 1=1 ");     try {if (wfProcNode.getFlagCaseValue() == 1) {      if (StringUtil.isBlank(wfProcNode.getCaseValue())) {             sql.append(" and CASE_VALUE is null ");          }      else{             sql.append(" and CASE_VALUE=:caseValue");             sql.setString("caseValue", wfProcNode.getCaseValue());          }   } if (wfProcNode.getFlagConnectType() == 1) {      if (StringUtil.isBlank(wfProcNode.getConnectType())) {             sql.append(" and CONNECT_TYPE is null ");          }      else{             sql.append(" and CONNECT_TYPE=:connectType");             sql.setString("connectType", wfProcNode.getConnectType());          }   } if (wfProcNode.getFlagExpressParam() == 1) {      if (StringUtil.isBlank(wfProcNode.getExpressParam())) {             sql.append(" and EXPRESS_PARAM is null ");          }      else{             sql.append(" and EXPRESS_PARAM=:expressParam");             sql.setLong("expressParam", wfProcNode.getExpressParam());          }   } if (wfProcNode.getFlagIsNeed() == 1) {      if (StringUtil.isBlank(wfProcNode.getIsNeed())) {             sql.append(" and IS_NEED is null ");          }      else{             sql.append(" and IS_NEED=:isNeed");             sql.setString("isNeed", wfProcNode.getIsNeed());          }   } if (wfProcNode.getFlagNextProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getNextProcNodeId())) {             sql.append(" and NEXT_PROC_NODE_ID is null ");          }      else{             sql.append(" and NEXT_PROC_NODE_ID=:nextProcNodeId");             sql.setString("nextProcNodeId", wfProcNode.getNextProcNodeId());          }   } if (wfProcNode.getFlagNodeDesc() == 1) {      if (StringUtil.isBlank(wfProcNode.getNodeDesc())) {             sql.append(" and NODE_DESC is null ");          }      else{             sql.append(" and NODE_DESC=:nodeDesc");             sql.setString("nodeDesc", wfProcNode.getNodeDesc());          }   } if (wfProcNode.getFlagNodeType() == 1) {      if (StringUtil.isBlank(wfProcNode.getNodeType())) {             sql.append(" and NODE_TYPE is null ");          }      else{             sql.append(" and NODE_TYPE=:nodeType");             sql.setString("nodeType", wfProcNode.getNodeType());          }   } if (wfProcNode.getFlagObjId() == 1) {      if (StringUtil.isBlank(wfProcNode.getObjId())) {             sql.append(" and OBJ_ID is null ");          }      else{             sql.append(" and OBJ_ID=:objId");             sql.setLong("objId", wfProcNode.getObjId());          }   } if (wfProcNode.getFlagParamType() == 1) {      if (StringUtil.isBlank(wfProcNode.getParamType())) {             sql.append(" and PARAM_TYPE is null ");          }      else{             sql.append(" and PARAM_TYPE=:paramType");             sql.setLong("paramType", wfProcNode.getParamType());          }   } if (wfProcNode.getFlagParentProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getParentProcNodeId())) {             sql.append(" and PARENT_PROC_NODE_ID is null ");          }      else{             sql.append(" and PARENT_PROC_NODE_ID=:parentProcNodeId");             sql.setString("parentProcNodeId", wfProcNode.getParentProcNodeId());          }   } if (wfProcNode.getFlagProcId() == 1) {      if (StringUtil.isBlank(wfProcNode.getProcId())) {             sql.append(" and PROC_ID is null ");          }      else{             sql.append(" and PROC_ID=:procId");             sql.setLong("procId", wfProcNode.getProcId());          }   } if (wfProcNode.getFlagProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getProcNodeId())) {             sql.append(" and PROC_NODE_ID is null ");          }      else{             sql.append(" and PROC_NODE_ID=:procNodeId");             sql.setString("procNodeId", wfProcNode.getProcNodeId());          }   } if (wfProcNode.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfProcNode.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfProcNode.getRemark());          }   } if (wfProcNode.getFlagUpProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getUpProcNodeId())) {             sql.append(" and UP_PROC_NODE_ID is null ");          }      else{             sql.append(" and UP_PROC_NODE_ID=:upProcNodeId");             sql.setString("upProcNodeId", wfProcNode.getUpProcNodeId());          }   } if (wfProcNode.getFlagWfProcNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {             sql.append(" and WF_PROC_NODE_ID is null ");          }      else{             sql.append(" and WF_PROC_NODE_ID=:wfProcNodeId");             sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());          }   } if (wfProcNode.getFlagXmlNodeId() == 1) {      if (StringUtil.isBlank(wfProcNode.getXmlNodeId())) {             sql.append(" and XML_NODE_ID is null ");          }      else{             sql.append(" and XML_NODE_ID=:xmlNodeId");             sql.setString("xmlNodeId", wfProcNode.getXmlNodeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProcNode = new WfProcNodeSVO();           wfProcNode.setCaseValue(rs.getString("CASE_VALUE"));           wfProcNode.setConnectType(rs.getString("CONNECT_TYPE"));           wfProcNode.setExpressParam(rs.getString("EXPRESS_PARAM"));           wfProcNode.setIsNeed(rs.getString("IS_NEED"));           wfProcNode.setNextProcNodeId(rs.getString("NEXT_PROC_NODE_ID"));           wfProcNode.setNodeDesc(rs.getString("NODE_DESC"));           wfProcNode.setNodeType(rs.getString("NODE_TYPE"));           wfProcNode.setObjId(rs.getString("OBJ_ID"));           wfProcNode.setParamType(rs.getString("PARAM_TYPE"));           wfProcNode.setParentProcNodeId(rs.getString("PARENT_PROC_NODE_ID"));           wfProcNode.setProcId(rs.getString("PROC_ID"));           wfProcNode.setProcNodeId(rs.getString("PROC_NODE_ID"));           wfProcNode.setRemark(rs.getString("REMARK"));           wfProcNode.setUpProcNodeId(rs.getString("UP_PROC_NODE_ID"));           wfProcNode.setWfProcNodeId(rs.getString("WF_PROC_NODE_ID"));           wfProcNode.setXmlNodeId(rs.getString("XML_NODE_ID"));               res.add(wfProcNode);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;    if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC_NODE SET ");     try {if (wfProcNode.getFlagCaseValue() == 1) {sql.append("CASE_VALUE=:caseValue,"); sql.setString("caseValue", wfProcNode.getCaseValue()); } if (wfProcNode.getFlagConnectType() == 1) {sql.append("CONNECT_TYPE=:connectType,"); sql.setString("connectType", wfProcNode.getConnectType()); } if (wfProcNode.getFlagExpressParam() == 1) {sql.append("EXPRESS_PARAM=:expressParam,");sql.setLong("expressParam", wfProcNode.getExpressParam()); } if (wfProcNode.getFlagIsNeed() == 1) {sql.append("IS_NEED=:isNeed,"); sql.setString("isNeed", wfProcNode.getIsNeed()); } if (wfProcNode.getFlagNextProcNodeId() == 1) {sql.append("NEXT_PROC_NODE_ID=:nextProcNodeId,"); sql.setString("nextProcNodeId", wfProcNode.getNextProcNodeId()); } if (wfProcNode.getFlagNodeDesc() == 1) {sql.append("NODE_DESC=:nodeDesc,"); sql.setString("nodeDesc", wfProcNode.getNodeDesc()); } if (wfProcNode.getFlagNodeType() == 1) {sql.append("NODE_TYPE=:nodeType,"); sql.setString("nodeType", wfProcNode.getNodeType()); } if (wfProcNode.getFlagObjId() == 1) {sql.append("OBJ_ID=:objId,");sql.setLong("objId", wfProcNode.getObjId()); } if (wfProcNode.getFlagParamType() == 1) {sql.append("PARAM_TYPE=:paramType,");sql.setLong("paramType", wfProcNode.getParamType()); } if (wfProcNode.getFlagParentProcNodeId() == 1) {sql.append("PARENT_PROC_NODE_ID=:parentProcNodeId,"); sql.setString("parentProcNodeId", wfProcNode.getParentProcNodeId()); } if (wfProcNode.getFlagProcId() == 1) {sql.append("PROC_ID=:procId,");sql.setLong("procId", wfProcNode.getProcId()); } if (wfProcNode.getFlagProcNodeId() == 1) {sql.append("PROC_NODE_ID=:procNodeId,"); sql.setString("procNodeId", wfProcNode.getProcNodeId()); } if (wfProcNode.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfProcNode.getRemark()); } if (wfProcNode.getFlagUpProcNodeId() == 1) {sql.append("UP_PROC_NODE_ID=:upProcNodeId,"); sql.setString("upProcNodeId", wfProcNode.getUpProcNodeId()); } if (wfProcNode.getFlagXmlNodeId() == 1) {sql.append("XML_NODE_ID=:xmlNodeId,"); sql.setString("xmlNodeId", wfProcNode.getXmlNodeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and WF_PROC_NODE_ID=:wfProcNodeId");sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC_NODE(CASE_VALUE,CONNECT_TYPE,EXPRESS_PARAM,IS_NEED,NEXT_PROC_NODE_ID,NODE_DESC,NODE_TYPE,OBJ_ID,PARAM_TYPE,PARENT_PROC_NODE_ID,PROC_ID,PROC_NODE_ID,REMARK,UP_PROC_NODE_ID,WF_PROC_NODE_ID,XML_NODE_ID)");sql.append(" VALUES (:caseValue,:connectType,:expressParam,:isNeed,:nextProcNodeId,:nodeDesc,:nodeType,:objId,:paramType,:parentProcNodeId,:procId,:procNodeId,:remark,:upProcNodeId,:wfProcNodeId,:xmlNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcNodeSVO wfProcNode=(WfProcNodeSVO) list.get(i);         if (wfProcNode== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfProcNode.getCaseValue())) {      sql.setNullString("caseValue");     } else {    sql.setString("caseValue", wfProcNode.getCaseValue());    }       if (StringUtil.isBlank(wfProcNode.getConnectType())) {      sql.setNullString("connectType");     } else {    sql.setString("connectType", wfProcNode.getConnectType());    }       if (StringUtil.isBlank(wfProcNode.getExpressParam())) {      sql.setNullLong("expressParam");     } else {    sql.setLong("expressParam", wfProcNode.getExpressParam());    }       if (StringUtil.isBlank(wfProcNode.getIsNeed())) {      sql.setNullString("isNeed");     } else {    sql.setString("isNeed", wfProcNode.getIsNeed());    }       if (StringUtil.isBlank(wfProcNode.getNextProcNodeId())) {      sql.setNullString("nextProcNodeId");     } else {    sql.setString("nextProcNodeId", wfProcNode.getNextProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getNodeDesc())) {      sql.setNullString("nodeDesc");     } else {    sql.setString("nodeDesc", wfProcNode.getNodeDesc());    }       if (StringUtil.isBlank(wfProcNode.getNodeType())) {      sql.setNullString("nodeType");     } else {    sql.setString("nodeType", wfProcNode.getNodeType());    }       if (StringUtil.isBlank(wfProcNode.getObjId())) {      sql.setNullLong("objId");     } else {    sql.setLong("objId", wfProcNode.getObjId());    }       if (StringUtil.isBlank(wfProcNode.getParamType())) {      sql.setNullLong("paramType");     } else {    sql.setLong("paramType", wfProcNode.getParamType());    }       if (StringUtil.isBlank(wfProcNode.getParentProcNodeId())) {      sql.setNullString("parentProcNodeId");     } else {    sql.setString("parentProcNodeId", wfProcNode.getParentProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProcNode.getProcId());    }       if (StringUtil.isBlank(wfProcNode.getProcNodeId())) {      sql.setNullString("procNodeId");     } else {    sql.setString("procNodeId", wfProcNode.getProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProcNode.getRemark());    }       if (StringUtil.isBlank(wfProcNode.getUpProcNodeId())) {      sql.setNullString("upProcNodeId");     } else {    sql.setString("upProcNodeId", wfProcNode.getUpProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {      sql.setNullLong("wfProcNodeId");     } else {    sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());    }       if (StringUtil.isBlank(wfProcNode.getXmlNodeId())) {      sql.setNullString("xmlNodeId");     } else {    sql.setString("xmlNodeId", wfProcNode.getXmlNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;    if (StringUtil.isBlank(wfProcNode.getWfProcNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC_NODE WHERE 1=1  ");sql.append(" and WF_PROC_NODE_ID=:wfProcNodeId");sql.setLong("wfProcNodeId", wfProcNode.getWfProcNodeId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcNodeSVO wfProcNode=(WfProcNodeSVO) vo;       }}
