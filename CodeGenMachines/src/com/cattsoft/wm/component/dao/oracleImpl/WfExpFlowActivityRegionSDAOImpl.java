package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfExpFlowActivityRegionSDAO;import com.cattsoft.wm.vo.WfExpFlowActivityRegionSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfExpFlowActivityRegionSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfExpFlowActivityRegionSDAOImpl implements IWfExpFlowActivityRegionSDAO{    private static Logger log = Logger.getLogger(WfExpFlowActivityRegionSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;    if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_EXP_FLOW_ACTIVITY_REGION(ACTIVITY_ID,END_ACTIVITY_ID,END_PROC_NODE_ID,EXP_FLOW_ACTIVITY_REGION_ID,EXP_FLOW_ID,START_PROC_NODE_ID)");sql.append(" VALUES (:activityId,:endActivityId,:endProcNodeId,:expFlowActivityRegionId,:expFlowId,:startProcNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfExpFlowActivityRegion.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfExpFlowActivityRegion.getActivityId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndActivityId())) {      sql.setNullLong("endActivityId");     } else {    sql.setLong("endActivityId", wfExpFlowActivityRegion.getEndActivityId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndProcNodeId())) {      sql.setNullString("endProcNodeId");     } else {    sql.setString("endProcNodeId", wfExpFlowActivityRegion.getEndProcNodeId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {      sql.setNullLong("expFlowActivityRegionId");     } else {    sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowId())) {      sql.setNullLong("expFlowId");     } else {    sql.setLong("expFlowId", wfExpFlowActivityRegion.getExpFlowId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getStartProcNodeId())) {      sql.setNullString("startProcNodeId");     } else {    sql.setString("startProcNodeId", wfExpFlowActivityRegion.getStartProcNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;    if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTIVITY_ID,END_ACTIVITY_ID,END_PROC_NODE_ID,EXP_FLOW_ACTIVITY_REGION_ID,EXP_FLOW_ID,START_PROC_NODE_ID FROM WF_EXP_FLOW_ACTIVITY_REGION WHERE 1=1  ");sql.append(" and EXP_FLOW_ACTIVITY_REGION_ID=:expFlowActivityRegionId");sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfExpFlowActivityRegion =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfExpFlowActivityRegion = new WfExpFlowActivityRegionSVO();           wfExpFlowActivityRegion.setActivityId(rs.getString("ACTIVITY_ID"));           wfExpFlowActivityRegion.setEndActivityId(rs.getString("END_ACTIVITY_ID"));           wfExpFlowActivityRegion.setEndProcNodeId(rs.getString("END_PROC_NODE_ID"));           wfExpFlowActivityRegion.setExpFlowActivityRegionId(rs.getString("EXP_FLOW_ACTIVITY_REGION_ID"));           wfExpFlowActivityRegion.setExpFlowId(rs.getString("EXP_FLOW_ID"));           wfExpFlowActivityRegion.setStartProcNodeId(rs.getString("START_PROC_NODE_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfExpFlowActivityRegion;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTIVITY_ID,END_ACTIVITY_ID,END_PROC_NODE_ID,EXP_FLOW_ACTIVITY_REGION_ID,EXP_FLOW_ID,START_PROC_NODE_ID FROM WF_EXP_FLOW_ACTIVITY_REGION WHERE 1=1 ");     try {if (wfExpFlowActivityRegion.getFlagActivityId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getActivityId())) {             sql.append(" and ACTIVITY_ID is null ");          }      else{             sql.append(" and ACTIVITY_ID=:activityId");             sql.setLong("activityId", wfExpFlowActivityRegion.getActivityId());          }   } if (wfExpFlowActivityRegion.getFlagEndActivityId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndActivityId())) {             sql.append(" and END_ACTIVITY_ID is null ");          }      else{             sql.append(" and END_ACTIVITY_ID=:endActivityId");             sql.setLong("endActivityId", wfExpFlowActivityRegion.getEndActivityId());          }   } if (wfExpFlowActivityRegion.getFlagEndProcNodeId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndProcNodeId())) {             sql.append(" and END_PROC_NODE_ID is null ");          }      else{             sql.append(" and END_PROC_NODE_ID=:endProcNodeId");             sql.setString("endProcNodeId", wfExpFlowActivityRegion.getEndProcNodeId());          }   } if (wfExpFlowActivityRegion.getFlagExpFlowActivityRegionId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {             sql.append(" and EXP_FLOW_ACTIVITY_REGION_ID is null ");          }      else{             sql.append(" and EXP_FLOW_ACTIVITY_REGION_ID=:expFlowActivityRegionId");             sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());          }   } if (wfExpFlowActivityRegion.getFlagExpFlowId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowId())) {             sql.append(" and EXP_FLOW_ID is null ");          }      else{             sql.append(" and EXP_FLOW_ID=:expFlowId");             sql.setLong("expFlowId", wfExpFlowActivityRegion.getExpFlowId());          }   } if (wfExpFlowActivityRegion.getFlagStartProcNodeId() == 1) {      if (StringUtil.isBlank(wfExpFlowActivityRegion.getStartProcNodeId())) {             sql.append(" and START_PROC_NODE_ID is null ");          }      else{             sql.append(" and START_PROC_NODE_ID=:startProcNodeId");             sql.setString("startProcNodeId", wfExpFlowActivityRegion.getStartProcNodeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfExpFlowActivityRegion = new WfExpFlowActivityRegionSVO();           wfExpFlowActivityRegion.setActivityId(rs.getString("ACTIVITY_ID"));           wfExpFlowActivityRegion.setEndActivityId(rs.getString("END_ACTIVITY_ID"));           wfExpFlowActivityRegion.setEndProcNodeId(rs.getString("END_PROC_NODE_ID"));           wfExpFlowActivityRegion.setExpFlowActivityRegionId(rs.getString("EXP_FLOW_ACTIVITY_REGION_ID"));           wfExpFlowActivityRegion.setExpFlowId(rs.getString("EXP_FLOW_ID"));           wfExpFlowActivityRegion.setStartProcNodeId(rs.getString("START_PROC_NODE_ID"));               res.add(wfExpFlowActivityRegion);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;    if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_EXP_FLOW_ACTIVITY_REGION SET ");     try {if (wfExpFlowActivityRegion.getFlagActivityId() == 1) {sql.append("ACTIVITY_ID=:activityId,");sql.setLong("activityId", wfExpFlowActivityRegion.getActivityId()); } if (wfExpFlowActivityRegion.getFlagEndActivityId() == 1) {sql.append("END_ACTIVITY_ID=:endActivityId,");sql.setLong("endActivityId", wfExpFlowActivityRegion.getEndActivityId()); } if (wfExpFlowActivityRegion.getFlagEndProcNodeId() == 1) {sql.append("END_PROC_NODE_ID=:endProcNodeId,"); sql.setString("endProcNodeId", wfExpFlowActivityRegion.getEndProcNodeId()); } if (wfExpFlowActivityRegion.getFlagExpFlowId() == 1) {sql.append("EXP_FLOW_ID=:expFlowId,");sql.setLong("expFlowId", wfExpFlowActivityRegion.getExpFlowId()); } if (wfExpFlowActivityRegion.getFlagStartProcNodeId() == 1) {sql.append("START_PROC_NODE_ID=:startProcNodeId,"); sql.setString("startProcNodeId", wfExpFlowActivityRegion.getStartProcNodeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and EXP_FLOW_ACTIVITY_REGION_ID=:expFlowActivityRegionId");sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_EXP_FLOW_ACTIVITY_REGION(ACTIVITY_ID,END_ACTIVITY_ID,END_PROC_NODE_ID,EXP_FLOW_ACTIVITY_REGION_ID,EXP_FLOW_ID,START_PROC_NODE_ID)");sql.append(" VALUES (:activityId,:endActivityId,:endProcNodeId,:expFlowActivityRegionId,:expFlowId,:startProcNodeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) list.get(i);         if (wfExpFlowActivityRegion== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfExpFlowActivityRegion.getActivityId())) {      sql.setNullLong("activityId");     } else {    sql.setLong("activityId", wfExpFlowActivityRegion.getActivityId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndActivityId())) {      sql.setNullLong("endActivityId");     } else {    sql.setLong("endActivityId", wfExpFlowActivityRegion.getEndActivityId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getEndProcNodeId())) {      sql.setNullString("endProcNodeId");     } else {    sql.setString("endProcNodeId", wfExpFlowActivityRegion.getEndProcNodeId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {      sql.setNullLong("expFlowActivityRegionId");     } else {    sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowId())) {      sql.setNullLong("expFlowId");     } else {    sql.setLong("expFlowId", wfExpFlowActivityRegion.getExpFlowId());    }       if (StringUtil.isBlank(wfExpFlowActivityRegion.getStartProcNodeId())) {      sql.setNullString("startProcNodeId");     } else {    sql.setString("startProcNodeId", wfExpFlowActivityRegion.getStartProcNodeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;    if (StringUtil.isBlank(wfExpFlowActivityRegion.getExpFlowActivityRegionId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_EXP_FLOW_ACTIVITY_REGION WHERE 1=1  ");sql.append(" and EXP_FLOW_ACTIVITY_REGION_ID=:expFlowActivityRegionId");sql.setLong("expFlowActivityRegionId", wfExpFlowActivityRegion.getExpFlowActivityRegionId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfExpFlowActivityRegionSVO wfExpFlowActivityRegion=(WfExpFlowActivityRegionSVO) vo;       }}
