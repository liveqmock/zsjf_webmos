package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfProcSDAO;import com.cattsoft.wm.vo.WfProcSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfProcSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfProcSDAOImpl implements IWfProcSDAO{    private static Logger log = Logger.getLogger(WfProcSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcSVO wfProc=(WfProcSVO) vo;    if (StringUtil.isBlank(wfProc.getProcId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC(AREA_ID,AREA_TYPE,CREATE_DATE,CREATE_STAFF_ID,PROCESS_XML,PROC_DESC,PROC_ID,PROC_TYPE_ID,REMARK,STATE,USESTATE)");sql.append(" VALUES (:areaId,:areaType,:createDate,:createStaffId,:processXml,:procDesc,:procId,:procTypeId,:remark,:state,:usestate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfProc.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfProc.getAreaId());    }       if (StringUtil.isBlank(wfProc.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfProc.getAreaType());    }    if (wfProc.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProc.getCreateDate());    }       if (StringUtil.isBlank(wfProc.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProc.getCreateStaffId());    }       if (wfProc.getProcessXml() == null) {      sql.setNullClob("processXml");     } else {    sql.setClob("processXml", wfProc.getProcessXml());    }       if (StringUtil.isBlank(wfProc.getProcDesc())) {      sql.setNullString("procDesc");     } else {    sql.setString("procDesc", wfProc.getProcDesc());    }       if (StringUtil.isBlank(wfProc.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProc.getProcId());    }       if (StringUtil.isBlank(wfProc.getProcTypeId())) {      sql.setNullLong("procTypeId");     } else {    sql.setLong("procTypeId", wfProc.getProcTypeId());    }       if (StringUtil.isBlank(wfProc.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProc.getRemark());    }       if (StringUtil.isBlank(wfProc.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProc.getState());    }       if (StringUtil.isBlank(wfProc.getUsestate())) {      sql.setNullString("usestate");     } else {    sql.setString("usestate", wfProc.getUsestate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcSVO wfProc=(WfProcSVO) vo;    if (StringUtil.isBlank(wfProc.getProcId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT AREA_ID,AREA_TYPE,CREATE_DATE,CREATE_STAFF_ID,PROCESS_XML,PROC_DESC,PROC_ID,PROC_TYPE_ID,REMARK,STATE,USESTATE FROM WF_PROC WHERE 1=1  ");sql.append(" and PROC_ID=:procId");sql.setLong("procId", wfProc.getProcId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfProc =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfProc = new WfProcSVO();           wfProc.setAreaId(rs.getString("AREA_ID"));           wfProc.setAreaType(rs.getString("AREA_TYPE"));           wfProc.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProc.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProc.setProcessXml(rs.getClob("PROCESS_XML"));           wfProc.setProcDesc(rs.getString("PROC_DESC"));           wfProc.setProcId(rs.getString("PROC_ID"));           wfProc.setProcTypeId(rs.getString("PROC_TYPE_ID"));           wfProc.setRemark(rs.getString("REMARK"));           wfProc.setState(rs.getString("STATE"));           wfProc.setUsestate(rs.getString("USESTATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfProc;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcSVO wfProc=(WfProcSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT AREA_ID,AREA_TYPE,CREATE_DATE,CREATE_STAFF_ID,PROCESS_XML,PROC_DESC,PROC_ID,PROC_TYPE_ID,REMARK,STATE,USESTATE FROM WF_PROC WHERE 1=1 ");     try {if (wfProc.getFlagAreaId() == 1) {      if (StringUtil.isBlank(wfProc.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setString("areaId", wfProc.getAreaId());          }   } if (wfProc.getFlagAreaType() == 1) {      if (StringUtil.isBlank(wfProc.getAreaType())) {             sql.append(" and AREA_TYPE is null ");          }      else{             sql.append(" and AREA_TYPE=:areaType");             sql.setString("areaType", wfProc.getAreaType());          }   } if (wfProc.getFlagCreateDate() == 1) {      if (wfProc.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", wfProc.getCreateDate());          }   } if (wfProc.getFlagCreateStaffId() == 1) {      if (StringUtil.isBlank(wfProc.getCreateStaffId())) {             sql.append(" and CREATE_STAFF_ID is null ");          }      else{             sql.append(" and CREATE_STAFF_ID=:createStaffId");             sql.setLong("createStaffId", wfProc.getCreateStaffId());          }   } if (wfProc.getFlagProcessXml() == 1) {      if (wfProc.getProcessXml() == null) {             sql.append(" and PROCESS_XML is null ");          }      else{             sql.append(" and PROCESS_XML=:processXml");             sql.setClob("processXml", wfProc.getProcessXml());          }   } if (wfProc.getFlagProcDesc() == 1) {      if (StringUtil.isBlank(wfProc.getProcDesc())) {             sql.append(" and PROC_DESC is null ");          }      else{             sql.append(" and PROC_DESC=:procDesc");             sql.setString("procDesc", wfProc.getProcDesc());          }   } if (wfProc.getFlagProcId() == 1) {      if (StringUtil.isBlank(wfProc.getProcId())) {             sql.append(" and PROC_ID is null ");          }      else{             sql.append(" and PROC_ID=:procId");             sql.setLong("procId", wfProc.getProcId());          }   } if (wfProc.getFlagProcTypeId() == 1) {      if (StringUtil.isBlank(wfProc.getProcTypeId())) {             sql.append(" and PROC_TYPE_ID is null ");          }      else{             sql.append(" and PROC_TYPE_ID=:procTypeId");             sql.setLong("procTypeId", wfProc.getProcTypeId());          }   } if (wfProc.getFlagRemark() == 1) {      if (StringUtil.isBlank(wfProc.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", wfProc.getRemark());          }   } if (wfProc.getFlagState() == 1) {      if (StringUtil.isBlank(wfProc.getState())) {             sql.append(" and STATE is null ");          }      else{             sql.append(" and STATE=:state");             sql.setString("state", wfProc.getState());          }   } if (wfProc.getFlagUsestate() == 1) {      if (StringUtil.isBlank(wfProc.getUsestate())) {             sql.append(" and USESTATE is null ");          }      else{             sql.append(" and USESTATE=:usestate");             sql.setString("usestate", wfProc.getUsestate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfProc = new WfProcSVO();           wfProc.setAreaId(rs.getString("AREA_ID"));           wfProc.setAreaType(rs.getString("AREA_TYPE"));           wfProc.setCreateDate(rs.getTimestamp("CREATE_DATE"));           wfProc.setCreateStaffId(rs.getString("CREATE_STAFF_ID"));           wfProc.setProcessXml(rs.getClob("PROCESS_XML"));           wfProc.setProcDesc(rs.getString("PROC_DESC"));           wfProc.setProcId(rs.getString("PROC_ID"));           wfProc.setProcTypeId(rs.getString("PROC_TYPE_ID"));           wfProc.setRemark(rs.getString("REMARK"));           wfProc.setState(rs.getString("STATE"));           wfProc.setUsestate(rs.getString("USESTATE"));               res.add(wfProc);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfProcSVO wfProc=(WfProcSVO) vo;    if (StringUtil.isBlank(wfProc.getProcId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_PROC SET ");     try {if (wfProc.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,"); sql.setString("areaId", wfProc.getAreaId()); } if (wfProc.getFlagAreaType() == 1) {sql.append("AREA_TYPE=:areaType,"); sql.setString("areaType", wfProc.getAreaType()); } if (wfProc.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", wfProc.getCreateDate()); } if (wfProc.getFlagCreateStaffId() == 1) {sql.append("CREATE_STAFF_ID=:createStaffId,");sql.setLong("createStaffId", wfProc.getCreateStaffId()); } if (wfProc.getFlagProcessXml() == 1) {sql.append("PROCESS_XML=:processXml,"); sql.setClob("processXml", wfProc.getProcessXml()); } if (wfProc.getFlagProcDesc() == 1) {sql.append("PROC_DESC=:procDesc,"); sql.setString("procDesc", wfProc.getProcDesc()); } if (wfProc.getFlagProcTypeId() == 1) {sql.append("PROC_TYPE_ID=:procTypeId,");sql.setLong("procTypeId", wfProc.getProcTypeId()); } if (wfProc.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", wfProc.getRemark()); } if (wfProc.getFlagState() == 1) {sql.append("STATE=:state,"); sql.setString("state", wfProc.getState()); } if (wfProc.getFlagUsestate() == 1) {sql.append("USESTATE=:usestate,"); sql.setString("usestate", wfProc.getUsestate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and PROC_ID=:procId");sql.setLong("procId", wfProc.getProcId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_PROC(AREA_ID,AREA_TYPE,CREATE_DATE,CREATE_STAFF_ID,PROCESS_XML,PROC_DESC,PROC_ID,PROC_TYPE_ID,REMARK,STATE,USESTATE)");sql.append(" VALUES (:areaId,:areaType,:createDate,:createStaffId,:processXml,:procDesc,:procId,:procTypeId,:remark,:state,:usestate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfProcSVO wfProc=(WfProcSVO) list.get(i);         if (wfProc== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfProc.getProcId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfProc.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfProc.getAreaId());    }       if (StringUtil.isBlank(wfProc.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfProc.getAreaType());    }    if (wfProc.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", wfProc.getCreateDate());    }       if (StringUtil.isBlank(wfProc.getCreateStaffId())) {      sql.setNullLong("createStaffId");     } else {    sql.setLong("createStaffId", wfProc.getCreateStaffId());    }       if (wfProc.getProcessXml() == null) {      sql.setNullClob("processXml");     } else {    sql.setClob("processXml", wfProc.getProcessXml());    }       if (StringUtil.isBlank(wfProc.getProcDesc())) {      sql.setNullString("procDesc");     } else {    sql.setString("procDesc", wfProc.getProcDesc());    }       if (StringUtil.isBlank(wfProc.getProcId())) {      sql.setNullLong("procId");     } else {    sql.setLong("procId", wfProc.getProcId());    }       if (StringUtil.isBlank(wfProc.getProcTypeId())) {      sql.setNullLong("procTypeId");     } else {    sql.setLong("procTypeId", wfProc.getProcTypeId());    }       if (StringUtil.isBlank(wfProc.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", wfProc.getRemark());    }       if (StringUtil.isBlank(wfProc.getState())) {      sql.setNullString("state");     } else {    sql.setString("state", wfProc.getState());    }       if (StringUtil.isBlank(wfProc.getUsestate())) {      sql.setNullString("usestate");     } else {    sql.setString("usestate", wfProc.getUsestate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfProcSVO wfProc=(WfProcSVO) vo;    if (StringUtil.isBlank(wfProc.getProcId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_PROC WHERE 1=1  ");sql.append(" and PROC_ID=:procId");sql.setLong("procId", wfProc.getProcId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfProcSVO wfProc=(WfProcSVO) vo;       }}
