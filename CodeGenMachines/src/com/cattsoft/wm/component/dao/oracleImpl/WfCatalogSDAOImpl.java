package com.cattsoft.wm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.wm.component.dao.IWfCatalogSDAO;import com.cattsoft.wm.vo.WfCatalogSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法WfCatalogSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class WfCatalogSDAOImpl implements IWfCatalogSDAO{    private static Logger log = Logger.getLogger(WfCatalogSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;    if (StringUtil.isBlank(wfCatalog.getCatalogId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_CATALOG(AREA_ID,AREA_TYPE,CATALOG_CODE,CATALOG_ID,CATALOG_NAME,PARENT_CATALOG)");sql.append(" VALUES (:areaId,:areaType,:catalogCode,:catalogId,:catalogName,:parentCatalog)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(wfCatalog.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfCatalog.getAreaId());    }       if (StringUtil.isBlank(wfCatalog.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfCatalog.getAreaType());    }       if (StringUtil.isBlank(wfCatalog.getCatalogCode())) {      sql.setNullString("catalogCode");     } else {    sql.setString("catalogCode", wfCatalog.getCatalogCode());    }       if (StringUtil.isBlank(wfCatalog.getCatalogId())) {      sql.setNullLong("catalogId");     } else {    sql.setLong("catalogId", wfCatalog.getCatalogId());    }       if (StringUtil.isBlank(wfCatalog.getCatalogName())) {      sql.setNullString("catalogName");     } else {    sql.setString("catalogName", wfCatalog.getCatalogName());    }       if (StringUtil.isBlank(wfCatalog.getParentCatalog())) {      sql.setNullLong("parentCatalog");     } else {    sql.setLong("parentCatalog", wfCatalog.getParentCatalog());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;    if (StringUtil.isBlank(wfCatalog.getCatalogId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT AREA_ID,AREA_TYPE,CATALOG_CODE,CATALOG_ID,CATALOG_NAME,PARENT_CATALOG FROM WF_CATALOG WHERE 1=1  ");sql.append(" and CATALOG_ID=:catalogId");sql.setLong("catalogId", wfCatalog.getCatalogId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      wfCatalog =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           wfCatalog = new WfCatalogSVO();           wfCatalog.setAreaId(rs.getString("AREA_ID"));           wfCatalog.setAreaType(rs.getString("AREA_TYPE"));           wfCatalog.setCatalogCode(rs.getString("CATALOG_CODE"));           wfCatalog.setCatalogId(rs.getString("CATALOG_ID"));           wfCatalog.setCatalogName(rs.getString("CATALOG_NAME"));           wfCatalog.setParentCatalog(rs.getString("PARENT_CATALOG"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return wfCatalog;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT AREA_ID,AREA_TYPE,CATALOG_CODE,CATALOG_ID,CATALOG_NAME,PARENT_CATALOG FROM WF_CATALOG WHERE 1=1 ");     try {if (wfCatalog.getFlagAreaId() == 1) {      if (StringUtil.isBlank(wfCatalog.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setString("areaId", wfCatalog.getAreaId());          }   } if (wfCatalog.getFlagAreaType() == 1) {      if (StringUtil.isBlank(wfCatalog.getAreaType())) {             sql.append(" and AREA_TYPE is null ");          }      else{             sql.append(" and AREA_TYPE=:areaType");             sql.setString("areaType", wfCatalog.getAreaType());          }   } if (wfCatalog.getFlagCatalogCode() == 1) {      if (StringUtil.isBlank(wfCatalog.getCatalogCode())) {             sql.append(" and CATALOG_CODE is null ");          }      else{             sql.append(" and CATALOG_CODE=:catalogCode");             sql.setString("catalogCode", wfCatalog.getCatalogCode());          }   } if (wfCatalog.getFlagCatalogId() == 1) {      if (StringUtil.isBlank(wfCatalog.getCatalogId())) {             sql.append(" and CATALOG_ID is null ");          }      else{             sql.append(" and CATALOG_ID=:catalogId");             sql.setLong("catalogId", wfCatalog.getCatalogId());          }   } if (wfCatalog.getFlagCatalogName() == 1) {      if (StringUtil.isBlank(wfCatalog.getCatalogName())) {             sql.append(" and CATALOG_NAME is null ");          }      else{             sql.append(" and CATALOG_NAME=:catalogName");             sql.setString("catalogName", wfCatalog.getCatalogName());          }   } if (wfCatalog.getFlagParentCatalog() == 1) {      if (StringUtil.isBlank(wfCatalog.getParentCatalog())) {             sql.append(" and PARENT_CATALOG is null ");          }      else{             sql.append(" and PARENT_CATALOG=:parentCatalog");             sql.setLong("parentCatalog", wfCatalog.getParentCatalog());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           wfCatalog = new WfCatalogSVO();           wfCatalog.setAreaId(rs.getString("AREA_ID"));           wfCatalog.setAreaType(rs.getString("AREA_TYPE"));           wfCatalog.setCatalogCode(rs.getString("CATALOG_CODE"));           wfCatalog.setCatalogId(rs.getString("CATALOG_ID"));           wfCatalog.setCatalogName(rs.getString("CATALOG_NAME"));           wfCatalog.setParentCatalog(rs.getString("PARENT_CATALOG"));               res.add(wfCatalog);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;    if (StringUtil.isBlank(wfCatalog.getCatalogId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE WF_CATALOG SET ");     try {if (wfCatalog.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,"); sql.setString("areaId", wfCatalog.getAreaId()); } if (wfCatalog.getFlagAreaType() == 1) {sql.append("AREA_TYPE=:areaType,"); sql.setString("areaType", wfCatalog.getAreaType()); } if (wfCatalog.getFlagCatalogCode() == 1) {sql.append("CATALOG_CODE=:catalogCode,"); sql.setString("catalogCode", wfCatalog.getCatalogCode()); } if (wfCatalog.getFlagCatalogName() == 1) {sql.append("CATALOG_NAME=:catalogName,"); sql.setString("catalogName", wfCatalog.getCatalogName()); } if (wfCatalog.getFlagParentCatalog() == 1) {sql.append("PARENT_CATALOG=:parentCatalog,");sql.setLong("parentCatalog", wfCatalog.getParentCatalog()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and CATALOG_ID=:catalogId");sql.setLong("catalogId", wfCatalog.getCatalogId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO WF_CATALOG(AREA_ID,AREA_TYPE,CATALOG_CODE,CATALOG_ID,CATALOG_NAME,PARENT_CATALOG)");sql.append(" VALUES (:areaId,:areaType,:catalogCode,:catalogId,:catalogName,:parentCatalog)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       WfCatalogSVO wfCatalog=(WfCatalogSVO) list.get(i);         if (wfCatalog== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(wfCatalog.getCatalogId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(wfCatalog.getAreaId())) {      sql.setNullString("areaId");     } else {    sql.setString("areaId", wfCatalog.getAreaId());    }       if (StringUtil.isBlank(wfCatalog.getAreaType())) {      sql.setNullString("areaType");     } else {    sql.setString("areaType", wfCatalog.getAreaType());    }       if (StringUtil.isBlank(wfCatalog.getCatalogCode())) {      sql.setNullString("catalogCode");     } else {    sql.setString("catalogCode", wfCatalog.getCatalogCode());    }       if (StringUtil.isBlank(wfCatalog.getCatalogId())) {      sql.setNullLong("catalogId");     } else {    sql.setLong("catalogId", wfCatalog.getCatalogId());    }       if (StringUtil.isBlank(wfCatalog.getCatalogName())) {      sql.setNullString("catalogName");     } else {    sql.setString("catalogName", wfCatalog.getCatalogName());    }       if (StringUtil.isBlank(wfCatalog.getParentCatalog())) {      sql.setNullLong("parentCatalog");     } else {    sql.setLong("parentCatalog", wfCatalog.getParentCatalog());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;    if (StringUtil.isBlank(wfCatalog.getCatalogId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM WF_CATALOG WHERE 1=1  ");sql.append(" and CATALOG_ID=:catalogId");sql.setLong("catalogId", wfCatalog.getCatalogId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     WfCatalogSVO wfCatalog=(WfCatalogSVO) vo;       }}
