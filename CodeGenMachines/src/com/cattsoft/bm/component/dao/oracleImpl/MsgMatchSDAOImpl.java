package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.bm.component.dao.IMsgMatchSDAO;import com.cattsoft.bm.vo.MsgMatchSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法MsgMatchSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class MsgMatchSDAOImpl implements IMsgMatchSDAO {	// private static Logger log = Logger.getLogger(MsgMatchSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgMatchSVO msgMatch = (MsgMatchSVO) vo;		if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_MATCH(AREA_ID,AUTO_SEND_FLAG,EFF_DATE,EVENT_SEND_FLAG,EVENT_TYPE,EXP_DATE,LOCAL_NET_ID,MSG_MATCH_ID,MSG_SEND_RULE_ID,MSG_TEMPLATE_ID,REMARKS,SPEC_SERV_ID,STS,STS_DATE)");		sql				.append(" VALUES (:areaId,:autoSendFlag,:effDate,:eventSendFlag,:eventType,:expDate,:localNetId,:msgMatchId,:msgSendRuleId,:msgTemplateId,:remarks,:specServId,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(msgMatch.getAreaId())) {				sql.setNullLong("areaId");			} else {				sql.setLong("areaId", msgMatch.getAreaId());			}			if (StringUtil.isBlank(msgMatch.getAutoSendFlag())) {				sql.setNullString("autoSendFlag");			} else {				sql.setString("autoSendFlag", msgMatch.getAutoSendFlag());			}			if (msgMatch.getEffDate() == null) {				sql.setNullDate("effDate");			} else {				sql.setTimestamp("effDate", msgMatch.getEffDate());			}			if (StringUtil.isBlank(msgMatch.getEventSendFlag())) {				sql.setNullString("eventSendFlag");			} else {				sql.setString("eventSendFlag", msgMatch.getEventSendFlag());			}			if (StringUtil.isBlank(msgMatch.getEventType())) {				sql.setNullString("eventType");			} else {				sql.setString("eventType", msgMatch.getEventType());			}			if (msgMatch.getExpDate() == null) {				sql.setNullDate("expDate");			} else {				sql.setTimestamp("expDate", msgMatch.getExpDate());			}			if (StringUtil.isBlank(msgMatch.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", msgMatch.getLocalNetId());			}			if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {				sql.setNullLong("msgMatchId");			} else {				sql.setLong("msgMatchId", msgMatch.getMsgMatchId());			}			if (StringUtil.isBlank(msgMatch.getMsgSendRuleId())) {				sql.setNullLong("msgSendRuleId");			} else {				sql.setLong("msgSendRuleId", msgMatch.getMsgSendRuleId());			}			if (StringUtil.isBlank(msgMatch.getMsgTemplateId())) {				sql.setNullLong("msgTemplateId");			} else {				sql.setLong("msgTemplateId", msgMatch.getMsgTemplateId());			}			if (StringUtil.isBlank(msgMatch.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", msgMatch.getRemarks());			}			if (StringUtil.isBlank(msgMatch.getSpecServId())) {				sql.setNullLong("specServId");			} else {				sql.setLong("specServId", msgMatch.getSpecServId());			}			if (StringUtil.isBlank(msgMatch.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", msgMatch.getSts());			}			if (msgMatch.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", msgMatch.getStsDate());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgMatchSVO msgMatch = (MsgMatchSVO) vo;		if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT AREA_ID,AUTO_SEND_FLAG,EFF_DATE,EVENT_SEND_FLAG,EVENT_TYPE,EXP_DATE,LOCAL_NET_ID,MSG_MATCH_ID,MSG_SEND_RULE_ID,MSG_TEMPLATE_ID,REMARKS,SPEC_SERV_ID,STS,STS_DATE FROM MSG_MATCH WHERE 1=1  ");		sql.append(" and MSG_MATCH_ID=:msgMatchId");		sql.setLong("msgMatchId", msgMatch.getMsgMatchId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		msgMatch = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgMatch = new MsgMatchSVO();				msgMatch.setAreaId(rs.getString("AREA_ID"));				msgMatch.setAutoSendFlag(rs.getString("AUTO_SEND_FLAG"));				msgMatch.setEffDate(rs.getTimestamp("EFF_DATE"));				msgMatch.setEventSendFlag(rs.getString("EVENT_SEND_FLAG"));				msgMatch.setEventType(rs.getString("EVENT_TYPE"));				msgMatch.setExpDate(rs.getTimestamp("EXP_DATE"));				msgMatch.setLocalNetId(rs.getString("LOCAL_NET_ID"));				msgMatch.setMsgMatchId(rs.getString("MSG_MATCH_ID"));				msgMatch.setMsgSendRuleId(rs.getString("MSG_SEND_RULE_ID"));				msgMatch.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgMatch.setRemarks(rs.getString("REMARKS"));				msgMatch.setSpecServId(rs.getString("SPEC_SERV_ID"));				msgMatch.setSts(rs.getString("STS"));				msgMatch.setStsDate(rs.getTimestamp("STS_DATE"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return msgMatch;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgMatchSVO msgMatch = (MsgMatchSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT AREA_ID,AUTO_SEND_FLAG,EFF_DATE,EVENT_SEND_FLAG,EVENT_TYPE,EXP_DATE,LOCAL_NET_ID,MSG_MATCH_ID,MSG_SEND_RULE_ID,MSG_TEMPLATE_ID,REMARKS,SPEC_SERV_ID,STS,STS_DATE FROM MSG_MATCH WHERE 1=1 ");		try {			if (msgMatch.getFlagAreaId() == 1) {				if (StringUtil.isBlank(msgMatch.getAreaId())) {					sql.append(" and AREA_ID is null ");				} else {					sql.append(" and AREA_ID=:areaId");					sql.setLong("areaId", msgMatch.getAreaId());				}			}			if (msgMatch.getFlagAutoSendFlag() == 1) {				if (StringUtil.isBlank(msgMatch.getAutoSendFlag())) {					sql.append(" and AUTO_SEND_FLAG is null ");				} else {					sql.append(" and AUTO_SEND_FLAG=:autoSendFlag");					sql.setString("autoSendFlag", msgMatch.getAutoSendFlag());				}			}			if (msgMatch.getFlagEffDate() == 1) {				if (msgMatch.getEffDate() == null) {					sql.append(" and EFF_DATE is null ");				} else {					sql.append(" and EFF_DATE=:effDate");					sql.setTimestamp("effDate", msgMatch.getEffDate());				}			}			if (msgMatch.getFlagEventSendFlag() == 1) {				if (StringUtil.isBlank(msgMatch.getEventSendFlag())) {					sql.append(" and EVENT_SEND_FLAG is null ");				} else {					sql.append(" and EVENT_SEND_FLAG=:eventSendFlag");					sql.setString("eventSendFlag", msgMatch.getEventSendFlag());				}			}			if (msgMatch.getFlagEventType() == 1) {				if (StringUtil.isBlank(msgMatch.getEventType())) {					sql.append(" and EVENT_TYPE is null ");				} else {					sql.append(" and EVENT_TYPE=:eventType");					sql.setString("eventType", msgMatch.getEventType());				}			}			if (msgMatch.getFlagExpDate() == 1) {				if (msgMatch.getExpDate() == null) {					sql.append(" and EXP_DATE is null ");				} else {					sql.append(" and EXP_DATE=:expDate");					sql.setTimestamp("expDate", msgMatch.getExpDate());				}			}			if (msgMatch.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(msgMatch.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", msgMatch.getLocalNetId());				}			}			if (msgMatch.getFlagMsgMatchId() == 1) {				if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {					sql.append(" and MSG_MATCH_ID is null ");				} else {					sql.append(" and MSG_MATCH_ID=:msgMatchId");					sql.setLong("msgMatchId", msgMatch.getMsgMatchId());				}			}			if (msgMatch.getFlagMsgSendRuleId() == 1) {				if (StringUtil.isBlank(msgMatch.getMsgSendRuleId())) {					sql.append(" and MSG_SEND_RULE_ID is null ");				} else {					sql.append(" and MSG_SEND_RULE_ID=:msgSendRuleId");					sql.setLong("msgSendRuleId", msgMatch.getMsgSendRuleId());				}			}			if (msgMatch.getFlagMsgTemplateId() == 1) {				if (StringUtil.isBlank(msgMatch.getMsgTemplateId())) {					sql.append(" and MSG_TEMPLATE_ID is null ");				} else {					sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");					sql.setLong("msgTemplateId", msgMatch.getMsgTemplateId());				}			}			if (msgMatch.getFlagRemarks() == 1) {				if (StringUtil.isBlank(msgMatch.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", msgMatch.getRemarks());				}			}			if (msgMatch.getFlagSpecServId() == 1) {				if (StringUtil.isBlank(msgMatch.getSpecServId())) {					sql.append(" and SPEC_SERV_ID is null ");				} else {					sql.append(" and SPEC_SERV_ID=:specServId");					sql.setLong("specServId", msgMatch.getSpecServId());				}			}			if (msgMatch.getFlagSts() == 1) {				if (StringUtil.isBlank(msgMatch.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", msgMatch.getSts());				}			}			if (msgMatch.getFlagStsDate() == 1) {				if (msgMatch.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", msgMatch.getStsDate());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgMatch = new MsgMatchSVO();				msgMatch.setAreaId(rs.getString("AREA_ID"));				msgMatch.setAutoSendFlag(rs.getString("AUTO_SEND_FLAG"));				msgMatch.setEffDate(rs.getTimestamp("EFF_DATE"));				msgMatch.setEventSendFlag(rs.getString("EVENT_SEND_FLAG"));				msgMatch.setEventType(rs.getString("EVENT_TYPE"));				msgMatch.setExpDate(rs.getTimestamp("EXP_DATE"));				msgMatch.setLocalNetId(rs.getString("LOCAL_NET_ID"));				msgMatch.setMsgMatchId(rs.getString("MSG_MATCH_ID"));				msgMatch.setMsgSendRuleId(rs.getString("MSG_SEND_RULE_ID"));				msgMatch.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgMatch.setRemarks(rs.getString("REMARKS"));				msgMatch.setSpecServId(rs.getString("SPEC_SERV_ID"));				msgMatch.setSts(rs.getString("STS"));				msgMatch.setStsDate(rs.getTimestamp("STS_DATE"));				res.add(msgMatch);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgMatchSVO msgMatch = (MsgMatchSVO) vo;		if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE MSG_MATCH SET ");		try {			if (msgMatch.getFlagAreaId() == 1) {				sql.append("AREA_ID=:areaId,");				sql.setLong("areaId", msgMatch.getAreaId());			}			if (msgMatch.getFlagAutoSendFlag() == 1) {				sql.append("AUTO_SEND_FLAG=:autoSendFlag,");				sql.setString("autoSendFlag", msgMatch.getAutoSendFlag());			}			if (msgMatch.getFlagEffDate() == 1) {				sql.append("EFF_DATE=:effDate,");				sql.setTimestamp("effDate", msgMatch.getEffDate());			}			if (msgMatch.getFlagEventSendFlag() == 1) {				sql.append("EVENT_SEND_FLAG=:eventSendFlag,");				sql.setString("eventSendFlag", msgMatch.getEventSendFlag());			}			if (msgMatch.getFlagEventType() == 1) {				sql.append("EVENT_TYPE=:eventType,");				sql.setString("eventType", msgMatch.getEventType());			}			if (msgMatch.getFlagExpDate() == 1) {				sql.append("EXP_DATE=:expDate,");				sql.setTimestamp("expDate", msgMatch.getExpDate());			}			if (msgMatch.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", msgMatch.getLocalNetId());			}			if (msgMatch.getFlagMsgSendRuleId() == 1) {				sql.append("MSG_SEND_RULE_ID=:msgSendRuleId,");				sql.setLong("msgSendRuleId", msgMatch.getMsgSendRuleId());			}			if (msgMatch.getFlagMsgTemplateId() == 1) {				sql.append("MSG_TEMPLATE_ID=:msgTemplateId,");				sql.setLong("msgTemplateId", msgMatch.getMsgTemplateId());			}			if (msgMatch.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", msgMatch.getRemarks());			}			if (msgMatch.getFlagSpecServId() == 1) {				sql.append("SPEC_SERV_ID=:specServId,");				sql.setLong("specServId", msgMatch.getSpecServId());			}			if (msgMatch.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", msgMatch.getSts());			}			if (msgMatch.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", msgMatch.getStsDate());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and MSG_MATCH_ID=:msgMatchId");			sql.setLong("msgMatchId", msgMatch.getMsgMatchId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_MATCH(AREA_ID,AUTO_SEND_FLAG,EFF_DATE,EVENT_SEND_FLAG,EVENT_TYPE,EXP_DATE,LOCAL_NET_ID,MSG_MATCH_ID,MSG_SEND_RULE_ID,MSG_TEMPLATE_ID,REMARKS,SPEC_SERV_ID,STS,STS_DATE)");		sql				.append(" VALUES (:areaId,:autoSendFlag,:effDate,:eventSendFlag,:eventType,:expDate,:localNetId,:msgMatchId,:msgSendRuleId,:msgTemplateId,:remarks,:specServId,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				MsgMatchSVO msgMatch = (MsgMatchSVO) list.get(i);				if (msgMatch == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(msgMatch.getAreaId())) {					sql.setNullLong("areaId");				} else {					sql.setLong("areaId", msgMatch.getAreaId());				}				if (StringUtil.isBlank(msgMatch.getAutoSendFlag())) {					sql.setNullString("autoSendFlag");				} else {					sql.setString("autoSendFlag", msgMatch.getAutoSendFlag());				}				if (msgMatch.getEffDate() == null) {					sql.setNullDate("effDate");				} else {					sql.setTimestamp("effDate", msgMatch.getEffDate());				}				if (StringUtil.isBlank(msgMatch.getEventSendFlag())) {					sql.setNullString("eventSendFlag");				} else {					sql.setString("eventSendFlag", msgMatch.getEventSendFlag());				}				if (StringUtil.isBlank(msgMatch.getEventType())) {					sql.setNullString("eventType");				} else {					sql.setString("eventType", msgMatch.getEventType());				}				if (msgMatch.getExpDate() == null) {					sql.setNullDate("expDate");				} else {					sql.setTimestamp("expDate", msgMatch.getExpDate());				}				if (StringUtil.isBlank(msgMatch.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", msgMatch.getLocalNetId());				}				if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {					sql.setNullLong("msgMatchId");				} else {					sql.setLong("msgMatchId", msgMatch.getMsgMatchId());				}				if (StringUtil.isBlank(msgMatch.getMsgSendRuleId())) {					sql.setNullLong("msgSendRuleId");				} else {					sql.setLong("msgSendRuleId", msgMatch.getMsgSendRuleId());				}				if (StringUtil.isBlank(msgMatch.getMsgTemplateId())) {					sql.setNullLong("msgTemplateId");				} else {					sql.setLong("msgTemplateId", msgMatch.getMsgTemplateId());				}				if (StringUtil.isBlank(msgMatch.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", msgMatch.getRemarks());				}				if (StringUtil.isBlank(msgMatch.getSpecServId())) {					sql.setNullLong("specServId");				} else {					sql.setLong("specServId", msgMatch.getSpecServId());				}				if (StringUtil.isBlank(msgMatch.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", msgMatch.getSts());				}				if (msgMatch.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", msgMatch.getStsDate());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgMatchSVO msgMatch = (MsgMatchSVO) vo;		if (StringUtil.isBlank(msgMatch.getMsgMatchId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM MSG_MATCH WHERE 1=1  ");		sql.append(" and MSG_MATCH_ID=:msgMatchId");		sql.setLong("msgMatchId", msgMatch.getMsgMatchId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// MsgMatchSVO msgMatch=(MsgMatchSVO) vo;	}}