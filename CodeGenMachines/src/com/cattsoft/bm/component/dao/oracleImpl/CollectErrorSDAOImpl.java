package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.bm.component.dao.ICollectErrorSDAO;import com.cattsoft.bm.vo.CollectErrorSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法CollectErrorSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class CollectErrorSDAOImpl implements ICollectErrorSDAO{    private static Logger log = Logger.getLogger(CollectErrorSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     CollectErrorSVO collectError=(CollectErrorSVO) vo;    if (StringUtil.isBlank(collectError.getCollectErrorId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO COLLECT_ERROR(COLLECT_DATE,COLLECT_ERROR_ID,ERROR_DESC,OBJECT_NAME)");sql.append(" VALUES (:collectDate,:collectErrorId,:errorDesc,:objectName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (collectError.getCollectDate() == null) {      sql.setNullDate("collectDate");     } else {    sql.setTimestamp("collectDate", collectError.getCollectDate());    }       if (StringUtil.isBlank(collectError.getCollectErrorId())) {      sql.setNullLong("collectErrorId");     } else {    sql.setLong("collectErrorId", collectError.getCollectErrorId());    }       if (StringUtil.isBlank(collectError.getErrorDesc())) {      sql.setNullString("errorDesc");     } else {    sql.setString("errorDesc", collectError.getErrorDesc());    }       if (StringUtil.isBlank(collectError.getObjectName())) {      sql.setNullString("objectName");     } else {    sql.setString("objectName", collectError.getObjectName());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     CollectErrorSVO collectError=(CollectErrorSVO) vo;    if (StringUtil.isBlank(collectError.getCollectErrorId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT COLLECT_DATE,COLLECT_ERROR_ID,ERROR_DESC,OBJECT_NAME FROM COLLECT_ERROR WHERE 1=1  ");sql.append(" and COLLECT_ERROR_ID=:collectErrorId");sql.setLong("collectErrorId", collectError.getCollectErrorId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      collectError =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           collectError = new CollectErrorSVO();           collectError.setCollectDate(rs.getTimestamp("COLLECT_DATE"));           collectError.setCollectErrorId(rs.getString("COLLECT_ERROR_ID"));           collectError.setErrorDesc(rs.getString("ERROR_DESC"));           collectError.setObjectName(rs.getString("OBJECT_NAME"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return collectError;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       CollectErrorSVO collectError=(CollectErrorSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT COLLECT_DATE,COLLECT_ERROR_ID,ERROR_DESC,OBJECT_NAME FROM COLLECT_ERROR WHERE 1=1 ");     try {if (collectError.getFlagCollectDate() == 1) {      if (collectError.getCollectDate() == null) {             sql.append(" and COLLECT_DATE is null ");          }      else{             sql.append(" and COLLECT_DATE=:collectDate");             sql.setTimestamp("collectDate", collectError.getCollectDate());          }   } if (collectError.getFlagCollectErrorId() == 1) {      if (StringUtil.isBlank(collectError.getCollectErrorId())) {             sql.append(" and COLLECT_ERROR_ID is null ");          }      else{             sql.append(" and COLLECT_ERROR_ID=:collectErrorId");             sql.setLong("collectErrorId", collectError.getCollectErrorId());          }   } if (collectError.getFlagErrorDesc() == 1) {      if (StringUtil.isBlank(collectError.getErrorDesc())) {             sql.append(" and ERROR_DESC is null ");          }      else{             sql.append(" and ERROR_DESC=:errorDesc");             sql.setString("errorDesc", collectError.getErrorDesc());          }   } if (collectError.getFlagObjectName() == 1) {      if (StringUtil.isBlank(collectError.getObjectName())) {             sql.append(" and OBJECT_NAME is null ");          }      else{             sql.append(" and OBJECT_NAME=:objectName");             sql.setString("objectName", collectError.getObjectName());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           collectError = new CollectErrorSVO();           collectError.setCollectDate(rs.getTimestamp("COLLECT_DATE"));           collectError.setCollectErrorId(rs.getString("COLLECT_ERROR_ID"));           collectError.setErrorDesc(rs.getString("ERROR_DESC"));           collectError.setObjectName(rs.getString("OBJECT_NAME"));               res.add(collectError);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       CollectErrorSVO collectError=(CollectErrorSVO) vo;    if (StringUtil.isBlank(collectError.getCollectErrorId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE COLLECT_ERROR SET ");     try {if (collectError.getFlagCollectDate() == 1) {sql.append("COLLECT_DATE=:collectDate,"); sql.setTimestamp("collectDate", collectError.getCollectDate()); } if (collectError.getFlagErrorDesc() == 1) {sql.append("ERROR_DESC=:errorDesc,"); sql.setString("errorDesc", collectError.getErrorDesc()); } if (collectError.getFlagObjectName() == 1) {sql.append("OBJECT_NAME=:objectName,"); sql.setString("objectName", collectError.getObjectName()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and COLLECT_ERROR_ID=:collectErrorId");sql.setLong("collectErrorId", collectError.getCollectErrorId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO COLLECT_ERROR(COLLECT_DATE,COLLECT_ERROR_ID,ERROR_DESC,OBJECT_NAME)");sql.append(" VALUES (:collectDate,:collectErrorId,:errorDesc,:objectName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       CollectErrorSVO collectError=(CollectErrorSVO) list.get(i);         if (collectError== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(collectError.getCollectErrorId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (collectError.getCollectDate() == null) {      sql.setNullDate("collectDate");     } else {    sql.setTimestamp("collectDate", collectError.getCollectDate());    }       if (StringUtil.isBlank(collectError.getCollectErrorId())) {      sql.setNullLong("collectErrorId");     } else {    sql.setLong("collectErrorId", collectError.getCollectErrorId());    }       if (StringUtil.isBlank(collectError.getErrorDesc())) {      sql.setNullString("errorDesc");     } else {    sql.setString("errorDesc", collectError.getErrorDesc());    }       if (StringUtil.isBlank(collectError.getObjectName())) {      sql.setNullString("objectName");     } else {    sql.setString("objectName", collectError.getObjectName());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     CollectErrorSVO collectError=(CollectErrorSVO) vo;    if (StringUtil.isBlank(collectError.getCollectErrorId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM COLLECT_ERROR WHERE 1=1  ");sql.append(" and COLLECT_ERROR_ID=:collectErrorId");sql.setLong("collectErrorId", collectError.getCollectErrorId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     CollectErrorSVO collectError=(CollectErrorSVO) vo;       }}
