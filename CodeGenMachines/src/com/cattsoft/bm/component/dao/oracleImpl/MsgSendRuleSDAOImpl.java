package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.bm.component.dao.IMsgSendRuleSDAO;import com.cattsoft.bm.vo.MsgSendRuleSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法MsgSendRuleSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class MsgSendRuleSDAOImpl implements IMsgSendRuleSDAO {	// private static Logger log = Logger.getLogger(MsgSendRuleSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) vo;		if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_SEND_RULE(END_TIME,MSG_SEND_RULE_ID,NAME,REMARKS,SEND_COUNT,START_TIME,STS,STS_DATE,TIME_INTERVAL)");		sql				.append(" VALUES (:endTime,:msgSendRuleId,:name,:remarks,:sendCount,:startTime,:sts,:stsDate,:timeInterval)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(msgSendRule.getEndTime())) {				sql.setNullString("endTime");			} else {				sql.setString("endTime", msgSendRule.getEndTime());			}			if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {				sql.setNullLong("msgSendRuleId");			} else {				sql.setLong("msgSendRuleId", msgSendRule.getMsgSendRuleId());			}			if (StringUtil.isBlank(msgSendRule.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", msgSendRule.getName());			}			if (StringUtil.isBlank(msgSendRule.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", msgSendRule.getRemarks());			}			if (StringUtil.isBlank(msgSendRule.getSendCount())) {				sql.setNullLong("sendCount");			} else {				sql.setLong("sendCount", msgSendRule.getSendCount());			}			if (StringUtil.isBlank(msgSendRule.getStartTime())) {				sql.setNullString("startTime");			} else {				sql.setString("startTime", msgSendRule.getStartTime());			}			if (StringUtil.isBlank(msgSendRule.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", msgSendRule.getSts());			}			if (msgSendRule.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", msgSendRule.getStsDate());			}			if (StringUtil.isBlank(msgSendRule.getTimeInterval())) {				sql.setNullLong("timeInterval");			} else {				sql.setLong("timeInterval", msgSendRule.getTimeInterval());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) vo;		if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT END_TIME,MSG_SEND_RULE_ID,NAME,REMARKS,SEND_COUNT,START_TIME,STS,STS_DATE,TIME_INTERVAL FROM MSG_SEND_RULE WHERE 1=1  ");		sql.append(" and MSG_SEND_RULE_ID=:msgSendRuleId");		sql.setLong("msgSendRuleId", msgSendRule.getMsgSendRuleId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		msgSendRule = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgSendRule = new MsgSendRuleSVO();				msgSendRule.setEndTime(rs.getString("END_TIME"));				msgSendRule.setMsgSendRuleId(rs.getString("MSG_SEND_RULE_ID"));				msgSendRule.setName(rs.getString("NAME"));				msgSendRule.setRemarks(rs.getString("REMARKS"));				msgSendRule.setSendCount(rs.getString("SEND_COUNT"));				msgSendRule.setStartTime(rs.getString("START_TIME"));				msgSendRule.setSts(rs.getString("STS"));				msgSendRule.setStsDate(rs.getTimestamp("STS_DATE"));				msgSendRule.setTimeInterval(rs.getString("TIME_INTERVAL"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return msgSendRule;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT END_TIME,MSG_SEND_RULE_ID,NAME,REMARKS,SEND_COUNT,START_TIME,STS,STS_DATE,TIME_INTERVAL FROM MSG_SEND_RULE WHERE 1=1 ");		try {			if (msgSendRule.getFlagEndTime() == 1) {				if (StringUtil.isBlank(msgSendRule.getEndTime())) {					sql.append(" and END_TIME is null ");				} else {					sql.append(" and END_TIME=:endTime");					sql.setString("endTime", msgSendRule.getEndTime());				}			}			if (msgSendRule.getFlagMsgSendRuleId() == 1) {				if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {					sql.append(" and MSG_SEND_RULE_ID is null ");				} else {					sql.append(" and MSG_SEND_RULE_ID=:msgSendRuleId");					sql							.setLong("msgSendRuleId", msgSendRule									.getMsgSendRuleId());				}			}			if (msgSendRule.getFlagName() == 1) {				if (StringUtil.isBlank(msgSendRule.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", msgSendRule.getName());				}			}			if (msgSendRule.getFlagRemarks() == 1) {				if (StringUtil.isBlank(msgSendRule.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", msgSendRule.getRemarks());				}			}			if (msgSendRule.getFlagSendCount() == 1) {				if (StringUtil.isBlank(msgSendRule.getSendCount())) {					sql.append(" and SEND_COUNT is null ");				} else {					sql.append(" and SEND_COUNT=:sendCount");					sql.setLong("sendCount", msgSendRule.getSendCount());				}			}			if (msgSendRule.getFlagStartTime() == 1) {				if (StringUtil.isBlank(msgSendRule.getStartTime())) {					sql.append(" and START_TIME is null ");				} else {					sql.append(" and START_TIME=:startTime");					sql.setString("startTime", msgSendRule.getStartTime());				}			}			if (msgSendRule.getFlagSts() == 1) {				if (StringUtil.isBlank(msgSendRule.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", msgSendRule.getSts());				}			}			if (msgSendRule.getFlagStsDate() == 1) {				if (msgSendRule.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", msgSendRule.getStsDate());				}			}			if (msgSendRule.getFlagTimeInterval() == 1) {				if (StringUtil.isBlank(msgSendRule.getTimeInterval())) {					sql.append(" and TIME_INTERVAL is null ");				} else {					sql.append(" and TIME_INTERVAL=:timeInterval");					sql.setLong("timeInterval", msgSendRule.getTimeInterval());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgSendRule = new MsgSendRuleSVO();				msgSendRule.setEndTime(rs.getString("END_TIME"));				msgSendRule.setMsgSendRuleId(rs.getString("MSG_SEND_RULE_ID"));				msgSendRule.setName(rs.getString("NAME"));				msgSendRule.setRemarks(rs.getString("REMARKS"));				msgSendRule.setSendCount(rs.getString("SEND_COUNT"));				msgSendRule.setStartTime(rs.getString("START_TIME"));				msgSendRule.setSts(rs.getString("STS"));				msgSendRule.setStsDate(rs.getTimestamp("STS_DATE"));				msgSendRule.setTimeInterval(rs.getString("TIME_INTERVAL"));				res.add(msgSendRule);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) vo;		if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE MSG_SEND_RULE SET ");		try {			if (msgSendRule.getFlagEndTime() == 1) {				sql.append("END_TIME=:endTime,");				sql.setString("endTime", msgSendRule.getEndTime());			}			if (msgSendRule.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", msgSendRule.getName());			}			if (msgSendRule.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", msgSendRule.getRemarks());			}			if (msgSendRule.getFlagSendCount() == 1) {				sql.append("SEND_COUNT=:sendCount,");				sql.setLong("sendCount", msgSendRule.getSendCount());			}			if (msgSendRule.getFlagStartTime() == 1) {				sql.append("START_TIME=:startTime,");				sql.setString("startTime", msgSendRule.getStartTime());			}			if (msgSendRule.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", msgSendRule.getSts());			}			if (msgSendRule.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", msgSendRule.getStsDate());			}			if (msgSendRule.getFlagTimeInterval() == 1) {				sql.append("TIME_INTERVAL=:timeInterval,");				sql.setLong("timeInterval", msgSendRule.getTimeInterval());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and MSG_SEND_RULE_ID=:msgSendRuleId");			sql.setLong("msgSendRuleId", msgSendRule.getMsgSendRuleId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_SEND_RULE(END_TIME,MSG_SEND_RULE_ID,NAME,REMARKS,SEND_COUNT,START_TIME,STS,STS_DATE,TIME_INTERVAL)");		sql				.append(" VALUES (:endTime,:msgSendRuleId,:name,:remarks,:sendCount,:startTime,:sts,:stsDate,:timeInterval)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) list.get(i);				if (msgSendRule == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(msgSendRule.getEndTime())) {					sql.setNullString("endTime");				} else {					sql.setString("endTime", msgSendRule.getEndTime());				}				if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {					sql.setNullLong("msgSendRuleId");				} else {					sql							.setLong("msgSendRuleId", msgSendRule									.getMsgSendRuleId());				}				if (StringUtil.isBlank(msgSendRule.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", msgSendRule.getName());				}				if (StringUtil.isBlank(msgSendRule.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", msgSendRule.getRemarks());				}				if (StringUtil.isBlank(msgSendRule.getSendCount())) {					sql.setNullLong("sendCount");				} else {					sql.setLong("sendCount", msgSendRule.getSendCount());				}				if (StringUtil.isBlank(msgSendRule.getStartTime())) {					sql.setNullString("startTime");				} else {					sql.setString("startTime", msgSendRule.getStartTime());				}				if (StringUtil.isBlank(msgSendRule.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", msgSendRule.getSts());				}				if (msgSendRule.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", msgSendRule.getStsDate());				}				if (StringUtil.isBlank(msgSendRule.getTimeInterval())) {					sql.setNullLong("timeInterval");				} else {					sql.setLong("timeInterval", msgSendRule.getTimeInterval());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgSendRuleSVO msgSendRule = (MsgSendRuleSVO) vo;		if (StringUtil.isBlank(msgSendRule.getMsgSendRuleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM MSG_SEND_RULE WHERE 1=1  ");		sql.append(" and MSG_SEND_RULE_ID=:msgSendRuleId");		sql.setLong("msgSendRuleId", msgSendRule.getMsgSendRuleId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// MsgSendRuleSVO msgSendRule=(MsgSendRuleSVO) vo;	}}