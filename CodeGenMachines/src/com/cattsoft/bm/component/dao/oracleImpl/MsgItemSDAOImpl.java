package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.bm.component.dao.IMsgItemSDAO;import com.cattsoft.bm.vo.MsgItemSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法MsgItemSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class MsgItemSDAOImpl implements IMsgItemSDAO {	// private static Logger log = Logger.getLogger(MsgItemSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgItemSVO msgItem = (MsgItemSVO) vo;		if (StringUtil.isBlank(msgItem.getMsgItemId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_ITEM(MSG_ITEM_ID,MSG_TEMPLATE_ID,POS_SYS_ITEM,PRE_SYS_ITEM,REMARKS,SORT_POSITION,STS,STS_DATE,SYS_ITEM_ID)");		sql				.append(" VALUES (:msgItemId,:msgTemplateId,:posSysItem,:preSysItem,:remarks,:sortPosition,:sts,:stsDate,:sysItemId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(msgItem.getMsgItemId())) {				sql.setNullLong("msgItemId");			} else {				sql.setLong("msgItemId", msgItem.getMsgItemId());			}			if (StringUtil.isBlank(msgItem.getMsgTemplateId())) {				sql.setNullLong("msgTemplateId");			} else {				sql.setLong("msgTemplateId", msgItem.getMsgTemplateId());			}			if (StringUtil.isBlank(msgItem.getPosSysItem())) {				sql.setNullString("posSysItem");			} else {				sql.setString("posSysItem", msgItem.getPosSysItem());			}			if (StringUtil.isBlank(msgItem.getPreSysItem())) {				sql.setNullString("preSysItem");			} else {				sql.setString("preSysItem", msgItem.getPreSysItem());			}			if (StringUtil.isBlank(msgItem.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", msgItem.getRemarks());			}			if (StringUtil.isBlank(msgItem.getSortPosition())) {				sql.setNullLong("sortPosition");			} else {				sql.setLong("sortPosition", msgItem.getSortPosition());			}			if (StringUtil.isBlank(msgItem.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", msgItem.getSts());			}			if (msgItem.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", msgItem.getStsDate());			}			if (StringUtil.isBlank(msgItem.getSysItemId())) {				sql.setNullString("sysItemId");			} else {				sql.setString("sysItemId", msgItem.getSysItemId());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgItemSVO msgItem = (MsgItemSVO) vo;		if (StringUtil.isBlank(msgItem.getMsgItemId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT MSG_ITEM_ID,MSG_TEMPLATE_ID,POS_SYS_ITEM,PRE_SYS_ITEM,REMARKS,SORT_POSITION,STS,STS_DATE,SYS_ITEM_ID FROM MSG_ITEM WHERE 1=1  ");		sql.append(" and MSG_ITEM_ID=:msgItemId");		sql.setLong("msgItemId", msgItem.getMsgItemId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		msgItem = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgItem = new MsgItemSVO();				msgItem.setMsgItemId(rs.getString("MSG_ITEM_ID"));				msgItem.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgItem.setPosSysItem(rs.getString("POS_SYS_ITEM"));				msgItem.setPreSysItem(rs.getString("PRE_SYS_ITEM"));				msgItem.setRemarks(rs.getString("REMARKS"));				msgItem.setSortPosition(rs.getString("SORT_POSITION"));				msgItem.setSts(rs.getString("STS"));				msgItem.setStsDate(rs.getTimestamp("STS_DATE"));				msgItem.setSysItemId(rs.getString("SYS_ITEM_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return msgItem;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgItemSVO msgItem = (MsgItemSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT MSG_ITEM_ID,MSG_TEMPLATE_ID,POS_SYS_ITEM,PRE_SYS_ITEM,REMARKS,SORT_POSITION,STS,STS_DATE,SYS_ITEM_ID FROM MSG_ITEM WHERE 1=1 ");		try {			if (msgItem.getFlagMsgItemId() == 1) {				if (StringUtil.isBlank(msgItem.getMsgItemId())) {					sql.append(" and MSG_ITEM_ID is null ");				} else {					sql.append(" and MSG_ITEM_ID=:msgItemId");					sql.setLong("msgItemId", msgItem.getMsgItemId());				}			}			if (msgItem.getFlagMsgTemplateId() == 1) {				if (StringUtil.isBlank(msgItem.getMsgTemplateId())) {					sql.append(" and MSG_TEMPLATE_ID is null ");				} else {					sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");					sql.setLong("msgTemplateId", msgItem.getMsgTemplateId());				}			}			if (msgItem.getFlagPosSysItem() == 1) {				if (StringUtil.isBlank(msgItem.getPosSysItem())) {					sql.append(" and POS_SYS_ITEM is null ");				} else {					sql.append(" and POS_SYS_ITEM=:posSysItem");					sql.setString("posSysItem", msgItem.getPosSysItem());				}			}			if (msgItem.getFlagPreSysItem() == 1) {				if (StringUtil.isBlank(msgItem.getPreSysItem())) {					sql.append(" and PRE_SYS_ITEM is null ");				} else {					sql.append(" and PRE_SYS_ITEM=:preSysItem");					sql.setString("preSysItem", msgItem.getPreSysItem());				}			}			if (msgItem.getFlagRemarks() == 1) {				if (StringUtil.isBlank(msgItem.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", msgItem.getRemarks());				}			}			if (msgItem.getFlagSortPosition() == 1) {				if (StringUtil.isBlank(msgItem.getSortPosition())) {					sql.append(" and SORT_POSITION is null ");				} else {					sql.append(" and SORT_POSITION=:sortPosition");					sql.setLong("sortPosition", msgItem.getSortPosition());				}			}			if (msgItem.getFlagSts() == 1) {				if (StringUtil.isBlank(msgItem.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", msgItem.getSts());				}			}			if (msgItem.getFlagStsDate() == 1) {				if (msgItem.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", msgItem.getStsDate());				}			}			if (msgItem.getFlagSysItemId() == 1) {				if (StringUtil.isBlank(msgItem.getSysItemId())) {					sql.append(" and SYS_ITEM_ID is null ");				} else {					sql.append(" and SYS_ITEM_ID=:sysItemId");					sql.setString("sysItemId", msgItem.getSysItemId());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgItem = new MsgItemSVO();				msgItem.setMsgItemId(rs.getString("MSG_ITEM_ID"));				msgItem.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgItem.setPosSysItem(rs.getString("POS_SYS_ITEM"));				msgItem.setPreSysItem(rs.getString("PRE_SYS_ITEM"));				msgItem.setRemarks(rs.getString("REMARKS"));				msgItem.setSortPosition(rs.getString("SORT_POSITION"));				msgItem.setSts(rs.getString("STS"));				msgItem.setStsDate(rs.getTimestamp("STS_DATE"));				msgItem.setSysItemId(rs.getString("SYS_ITEM_ID"));				res.add(msgItem);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgItemSVO msgItem = (MsgItemSVO) vo;		if (StringUtil.isBlank(msgItem.getMsgItemId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE MSG_ITEM SET ");		try {			if (msgItem.getFlagMsgTemplateId() == 1) {				sql.append("MSG_TEMPLATE_ID=:msgTemplateId,");				sql.setLong("msgTemplateId", msgItem.getMsgTemplateId());			}			if (msgItem.getFlagPosSysItem() == 1) {				sql.append("POS_SYS_ITEM=:posSysItem,");				sql.setString("posSysItem", msgItem.getPosSysItem());			}			if (msgItem.getFlagPreSysItem() == 1) {				sql.append("PRE_SYS_ITEM=:preSysItem,");				sql.setString("preSysItem", msgItem.getPreSysItem());			}			if (msgItem.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", msgItem.getRemarks());			}			if (msgItem.getFlagSortPosition() == 1) {				sql.append("SORT_POSITION=:sortPosition,");				sql.setLong("sortPosition", msgItem.getSortPosition());			}			if (msgItem.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", msgItem.getSts());			}			if (msgItem.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", msgItem.getStsDate());			}			if (msgItem.getFlagSysItemId() == 1) {				sql.append("SYS_ITEM_ID=:sysItemId,");				sql.setString("sysItemId", msgItem.getSysItemId());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and MSG_ITEM_ID=:msgItemId");			sql.setLong("msgItemId", msgItem.getMsgItemId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_ITEM(MSG_ITEM_ID,MSG_TEMPLATE_ID,POS_SYS_ITEM,PRE_SYS_ITEM,REMARKS,SORT_POSITION,STS,STS_DATE,SYS_ITEM_ID)");		sql				.append(" VALUES (:msgItemId,:msgTemplateId,:posSysItem,:preSysItem,:remarks,:sortPosition,:sts,:stsDate,:sysItemId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				MsgItemSVO msgItem = (MsgItemSVO) list.get(i);				if (msgItem == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(msgItem.getMsgItemId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(msgItem.getMsgItemId())) {					sql.setNullLong("msgItemId");				} else {					sql.setLong("msgItemId", msgItem.getMsgItemId());				}				if (StringUtil.isBlank(msgItem.getMsgTemplateId())) {					sql.setNullLong("msgTemplateId");				} else {					sql.setLong("msgTemplateId", msgItem.getMsgTemplateId());				}				if (StringUtil.isBlank(msgItem.getPosSysItem())) {					sql.setNullString("posSysItem");				} else {					sql.setString("posSysItem", msgItem.getPosSysItem());				}				if (StringUtil.isBlank(msgItem.getPreSysItem())) {					sql.setNullString("preSysItem");				} else {					sql.setString("preSysItem", msgItem.getPreSysItem());				}				if (StringUtil.isBlank(msgItem.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", msgItem.getRemarks());				}				if (StringUtil.isBlank(msgItem.getSortPosition())) {					sql.setNullLong("sortPosition");				} else {					sql.setLong("sortPosition", msgItem.getSortPosition());				}				if (StringUtil.isBlank(msgItem.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", msgItem.getSts());				}				if (msgItem.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", msgItem.getStsDate());				}				if (StringUtil.isBlank(msgItem.getSysItemId())) {					sql.setNullString("sysItemId");				} else {					sql.setString("sysItemId", msgItem.getSysItemId());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgItemSVO msgItem = (MsgItemSVO) vo;		if (StringUtil.isBlank(msgItem.getMsgItemId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM MSG_ITEM WHERE 1=1  ");		sql.append(" and MSG_ITEM_ID=:msgItemId");		sql.setLong("msgItemId", msgItem.getMsgItemId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// MsgItemSVO msgItem = (MsgItemSVO) vo;	}}