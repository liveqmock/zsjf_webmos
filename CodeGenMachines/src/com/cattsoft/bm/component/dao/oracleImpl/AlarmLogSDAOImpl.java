package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.bm.component.dao.IAlarmLogSDAO;import com.cattsoft.bm.vo.AlarmLogSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法AlarmLogSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class AlarmLogSDAOImpl implements IAlarmLogSDAO{    private static Logger log = Logger.getLogger(AlarmLogSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AlarmLogSVO alarmLog=(AlarmLogSVO) vo;    if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(alarmLog.getCheckpointId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO ALARM_LOG(ALARM_DATE,ALARM_LOG_ID,ALARM_VALUE,CHECKPOINT_ID,CHECK_CYCLE,CHECK_RULE_ID,CHG_SERV_SPEC_ID,DAY,MONTH,OBJECT_ID,OBJECT_TYPE,PRE_ALARM_VALUE,PROD_ID,QUARTER,VALUE,WEEK,YEAR)");sql.append(" VALUES (:alarmDate,:alarmLogId,:alarmValue,:checkpointId,:checkCycle,:checkRuleId,:chgServSpecId,:day,:month,:objectId,:objectType,:preAlarmValue,:prodId,:quarter,:value,:week,:year)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (alarmLog.getAlarmDate() == null) {      sql.setNullDate("alarmDate");     } else {    sql.setTimestamp("alarmDate", alarmLog.getAlarmDate());    }       if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {      sql.setNullLong("alarmLogId");     } else {    sql.setLong("alarmLogId", alarmLog.getAlarmLogId());    }       if (StringUtil.isBlank(alarmLog.getAlarmValue())) {      sql.setNullLong("alarmValue");     } else {    sql.setLong("alarmValue", alarmLog.getAlarmValue());    }       if (StringUtil.isBlank(alarmLog.getCheckpointId())) {      sql.setNullLong("checkpointId");     } else {    sql.setLong("checkpointId", alarmLog.getCheckpointId());    }       if (StringUtil.isBlank(alarmLog.getCheckCycle())) {      sql.setNullString("checkCycle");     } else {    sql.setString("checkCycle", alarmLog.getCheckCycle());    }       if (StringUtil.isBlank(alarmLog.getCheckRuleId())) {      sql.setNullLong("checkRuleId");     } else {    sql.setLong("checkRuleId", alarmLog.getCheckRuleId());    }       if (StringUtil.isBlank(alarmLog.getChgServSpecId())) {      sql.setNullLong("chgServSpecId");     } else {    sql.setLong("chgServSpecId", alarmLog.getChgServSpecId());    }       if (StringUtil.isBlank(alarmLog.getDay())) {      sql.setNullLong("day");     } else {    sql.setLong("day", alarmLog.getDay());    }       if (StringUtil.isBlank(alarmLog.getMonth())) {      sql.setNullLong("month");     } else {    sql.setLong("month", alarmLog.getMonth());    }       if (StringUtil.isBlank(alarmLog.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", alarmLog.getObjectId());    }       if (StringUtil.isBlank(alarmLog.getObjectType())) {      sql.setNullString("objectType");     } else {    sql.setString("objectType", alarmLog.getObjectType());    }       if (StringUtil.isBlank(alarmLog.getPreAlarmValue())) {      sql.setNullLong("preAlarmValue");     } else {    sql.setLong("preAlarmValue", alarmLog.getPreAlarmValue());    }       if (StringUtil.isBlank(alarmLog.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", alarmLog.getProdId());    }       if (StringUtil.isBlank(alarmLog.getQuarter())) {      sql.setNullLong("quarter");     } else {    sql.setLong("quarter", alarmLog.getQuarter());    }       if (StringUtil.isBlank(alarmLog.getValue())) {      sql.setNullLong("value");     } else {    sql.setLong("value", alarmLog.getValue());    }       if (StringUtil.isBlank(alarmLog.getWeek())) {      sql.setNullLong("week");     } else {    sql.setLong("week", alarmLog.getWeek());    }       if (StringUtil.isBlank(alarmLog.getYear())) {      sql.setNullLong("year");     } else {    sql.setLong("year", alarmLog.getYear());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AlarmLogSVO alarmLog=(AlarmLogSVO) vo;    if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(alarmLog.getCheckpointId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ALARM_DATE,ALARM_LOG_ID,ALARM_VALUE,CHECKPOINT_ID,CHECK_CYCLE,CHECK_RULE_ID,CHG_SERV_SPEC_ID,DAY,MONTH,OBJECT_ID,OBJECT_TYPE,PRE_ALARM_VALUE,PROD_ID,QUARTER,VALUE,WEEK,YEAR FROM ALARM_LOG WHERE 1=1  ");sql.append(" and ALARM_LOG_ID=:alarmLogId");sql.setLong("alarmLogId", alarmLog.getAlarmLogId()); sql.append(" and CHECKPOINT_ID=:checkpointId");sql.setLong("checkpointId", alarmLog.getCheckpointId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      alarmLog =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           alarmLog = new AlarmLogSVO();           alarmLog.setAlarmDate(rs.getTimestamp("ALARM_DATE"));           alarmLog.setAlarmLogId(rs.getString("ALARM_LOG_ID"));           alarmLog.setAlarmValue(rs.getString("ALARM_VALUE"));           alarmLog.setCheckpointId(rs.getString("CHECKPOINT_ID"));           alarmLog.setCheckCycle(rs.getString("CHECK_CYCLE"));           alarmLog.setCheckRuleId(rs.getString("CHECK_RULE_ID"));           alarmLog.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           alarmLog.setDay(rs.getString("DAY"));           alarmLog.setMonth(rs.getString("MONTH"));           alarmLog.setObjectId(rs.getString("OBJECT_ID"));           alarmLog.setObjectType(rs.getString("OBJECT_TYPE"));           alarmLog.setPreAlarmValue(rs.getString("PRE_ALARM_VALUE"));           alarmLog.setProdId(rs.getString("PROD_ID"));           alarmLog.setQuarter(rs.getString("QUARTER"));           alarmLog.setValue(rs.getString("VALUE"));           alarmLog.setWeek(rs.getString("WEEK"));           alarmLog.setYear(rs.getString("YEAR"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return alarmLog;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       AlarmLogSVO alarmLog=(AlarmLogSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ALARM_DATE,ALARM_LOG_ID,ALARM_VALUE,CHECKPOINT_ID,CHECK_CYCLE,CHECK_RULE_ID,CHG_SERV_SPEC_ID,DAY,MONTH,OBJECT_ID,OBJECT_TYPE,PRE_ALARM_VALUE,PROD_ID,QUARTER,VALUE,WEEK,YEAR FROM ALARM_LOG WHERE 1=1 ");     try {if (alarmLog.getFlagAlarmDate() == 1) {      if (alarmLog.getAlarmDate() == null) {             sql.append(" and ALARM_DATE is null ");          }      else{             sql.append(" and ALARM_DATE=:alarmDate");             sql.setTimestamp("alarmDate", alarmLog.getAlarmDate());          }   } if (alarmLog.getFlagAlarmLogId() == 1) {      if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {             sql.append(" and ALARM_LOG_ID is null ");          }      else{             sql.append(" and ALARM_LOG_ID=:alarmLogId");             sql.setLong("alarmLogId", alarmLog.getAlarmLogId());          }   } if (alarmLog.getFlagAlarmValue() == 1) {      if (StringUtil.isBlank(alarmLog.getAlarmValue())) {             sql.append(" and ALARM_VALUE is null ");          }      else{             sql.append(" and ALARM_VALUE=:alarmValue");             sql.setLong("alarmValue", alarmLog.getAlarmValue());          }   } if (alarmLog.getFlagCheckpointId() == 1) {      if (StringUtil.isBlank(alarmLog.getCheckpointId())) {             sql.append(" and CHECKPOINT_ID is null ");          }      else{             sql.append(" and CHECKPOINT_ID=:checkpointId");             sql.setLong("checkpointId", alarmLog.getCheckpointId());          }   } if (alarmLog.getFlagCheckCycle() == 1) {      if (StringUtil.isBlank(alarmLog.getCheckCycle())) {             sql.append(" and CHECK_CYCLE is null ");          }      else{             sql.append(" and CHECK_CYCLE=:checkCycle");             sql.setString("checkCycle", alarmLog.getCheckCycle());          }   } if (alarmLog.getFlagCheckRuleId() == 1) {      if (StringUtil.isBlank(alarmLog.getCheckRuleId())) {             sql.append(" and CHECK_RULE_ID is null ");          }      else{             sql.append(" and CHECK_RULE_ID=:checkRuleId");             sql.setLong("checkRuleId", alarmLog.getCheckRuleId());          }   } if (alarmLog.getFlagChgServSpecId() == 1) {      if (StringUtil.isBlank(alarmLog.getChgServSpecId())) {             sql.append(" and CHG_SERV_SPEC_ID is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_ID=:chgServSpecId");             sql.setLong("chgServSpecId", alarmLog.getChgServSpecId());          }   } if (alarmLog.getFlagDay() == 1) {      if (StringUtil.isBlank(alarmLog.getDay())) {             sql.append(" and DAY is null ");          }      else{             sql.append(" and DAY=:day");             sql.setLong("day", alarmLog.getDay());          }   } if (alarmLog.getFlagMonth() == 1) {      if (StringUtil.isBlank(alarmLog.getMonth())) {             sql.append(" and MONTH is null ");          }      else{             sql.append(" and MONTH=:month");             sql.setLong("month", alarmLog.getMonth());          }   } if (alarmLog.getFlagObjectId() == 1) {      if (StringUtil.isBlank(alarmLog.getObjectId())) {             sql.append(" and OBJECT_ID is null ");          }      else{             sql.append(" and OBJECT_ID=:objectId");             sql.setLong("objectId", alarmLog.getObjectId());          }   } if (alarmLog.getFlagObjectType() == 1) {      if (StringUtil.isBlank(alarmLog.getObjectType())) {             sql.append(" and OBJECT_TYPE is null ");          }      else{             sql.append(" and OBJECT_TYPE=:objectType");             sql.setString("objectType", alarmLog.getObjectType());          }   } if (alarmLog.getFlagPreAlarmValue() == 1) {      if (StringUtil.isBlank(alarmLog.getPreAlarmValue())) {             sql.append(" and PRE_ALARM_VALUE is null ");          }      else{             sql.append(" and PRE_ALARM_VALUE=:preAlarmValue");             sql.setLong("preAlarmValue", alarmLog.getPreAlarmValue());          }   } if (alarmLog.getFlagProdId() == 1) {      if (StringUtil.isBlank(alarmLog.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", alarmLog.getProdId());          }   } if (alarmLog.getFlagQuarter() == 1) {      if (StringUtil.isBlank(alarmLog.getQuarter())) {             sql.append(" and QUARTER is null ");          }      else{             sql.append(" and QUARTER=:quarter");             sql.setLong("quarter", alarmLog.getQuarter());          }   } if (alarmLog.getFlagValue() == 1) {      if (StringUtil.isBlank(alarmLog.getValue())) {             sql.append(" and VALUE is null ");          }      else{             sql.append(" and VALUE=:value");             sql.setLong("value", alarmLog.getValue());          }   } if (alarmLog.getFlagWeek() == 1) {      if (StringUtil.isBlank(alarmLog.getWeek())) {             sql.append(" and WEEK is null ");          }      else{             sql.append(" and WEEK=:week");             sql.setLong("week", alarmLog.getWeek());          }   } if (alarmLog.getFlagYear() == 1) {      if (StringUtil.isBlank(alarmLog.getYear())) {             sql.append(" and YEAR is null ");          }      else{             sql.append(" and YEAR=:year");             sql.setLong("year", alarmLog.getYear());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           alarmLog = new AlarmLogSVO();           alarmLog.setAlarmDate(rs.getTimestamp("ALARM_DATE"));           alarmLog.setAlarmLogId(rs.getString("ALARM_LOG_ID"));           alarmLog.setAlarmValue(rs.getString("ALARM_VALUE"));           alarmLog.setCheckpointId(rs.getString("CHECKPOINT_ID"));           alarmLog.setCheckCycle(rs.getString("CHECK_CYCLE"));           alarmLog.setCheckRuleId(rs.getString("CHECK_RULE_ID"));           alarmLog.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           alarmLog.setDay(rs.getString("DAY"));           alarmLog.setMonth(rs.getString("MONTH"));           alarmLog.setObjectId(rs.getString("OBJECT_ID"));           alarmLog.setObjectType(rs.getString("OBJECT_TYPE"));           alarmLog.setPreAlarmValue(rs.getString("PRE_ALARM_VALUE"));           alarmLog.setProdId(rs.getString("PROD_ID"));           alarmLog.setQuarter(rs.getString("QUARTER"));           alarmLog.setValue(rs.getString("VALUE"));           alarmLog.setWeek(rs.getString("WEEK"));           alarmLog.setYear(rs.getString("YEAR"));               res.add(alarmLog);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       AlarmLogSVO alarmLog=(AlarmLogSVO) vo;    if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(alarmLog.getCheckpointId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE ALARM_LOG SET ");     try {if (alarmLog.getFlagAlarmDate() == 1) {sql.append("ALARM_DATE=:alarmDate,"); sql.setTimestamp("alarmDate", alarmLog.getAlarmDate()); } if (alarmLog.getFlagAlarmValue() == 1) {sql.append("ALARM_VALUE=:alarmValue,");sql.setLong("alarmValue", alarmLog.getAlarmValue()); } if (alarmLog.getFlagCheckCycle() == 1) {sql.append("CHECK_CYCLE=:checkCycle,"); sql.setString("checkCycle", alarmLog.getCheckCycle()); } if (alarmLog.getFlagCheckRuleId() == 1) {sql.append("CHECK_RULE_ID=:checkRuleId,");sql.setLong("checkRuleId", alarmLog.getCheckRuleId()); } if (alarmLog.getFlagChgServSpecId() == 1) {sql.append("CHG_SERV_SPEC_ID=:chgServSpecId,");sql.setLong("chgServSpecId", alarmLog.getChgServSpecId()); } if (alarmLog.getFlagDay() == 1) {sql.append("DAY=:day,");sql.setLong("day", alarmLog.getDay()); } if (alarmLog.getFlagMonth() == 1) {sql.append("MONTH=:month,");sql.setLong("month", alarmLog.getMonth()); } if (alarmLog.getFlagObjectId() == 1) {sql.append("OBJECT_ID=:objectId,");sql.setLong("objectId", alarmLog.getObjectId()); } if (alarmLog.getFlagObjectType() == 1) {sql.append("OBJECT_TYPE=:objectType,"); sql.setString("objectType", alarmLog.getObjectType()); } if (alarmLog.getFlagPreAlarmValue() == 1) {sql.append("PRE_ALARM_VALUE=:preAlarmValue,");sql.setLong("preAlarmValue", alarmLog.getPreAlarmValue()); } if (alarmLog.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", alarmLog.getProdId()); } if (alarmLog.getFlagQuarter() == 1) {sql.append("QUARTER=:quarter,");sql.setLong("quarter", alarmLog.getQuarter()); } if (alarmLog.getFlagValue() == 1) {sql.append("VALUE=:value,");sql.setLong("value", alarmLog.getValue()); } if (alarmLog.getFlagWeek() == 1) {sql.append("WEEK=:week,");sql.setLong("week", alarmLog.getWeek()); } if (alarmLog.getFlagYear() == 1) {sql.append("YEAR=:year,");sql.setLong("year", alarmLog.getYear()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and ALARM_LOG_ID=:alarmLogId");sql.setLong("alarmLogId", alarmLog.getAlarmLogId()); sql.append(" and CHECKPOINT_ID=:checkpointId");sql.setLong("checkpointId", alarmLog.getCheckpointId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO ALARM_LOG(ALARM_DATE,ALARM_LOG_ID,ALARM_VALUE,CHECKPOINT_ID,CHECK_CYCLE,CHECK_RULE_ID,CHG_SERV_SPEC_ID,DAY,MONTH,OBJECT_ID,OBJECT_TYPE,PRE_ALARM_VALUE,PROD_ID,QUARTER,VALUE,WEEK,YEAR)");sql.append(" VALUES (:alarmDate,:alarmLogId,:alarmValue,:checkpointId,:checkCycle,:checkRuleId,:chgServSpecId,:day,:month,:objectId,:objectType,:preAlarmValue,:prodId,:quarter,:value,:week,:year)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       AlarmLogSVO alarmLog=(AlarmLogSVO) list.get(i);         if (alarmLog== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(alarmLog.getCheckpointId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (alarmLog.getAlarmDate() == null) {      sql.setNullDate("alarmDate");     } else {    sql.setTimestamp("alarmDate", alarmLog.getAlarmDate());    }       if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {      sql.setNullLong("alarmLogId");     } else {    sql.setLong("alarmLogId", alarmLog.getAlarmLogId());    }       if (StringUtil.isBlank(alarmLog.getAlarmValue())) {      sql.setNullLong("alarmValue");     } else {    sql.setLong("alarmValue", alarmLog.getAlarmValue());    }       if (StringUtil.isBlank(alarmLog.getCheckpointId())) {      sql.setNullLong("checkpointId");     } else {    sql.setLong("checkpointId", alarmLog.getCheckpointId());    }       if (StringUtil.isBlank(alarmLog.getCheckCycle())) {      sql.setNullString("checkCycle");     } else {    sql.setString("checkCycle", alarmLog.getCheckCycle());    }       if (StringUtil.isBlank(alarmLog.getCheckRuleId())) {      sql.setNullLong("checkRuleId");     } else {    sql.setLong("checkRuleId", alarmLog.getCheckRuleId());    }       if (StringUtil.isBlank(alarmLog.getChgServSpecId())) {      sql.setNullLong("chgServSpecId");     } else {    sql.setLong("chgServSpecId", alarmLog.getChgServSpecId());    }       if (StringUtil.isBlank(alarmLog.getDay())) {      sql.setNullLong("day");     } else {    sql.setLong("day", alarmLog.getDay());    }       if (StringUtil.isBlank(alarmLog.getMonth())) {      sql.setNullLong("month");     } else {    sql.setLong("month", alarmLog.getMonth());    }       if (StringUtil.isBlank(alarmLog.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", alarmLog.getObjectId());    }       if (StringUtil.isBlank(alarmLog.getObjectType())) {      sql.setNullString("objectType");     } else {    sql.setString("objectType", alarmLog.getObjectType());    }       if (StringUtil.isBlank(alarmLog.getPreAlarmValue())) {      sql.setNullLong("preAlarmValue");     } else {    sql.setLong("preAlarmValue", alarmLog.getPreAlarmValue());    }       if (StringUtil.isBlank(alarmLog.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", alarmLog.getProdId());    }       if (StringUtil.isBlank(alarmLog.getQuarter())) {      sql.setNullLong("quarter");     } else {    sql.setLong("quarter", alarmLog.getQuarter());    }       if (StringUtil.isBlank(alarmLog.getValue())) {      sql.setNullLong("value");     } else {    sql.setLong("value", alarmLog.getValue());    }       if (StringUtil.isBlank(alarmLog.getWeek())) {      sql.setNullLong("week");     } else {    sql.setLong("week", alarmLog.getWeek());    }       if (StringUtil.isBlank(alarmLog.getYear())) {      sql.setNullLong("year");     } else {    sql.setLong("year", alarmLog.getYear());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AlarmLogSVO alarmLog=(AlarmLogSVO) vo;    if (StringUtil.isBlank(alarmLog.getAlarmLogId())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(alarmLog.getCheckpointId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM ALARM_LOG WHERE 1=1  ");sql.append(" and ALARM_LOG_ID=:alarmLogId");sql.setLong("alarmLogId", alarmLog.getAlarmLogId()); sql.append(" and CHECKPOINT_ID=:checkpointId");sql.setLong("checkpointId", alarmLog.getCheckpointId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     AlarmLogSVO alarmLog=(AlarmLogSVO) vo;       }}
