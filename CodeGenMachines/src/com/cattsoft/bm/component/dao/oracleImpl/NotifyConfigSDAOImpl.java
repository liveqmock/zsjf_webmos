package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.bm.component.dao.INotifyConfigSDAO;import com.cattsoft.bm.vo.NotifyConfigSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法NotifyConfigSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class NotifyConfigSDAOImpl implements INotifyConfigSDAO {	// private static Logger log = Logger.getLogger(NotifyConfigSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		NotifyConfigSVO notifyConfig = (NotifyConfigSVO) vo;		if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO NOTIFY_CONFIG(IS_DEFAULT,NOTIFY_CONFIG_ID,NOTIFY_NBR,NOTIFY_TYPE_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,STS,STS_DATE)");		sql				.append(" VALUES (:isDefault,:notifyConfigId,:notifyNbr,:notifyTypeId,:objectId,:objectType,:remarks,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(notifyConfig.getIsDefault())) {				sql.setNullString("isDefault");			} else {				sql.setString("isDefault", notifyConfig.getIsDefault());			}			if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {				sql.setNullLong("notifyConfigId");			} else {				sql.setLong("notifyConfigId", notifyConfig.getNotifyConfigId());			}			if (StringUtil.isBlank(notifyConfig.getNotifyNbr())) {				sql.setNullString("notifyNbr");			} else {				sql.setString("notifyNbr", notifyConfig.getNotifyNbr());			}			if (StringUtil.isBlank(notifyConfig.getNotifyTypeId())) {				sql.setNullLong("notifyTypeId");			} else {				sql.setLong("notifyTypeId", notifyConfig.getNotifyTypeId());			}			if (StringUtil.isBlank(notifyConfig.getObjectId())) {				sql.setNullLong("objectId");			} else {				sql.setLong("objectId", notifyConfig.getObjectId());			}			if (StringUtil.isBlank(notifyConfig.getObjectType())) {				sql.setNullString("objectType");			} else {				sql.setString("objectType", notifyConfig.getObjectType());			}			if (StringUtil.isBlank(notifyConfig.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", notifyConfig.getRemarks());			}			if (StringUtil.isBlank(notifyConfig.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", notifyConfig.getSts());			}			if (notifyConfig.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", notifyConfig.getStsDate());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		NotifyConfigSVO notifyConfig = (NotifyConfigSVO) vo;		if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT IS_DEFAULT,NOTIFY_CONFIG_ID,NOTIFY_NBR,NOTIFY_TYPE_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,STS,STS_DATE FROM NOTIFY_CONFIG WHERE 1=1  ");		sql.append(" and NOTIFY_CONFIG_ID=:notifyConfigId");		sql.setLong("notifyConfigId", notifyConfig.getNotifyConfigId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		notifyConfig = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				notifyConfig = new NotifyConfigSVO();				notifyConfig.setIsDefault(rs.getString("IS_DEFAULT"));				notifyConfig						.setNotifyConfigId(rs.getString("NOTIFY_CONFIG_ID"));				notifyConfig.setNotifyNbr(rs.getString("NOTIFY_NBR"));				notifyConfig.setNotifyTypeId(rs.getString("NOTIFY_TYPE_ID"));				notifyConfig.setObjectId(rs.getString("OBJECT_ID"));				notifyConfig.setObjectType(rs.getString("OBJECT_TYPE"));				notifyConfig.setRemarks(rs.getString("REMARKS"));				notifyConfig.setSts(rs.getString("STS"));				notifyConfig.setStsDate(rs.getTimestamp("STS_DATE"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return notifyConfig;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		NotifyConfigSVO notifyConfig = (NotifyConfigSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT IS_DEFAULT,NOTIFY_CONFIG_ID,NOTIFY_NBR,NOTIFY_TYPE_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,STS,STS_DATE FROM NOTIFY_CONFIG WHERE 1=1 ");		try {			if (notifyConfig.getFlagIsDefault() == 1) {				if (StringUtil.isBlank(notifyConfig.getIsDefault())) {					sql.append(" and IS_DEFAULT is null ");				} else {					sql.append(" and IS_DEFAULT=:isDefault");					sql.setString("isDefault", notifyConfig.getIsDefault());				}			}			if (notifyConfig.getFlagNotifyConfigId() == 1) {				if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {					sql.append(" and NOTIFY_CONFIG_ID is null ");				} else {					sql.append(" and NOTIFY_CONFIG_ID=:notifyConfigId");					sql.setLong("notifyConfigId", notifyConfig							.getNotifyConfigId());				}			}			if (notifyConfig.getFlagNotifyNbr() == 1) {				if (StringUtil.isBlank(notifyConfig.getNotifyNbr())) {					sql.append(" and NOTIFY_NBR is null ");				} else {					sql.append(" and NOTIFY_NBR=:notifyNbr");					sql.setString("notifyNbr", notifyConfig.getNotifyNbr());				}			}			if (notifyConfig.getFlagNotifyTypeId() == 1) {				if (StringUtil.isBlank(notifyConfig.getNotifyTypeId())) {					sql.append(" and NOTIFY_TYPE_ID is null ");				} else {					sql.append(" and NOTIFY_TYPE_ID=:notifyTypeId");					sql.setLong("notifyTypeId", notifyConfig.getNotifyTypeId());				}			}			if (notifyConfig.getFlagObjectId() == 1) {				if (StringUtil.isBlank(notifyConfig.getObjectId())) {					sql.append(" and OBJECT_ID is null ");				} else {					sql.append(" and OBJECT_ID=:objectId");					sql.setLong("objectId", notifyConfig.getObjectId());				}			}			if (notifyConfig.getFlagObjectType() == 1) {				if (StringUtil.isBlank(notifyConfig.getObjectType())) {					sql.append(" and OBJECT_TYPE is null ");				} else {					sql.append(" and OBJECT_TYPE=:objectType");					sql.setString("objectType", notifyConfig.getObjectType());				}			}			if (notifyConfig.getFlagRemarks() == 1) {				if (StringUtil.isBlank(notifyConfig.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", notifyConfig.getRemarks());				}			}			if (notifyConfig.getFlagSts() == 1) {				if (StringUtil.isBlank(notifyConfig.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", notifyConfig.getSts());				}			}			if (notifyConfig.getFlagStsDate() == 1) {				if (notifyConfig.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", notifyConfig.getStsDate());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				notifyConfig = new NotifyConfigSVO();				notifyConfig.setIsDefault(rs.getString("IS_DEFAULT"));				notifyConfig						.setNotifyConfigId(rs.getString("NOTIFY_CONFIG_ID"));				notifyConfig.setNotifyNbr(rs.getString("NOTIFY_NBR"));				notifyConfig.setNotifyTypeId(rs.getString("NOTIFY_TYPE_ID"));				notifyConfig.setObjectId(rs.getString("OBJECT_ID"));				notifyConfig.setObjectType(rs.getString("OBJECT_TYPE"));				notifyConfig.setRemarks(rs.getString("REMARKS"));				notifyConfig.setSts(rs.getString("STS"));				notifyConfig.setStsDate(rs.getTimestamp("STS_DATE"));				res.add(notifyConfig);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		NotifyConfigSVO notifyConfig = (NotifyConfigSVO) vo;		if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE NOTIFY_CONFIG SET ");		try {			if (notifyConfig.getFlagIsDefault() == 1) {				sql.append("IS_DEFAULT=:isDefault,");				sql.setString("isDefault", notifyConfig.getIsDefault());			}			if (notifyConfig.getFlagNotifyNbr() == 1) {				sql.append("NOTIFY_NBR=:notifyNbr,");				sql.setString("notifyNbr", notifyConfig.getNotifyNbr());			}			if (notifyConfig.getFlagNotifyTypeId() == 1) {				sql.append("NOTIFY_TYPE_ID=:notifyTypeId,");				sql.setLong("notifyTypeId", notifyConfig.getNotifyTypeId());			}			if (notifyConfig.getFlagObjectId() == 1) {				sql.append("OBJECT_ID=:objectId,");				sql.setLong("objectId", notifyConfig.getObjectId());			}			if (notifyConfig.getFlagObjectType() == 1) {				sql.append("OBJECT_TYPE=:objectType,");				sql.setString("objectType", notifyConfig.getObjectType());			}			if (notifyConfig.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", notifyConfig.getRemarks());			}			if (notifyConfig.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", notifyConfig.getSts());			}			if (notifyConfig.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", notifyConfig.getStsDate());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and NOTIFY_CONFIG_ID=:notifyConfigId");			sql.setLong("notifyConfigId", notifyConfig.getNotifyConfigId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO NOTIFY_CONFIG(IS_DEFAULT,NOTIFY_CONFIG_ID,NOTIFY_NBR,NOTIFY_TYPE_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,STS,STS_DATE)");		sql				.append(" VALUES (:isDefault,:notifyConfigId,:notifyNbr,:notifyTypeId,:objectId,:objectType,:remarks,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				NotifyConfigSVO notifyConfig = (NotifyConfigSVO) list.get(i);				if (notifyConfig == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(notifyConfig.getIsDefault())) {					sql.setNullString("isDefault");				} else {					sql.setString("isDefault", notifyConfig.getIsDefault());				}				if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {					sql.setNullLong("notifyConfigId");				} else {					sql.setLong("notifyConfigId", notifyConfig							.getNotifyConfigId());				}				if (StringUtil.isBlank(notifyConfig.getNotifyNbr())) {					sql.setNullString("notifyNbr");				} else {					sql.setString("notifyNbr", notifyConfig.getNotifyNbr());				}				if (StringUtil.isBlank(notifyConfig.getNotifyTypeId())) {					sql.setNullLong("notifyTypeId");				} else {					sql.setLong("notifyTypeId", notifyConfig.getNotifyTypeId());				}				if (StringUtil.isBlank(notifyConfig.getObjectId())) {					sql.setNullLong("objectId");				} else {					sql.setLong("objectId", notifyConfig.getObjectId());				}				if (StringUtil.isBlank(notifyConfig.getObjectType())) {					sql.setNullString("objectType");				} else {					sql.setString("objectType", notifyConfig.getObjectType());				}				if (StringUtil.isBlank(notifyConfig.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", notifyConfig.getRemarks());				}				if (StringUtil.isBlank(notifyConfig.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", notifyConfig.getSts());				}				if (notifyConfig.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", notifyConfig.getStsDate());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		NotifyConfigSVO notifyConfig = (NotifyConfigSVO) vo;		if (StringUtil.isBlank(notifyConfig.getNotifyConfigId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM NOTIFY_CONFIG WHERE 1=1  ");		sql.append(" and NOTIFY_CONFIG_ID=:notifyConfigId");		sql.setLong("notifyConfigId", notifyConfig.getNotifyConfigId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {	}}