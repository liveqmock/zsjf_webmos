package com.cattsoft.bm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.bm.component.dao.IMsgTemplateSDAO;import com.cattsoft.bm.vo.MsgTemplateSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法MsgTemplateSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class MsgTemplateSDAOImpl implements IMsgTemplateSDAO {	// private static Logger log = Logger.getLogger(MsgTemplateSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgTemplateSVO msgTemplate = (MsgTemplateSVO) vo;		if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_TEMPLATE(MSG_TEMPLATE_ID,NAME,NOTIFY_TYPE_ID,REMARKS,STS,STS_DATE)");		sql				.append(" VALUES (:msgTemplateId,:name,:notifyTypeId,:remarks,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {				sql.setNullLong("msgTemplateId");			} else {				sql.setLong("msgTemplateId", msgTemplate.getMsgTemplateId());			}			if (StringUtil.isBlank(msgTemplate.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", msgTemplate.getName());			}			if (StringUtil.isBlank(msgTemplate.getNotifyTypeId())) {				sql.setNullLong("notifyTypeId");			} else {				sql.setLong("notifyTypeId", msgTemplate.getNotifyTypeId());			}			if (StringUtil.isBlank(msgTemplate.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", msgTemplate.getRemarks());			}			if (StringUtil.isBlank(msgTemplate.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", msgTemplate.getSts());			}			if (msgTemplate.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", msgTemplate.getStsDate());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgTemplateSVO msgTemplate = (MsgTemplateSVO) vo;		if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT MSG_TEMPLATE_ID,NAME,NOTIFY_TYPE_ID,REMARKS,STS,STS_DATE FROM MSG_TEMPLATE WHERE 1=1  ");		sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");		sql.setLong("msgTemplateId", msgTemplate.getMsgTemplateId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		msgTemplate = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgTemplate = new MsgTemplateSVO();				msgTemplate.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgTemplate.setName(rs.getString("NAME"));				msgTemplate.setNotifyTypeId(rs.getString("NOTIFY_TYPE_ID"));				msgTemplate.setRemarks(rs.getString("REMARKS"));				msgTemplate.setSts(rs.getString("STS"));				msgTemplate.setStsDate(rs.getTimestamp("STS_DATE"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return msgTemplate;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgTemplateSVO msgTemplate = (MsgTemplateSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT MSG_TEMPLATE_ID,NAME,NOTIFY_TYPE_ID,REMARKS,STS,STS_DATE FROM MSG_TEMPLATE WHERE 1=1 ");		try {			if (msgTemplate.getFlagMsgTemplateId() == 1) {				if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {					sql.append(" and MSG_TEMPLATE_ID is null ");				} else {					sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");					sql							.setLong("msgTemplateId", msgTemplate									.getMsgTemplateId());				}			}			if (msgTemplate.getFlagName() == 1) {				if (StringUtil.isBlank(msgTemplate.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", msgTemplate.getName());				}			}			if (msgTemplate.getFlagNotifyTypeId() == 1) {				if (StringUtil.isBlank(msgTemplate.getNotifyTypeId())) {					sql.append(" and NOTIFY_TYPE_ID is null ");				} else {					sql.append(" and NOTIFY_TYPE_ID=:notifyTypeId");					sql.setLong("notifyTypeId", msgTemplate.getNotifyTypeId());				}			}			if (msgTemplate.getFlagRemarks() == 1) {				if (StringUtil.isBlank(msgTemplate.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", msgTemplate.getRemarks());				}			}			if (msgTemplate.getFlagSts() == 1) {				if (StringUtil.isBlank(msgTemplate.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", msgTemplate.getSts());				}			}			if (msgTemplate.getFlagStsDate() == 1) {				if (msgTemplate.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", msgTemplate.getStsDate());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msgTemplate = new MsgTemplateSVO();				msgTemplate.setMsgTemplateId(rs.getString("MSG_TEMPLATE_ID"));				msgTemplate.setName(rs.getString("NAME"));				msgTemplate.setNotifyTypeId(rs.getString("NOTIFY_TYPE_ID"));				msgTemplate.setRemarks(rs.getString("REMARKS"));				msgTemplate.setSts(rs.getString("STS"));				msgTemplate.setStsDate(rs.getTimestamp("STS_DATE"));				res.add(msgTemplate);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgTemplateSVO msgTemplate = (MsgTemplateSVO) vo;		if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE MSG_TEMPLATE SET ");		try {			if (msgTemplate.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", msgTemplate.getName());			}			if (msgTemplate.getFlagNotifyTypeId() == 1) {				sql.append("NOTIFY_TYPE_ID=:notifyTypeId,");				sql.setLong("notifyTypeId", msgTemplate.getNotifyTypeId());			}			if (msgTemplate.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", msgTemplate.getRemarks());			}			if (msgTemplate.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", msgTemplate.getSts());			}			if (msgTemplate.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", msgTemplate.getStsDate());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");			sql.setLong("msgTemplateId", msgTemplate.getMsgTemplateId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MSG_TEMPLATE(MSG_TEMPLATE_ID,NAME,NOTIFY_TYPE_ID,REMARKS,STS,STS_DATE)");		sql				.append(" VALUES (:msgTemplateId,:name,:notifyTypeId,:remarks,:sts,:stsDate)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				MsgTemplateSVO msgTemplate = (MsgTemplateSVO) list.get(i);				if (msgTemplate == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {					sql.setNullLong("msgTemplateId");				} else {					sql							.setLong("msgTemplateId", msgTemplate									.getMsgTemplateId());				}				if (StringUtil.isBlank(msgTemplate.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", msgTemplate.getName());				}				if (StringUtil.isBlank(msgTemplate.getNotifyTypeId())) {					sql.setNullLong("notifyTypeId");				} else {					sql.setLong("notifyTypeId", msgTemplate.getNotifyTypeId());				}				if (StringUtil.isBlank(msgTemplate.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", msgTemplate.getRemarks());				}				if (StringUtil.isBlank(msgTemplate.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", msgTemplate.getSts());				}				if (msgTemplate.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", msgTemplate.getStsDate());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsgTemplateSVO msgTemplate = (MsgTemplateSVO) vo;		if (StringUtil.isBlank(msgTemplate.getMsgTemplateId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM MSG_TEMPLATE WHERE 1=1  ");		sql.append(" and MSG_TEMPLATE_ID=:msgTemplateId");		sql.setLong("msgTemplateId", msgTemplate.getMsgTemplateId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// MsgTemplateSVO msgTemplate=(MsgTemplateSVO) vo;	}}