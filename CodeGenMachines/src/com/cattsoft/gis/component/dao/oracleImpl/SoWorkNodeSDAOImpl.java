package com.cattsoft.gis.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.gis.component.dao.ISoWorkNodeSDAO;import com.cattsoft.gis.vo.SoWorkNodeSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil;/** * 方法SoWorkNodeSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class SoWorkNodeSDAOImpl implements ISoWorkNodeSDAO {	// private static Logger log = Logger.getLogger(SoWorkNodeSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) vo;		if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_WORK_NODE(AREA_ID,LATITUDE,LOCAL_NET_ID,LONGITUDE,NAME,NODE_ADDR,NODE_OBJ_ID,NODE_OBJ_TYPE,NODE_TYPE,REMARKS,SO_FAULT_ID,SO_NBR,SO_WORK_NODE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_NODE_ID,WO_NBR)");		sql				.append(" VALUES (:areaId,:latitude,:localNetId,:longitude,:name,:nodeAddr,:nodeObjId,:nodeObjType,:nodeType,:remarks,:soFaultId,:soNbr,:soWorkNodeId,:sts,:stsDate,:workAreaId,:workNodeId,:woNbr)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(soWorkNode.getAreaId())) {				sql.setNullLong("areaId");			} else {				sql.setLong("areaId", soWorkNode.getAreaId());			}			if (StringUtil.isBlank(soWorkNode.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", soWorkNode.getLocalNetId());			}			if (StringUtil.isBlank(soWorkNode.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", soWorkNode.getName());			}			if (StringUtil.isBlank(soWorkNode.getNodeAddr())) {				sql.setNullString("nodeAddr");			} else {				sql.setString("nodeAddr", soWorkNode.getNodeAddr());			}			if (StringUtil.isBlank(soWorkNode.getNodeObjId())) {				sql.setNullString("nodeObjId");			} else {				sql.setString("nodeObjId", soWorkNode.getNodeObjId());			}			if (StringUtil.isBlank(soWorkNode.getNodeObjType())) {				sql.setNullString("nodeObjType");			} else {				sql.setString("nodeObjType", soWorkNode.getNodeObjType());			}			if (StringUtil.isBlank(soWorkNode.getNodeType())) {				sql.setNullString("nodeType");			} else {				sql.setString("nodeType", soWorkNode.getNodeType());			}			if (StringUtil.isBlank(soWorkNode.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", soWorkNode.getRemarks());			}			if (StringUtil.isBlank(soWorkNode.getSoFaultId())) {				sql.setNullLong("soFaultId");			} else {				sql.setLong("soFaultId", soWorkNode.getSoFaultId());			}			if (StringUtil.isBlank(soWorkNode.getSoNbr())) {				sql.setNullString("soNbr");			} else {				sql.setString("soNbr", soWorkNode.getSoNbr());			}			if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {				sql.setNullLong("soWorkNodeId");			} else {				sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());			}			if (StringUtil.isBlank(soWorkNode.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", soWorkNode.getSts());			}			if (soWorkNode.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", soWorkNode.getStsDate());			}			if (StringUtil.isBlank(soWorkNode.getWorkAreaId())) {				sql.setNullLong("workAreaId");			} else {				sql.setLong("workAreaId", soWorkNode.getWorkAreaId());			}			if (StringUtil.isBlank(soWorkNode.getWorkNodeId())) {				sql.setNullLong("workNodeId");			} else {				sql.setLong("workNodeId", soWorkNode.getWorkNodeId());			}			if (StringUtil.isBlank(soWorkNode.getWoNbr())) {				sql.setNullLong("woNbr");			} else {				sql.setLong("woNbr", soWorkNode.getWoNbr());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) vo;		if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT AREA_ID,LATITUDE,LOCAL_NET_ID,LONGITUDE,NAME,NODE_ADDR,NODE_OBJ_ID,NODE_OBJ_TYPE,NODE_TYPE,REMARKS,SO_FAULT_ID,SO_NBR,SO_WORK_NODE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_NODE_ID,WO_NBR FROM SO_WORK_NODE WHERE 1=1  ");		sql.append(" and SO_WORK_NODE_ID=:soWorkNodeId");		sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		soWorkNode = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soWorkNode = new SoWorkNodeSVO();				soWorkNode.setAreaId(rs.getString("AREA_ID"));				soWorkNode.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soWorkNode.setName(rs.getString("NAME"));				soWorkNode.setNodeAddr(rs.getString("NODE_ADDR"));				soWorkNode.setNodeObjId(rs.getString("NODE_OBJ_ID"));				soWorkNode.setNodeObjType(rs.getString("NODE_OBJ_TYPE"));				soWorkNode.setNodeType(rs.getString("NODE_TYPE"));				soWorkNode.setRemarks(rs.getString("REMARKS"));				soWorkNode.setSoFaultId(rs.getString("SO_FAULT_ID"));				soWorkNode.setSoNbr(rs.getString("SO_NBR"));				soWorkNode.setSoWorkNodeId(rs.getString("SO_WORK_NODE_ID"));				soWorkNode.setSts(rs.getString("STS"));				soWorkNode.setStsDate(rs.getTimestamp("STS_DATE"));				soWorkNode.setWorkAreaId(rs.getString("WORK_AREA_ID"));				soWorkNode.setWorkNodeId(rs.getString("WORK_NODE_ID"));				soWorkNode.setWoNbr(rs.getString("WO_NBR"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return soWorkNode;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT AREA_ID,LATITUDE,LOCAL_NET_ID,LONGITUDE,NAME,NODE_ADDR,NODE_OBJ_ID,NODE_OBJ_TYPE,NODE_TYPE,REMARKS,SO_FAULT_ID,SO_NBR,SO_WORK_NODE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_NODE_ID,WO_NBR FROM SO_WORK_NODE WHERE 1=1 ");		try {			if (soWorkNode.getFlagAreaId() == 1) {				if (StringUtil.isBlank(soWorkNode.getAreaId())) {					sql.append(" and AREA_ID is null ");				} else {					sql.append(" and AREA_ID=:areaId");					sql.setLong("areaId", soWorkNode.getAreaId());				}			}			if (soWorkNode.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(soWorkNode.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", soWorkNode.getLocalNetId());				}			}			if (soWorkNode.getFlagName() == 1) {				if (StringUtil.isBlank(soWorkNode.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", soWorkNode.getName());				}			}			if (soWorkNode.getFlagNodeAddr() == 1) {				if (StringUtil.isBlank(soWorkNode.getNodeAddr())) {					sql.append(" and NODE_ADDR is null ");				} else {					sql.append(" and NODE_ADDR=:nodeAddr");					sql.setString("nodeAddr", soWorkNode.getNodeAddr());				}			}			if (soWorkNode.getFlagNodeObjId() == 1) {				if (StringUtil.isBlank(soWorkNode.getNodeObjId())) {					sql.append(" and NODE_OBJ_ID is null ");				} else {					sql.append(" and NODE_OBJ_ID=:nodeObjId");					sql.setString("nodeObjId", soWorkNode.getNodeObjId());				}			}			if (soWorkNode.getFlagNodeObjType() == 1) {				if (StringUtil.isBlank(soWorkNode.getNodeObjType())) {					sql.append(" and NODE_OBJ_TYPE is null ");				} else {					sql.append(" and NODE_OBJ_TYPE=:nodeObjType");					sql.setString("nodeObjType", soWorkNode.getNodeObjType());				}			}			if (soWorkNode.getFlagNodeType() == 1) {				if (StringUtil.isBlank(soWorkNode.getNodeType())) {					sql.append(" and NODE_TYPE is null ");				} else {					sql.append(" and NODE_TYPE=:nodeType");					sql.setString("nodeType", soWorkNode.getNodeType());				}			}			if (soWorkNode.getFlagRemarks() == 1) {				if (StringUtil.isBlank(soWorkNode.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", soWorkNode.getRemarks());				}			}			if (soWorkNode.getFlagSoFaultId() == 1) {				if (StringUtil.isBlank(soWorkNode.getSoFaultId())) {					sql.append(" and SO_FAULT_ID is null ");				} else {					sql.append(" and SO_FAULT_ID=:soFaultId");					sql.setLong("soFaultId", soWorkNode.getSoFaultId());				}			}			if (soWorkNode.getFlagSoNbr() == 1) {				if (StringUtil.isBlank(soWorkNode.getSoNbr())) {					sql.append(" and SO_NBR is null ");				} else {					sql.append(" and SO_NBR=:soNbr");					sql.setString("soNbr", soWorkNode.getSoNbr());				}			}			if (soWorkNode.getFlagSoWorkNodeId() == 1) {				if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {					sql.append(" and SO_WORK_NODE_ID is null ");				} else {					sql.append(" and SO_WORK_NODE_ID=:soWorkNodeId");					sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());				}			}			if (soWorkNode.getFlagSts() == 1) {				if (StringUtil.isBlank(soWorkNode.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", soWorkNode.getSts());				}			}			if (soWorkNode.getFlagStsDate() == 1) {				if (soWorkNode.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", soWorkNode.getStsDate());				}			}			if (soWorkNode.getFlagWorkAreaId() == 1) {				if (StringUtil.isBlank(soWorkNode.getWorkAreaId())) {					sql.append(" and WORK_AREA_ID is null ");				} else {					sql.append(" and WORK_AREA_ID=:workAreaId");					sql.setLong("workAreaId", soWorkNode.getWorkAreaId());				}			}			if (soWorkNode.getFlagWorkNodeId() == 1) {				if (StringUtil.isBlank(soWorkNode.getWorkNodeId())) {					sql.append(" and WORK_NODE_ID is null ");				} else {					sql.append(" and WORK_NODE_ID=:workNodeId");					sql.setLong("workNodeId", soWorkNode.getWorkNodeId());				}			}			if (soWorkNode.getFlagWoNbr() == 1) {				if (StringUtil.isBlank(soWorkNode.getWoNbr())) {					sql.append(" and WO_NBR is null ");				} else {					sql.append(" and WO_NBR=:woNbr");					sql.setLong("woNbr", soWorkNode.getWoNbr());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soWorkNode = new SoWorkNodeSVO();				soWorkNode.setAreaId(rs.getString("AREA_ID"));				soWorkNode.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soWorkNode.setName(rs.getString("NAME"));				soWorkNode.setNodeAddr(rs.getString("NODE_ADDR"));				soWorkNode.setNodeObjId(rs.getString("NODE_OBJ_ID"));				soWorkNode.setNodeObjType(rs.getString("NODE_OBJ_TYPE"));				soWorkNode.setNodeType(rs.getString("NODE_TYPE"));				soWorkNode.setRemarks(rs.getString("REMARKS"));				soWorkNode.setSoFaultId(rs.getString("SO_FAULT_ID"));				soWorkNode.setSoNbr(rs.getString("SO_NBR"));				soWorkNode.setSoWorkNodeId(rs.getString("SO_WORK_NODE_ID"));				soWorkNode.setSts(rs.getString("STS"));				soWorkNode.setStsDate(rs.getTimestamp("STS_DATE"));				soWorkNode.setWorkAreaId(rs.getString("WORK_AREA_ID"));				soWorkNode.setWorkNodeId(rs.getString("WORK_NODE_ID"));				soWorkNode.setWoNbr(rs.getString("WO_NBR"));				res.add(soWorkNode);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) vo;		if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE SO_WORK_NODE SET ");		try {			if (soWorkNode.getFlagAreaId() == 1) {				sql.append("AREA_ID=:areaId,");				sql.setLong("areaId", soWorkNode.getAreaId());			}			if (soWorkNode.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", soWorkNode.getLocalNetId());			}			if (soWorkNode.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", soWorkNode.getName());			}			if (soWorkNode.getFlagNodeAddr() == 1) {				sql.append("NODE_ADDR=:nodeAddr,");				sql.setString("nodeAddr", soWorkNode.getNodeAddr());			}			if (soWorkNode.getFlagNodeObjId() == 1) {				sql.append("NODE_OBJ_ID=:nodeObjId,");				sql.setString("nodeObjId", soWorkNode.getNodeObjId());			}			if (soWorkNode.getFlagNodeObjType() == 1) {				sql.append("NODE_OBJ_TYPE=:nodeObjType,");				sql.setString("nodeObjType", soWorkNode.getNodeObjType());			}			if (soWorkNode.getFlagNodeType() == 1) {				sql.append("NODE_TYPE=:nodeType,");				sql.setString("nodeType", soWorkNode.getNodeType());			}			if (soWorkNode.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", soWorkNode.getRemarks());			}			if (soWorkNode.getFlagSoFaultId() == 1) {				sql.append("SO_FAULT_ID=:soFaultId,");				sql.setLong("soFaultId", soWorkNode.getSoFaultId());			}			if (soWorkNode.getFlagSoNbr() == 1) {				sql.append("SO_NBR=:soNbr,");				sql.setString("soNbr", soWorkNode.getSoNbr());			}			if (soWorkNode.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", soWorkNode.getSts());			}			if (soWorkNode.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", soWorkNode.getStsDate());			}			if (soWorkNode.getFlagWorkAreaId() == 1) {				sql.append("WORK_AREA_ID=:workAreaId,");				sql.setLong("workAreaId", soWorkNode.getWorkAreaId());			}			if (soWorkNode.getFlagWorkNodeId() == 1) {				sql.append("WORK_NODE_ID=:workNodeId,");				sql.setLong("workNodeId", soWorkNode.getWorkNodeId());			}			if (soWorkNode.getFlagWoNbr() == 1) {				sql.append("WO_NBR=:woNbr,");				sql.setLong("woNbr", soWorkNode.getWoNbr());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and SO_WORK_NODE_ID=:soWorkNodeId");			sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_WORK_NODE(AREA_ID,LATITUDE,LOCAL_NET_ID,LONGITUDE,NAME,NODE_ADDR,NODE_OBJ_ID,NODE_OBJ_TYPE,NODE_TYPE,REMARKS,SO_FAULT_ID,SO_NBR,SO_WORK_NODE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_NODE_ID,WO_NBR)");		sql				.append(" VALUES (:areaId,:latitude,:localNetId,:longitude,:name,:nodeAddr,:nodeObjId,:nodeObjType,:nodeType,:remarks,:soFaultId,:soNbr,:soWorkNodeId,:sts,:stsDate,:workAreaId,:workNodeId,:woNbr)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) list.get(i);				if (soWorkNode == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(soWorkNode.getAreaId())) {					sql.setNullLong("areaId");				} else {					sql.setLong("areaId", soWorkNode.getAreaId());				}				if (StringUtil.isBlank(soWorkNode.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", soWorkNode.getLocalNetId());				}				if (StringUtil.isBlank(soWorkNode.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", soWorkNode.getName());				}				if (StringUtil.isBlank(soWorkNode.getNodeAddr())) {					sql.setNullString("nodeAddr");				} else {					sql.setString("nodeAddr", soWorkNode.getNodeAddr());				}				if (StringUtil.isBlank(soWorkNode.getNodeObjId())) {					sql.setNullString("nodeObjId");				} else {					sql.setString("nodeObjId", soWorkNode.getNodeObjId());				}				if (StringUtil.isBlank(soWorkNode.getNodeObjType())) {					sql.setNullString("nodeObjType");				} else {					sql.setString("nodeObjType", soWorkNode.getNodeObjType());				}				if (StringUtil.isBlank(soWorkNode.getNodeType())) {					sql.setNullString("nodeType");				} else {					sql.setString("nodeType", soWorkNode.getNodeType());				}				if (StringUtil.isBlank(soWorkNode.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", soWorkNode.getRemarks());				}				if (StringUtil.isBlank(soWorkNode.getSoFaultId())) {					sql.setNullLong("soFaultId");				} else {					sql.setLong("soFaultId", soWorkNode.getSoFaultId());				}				if (StringUtil.isBlank(soWorkNode.getSoNbr())) {					sql.setNullString("soNbr");				} else {					sql.setString("soNbr", soWorkNode.getSoNbr());				}				if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {					sql.setNullLong("soWorkNodeId");				} else {					sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());				}				if (StringUtil.isBlank(soWorkNode.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", soWorkNode.getSts());				}				if (soWorkNode.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", soWorkNode.getStsDate());				}				if (StringUtil.isBlank(soWorkNode.getWorkAreaId())) {					sql.setNullLong("workAreaId");				} else {					sql.setLong("workAreaId", soWorkNode.getWorkAreaId());				}				if (StringUtil.isBlank(soWorkNode.getWorkNodeId())) {					sql.setNullLong("workNodeId");				} else {					sql.setLong("workNodeId", soWorkNode.getWorkNodeId());				}				if (StringUtil.isBlank(soWorkNode.getWoNbr())) {					sql.setNullLong("woNbr");				} else {					sql.setLong("woNbr", soWorkNode.getWoNbr());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoWorkNodeSVO soWorkNode = (SoWorkNodeSVO) vo;		if (StringUtil.isBlank(soWorkNode.getSoWorkNodeId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM SO_WORK_NODE WHERE 1=1  ");		sql.append(" and SO_WORK_NODE_ID=:soWorkNodeId");		sql.setLong("soWorkNodeId", soWorkNode.getSoWorkNodeId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// SoWorkNodeSVO soWorkNode=(SoWorkNodeSVO) vo;	}}