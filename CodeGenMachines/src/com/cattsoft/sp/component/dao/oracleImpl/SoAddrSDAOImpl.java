package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoAddrSDAO;import com.cattsoft.sp.vo.SoAddrSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoAddrSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoAddrSDAOImpl implements ISoAddrSDAO{    private static Logger log = Logger.getLogger(SoAddrSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoAddrSVO soAddr=(SoAddrSVO) vo;    if (StringUtil.isBlank(soAddr.getSoAddrId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_ADDR(ACT_TYPE,ADDR_ID,ADDR_INFO,AREA_ID,AZ_FLAG,BRANCH_ID,BUILDING_ID,BUILDING_NAME,CHANGED_FLAG,DEVICE_ID,DISTRICT_ID,DISTRICT_NAME,EXCH_ID,LOCAL_NET_ID,MAINT_AREA_ID,MS_AREA_ID,MS_AREA_NAME,MS_STAFF_ID,MS_STAFF_NAME,MT_AREA_NAME,MT_STAFF_ID,MT_STAFF_NAME,NO_FLAG,POST_CODE,PROJECT_ID,REF_ACC_NBR,SERV_DEPT_ID,SITUATED,SO_ADDR_ID,SO_NBR,STS,STS_DATE,TWO_EXCH_FLAG,WO_ACTION)");sql.append(" VALUES (:actType,:addrId,:addrInfo,:areaId,:azFlag,:branchId,:buildingId,:buildingName,:changedFlag,:deviceId,:districtId,:districtName,:exchId,:localNetId,:maintAreaId,:msAreaId,:msAreaName,:msStaffId,:msStaffName,:mtAreaName,:mtStaffId,:mtStaffName,:noFlag,:postCode,:projectId,:refAccNbr,:servDeptId,:situated,:soAddrId,:soNbr,:sts,:stsDate,:twoExchFlag,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(soAddr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soAddr.getActType());    }       if (StringUtil.isBlank(soAddr.getAddrId())) {      sql.setNullLong("addrId");     } else {    sql.setLong("addrId", soAddr.getAddrId());    }       if (StringUtil.isBlank(soAddr.getAddrInfo())) {      sql.setNullString("addrInfo");     } else {    sql.setString("addrInfo", soAddr.getAddrInfo());    }       if (StringUtil.isBlank(soAddr.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", soAddr.getAreaId());    }       if (StringUtil.isBlank(soAddr.getAzFlag())) {      sql.setNullString("azFlag");     } else {    sql.setString("azFlag", soAddr.getAzFlag());    }       if (StringUtil.isBlank(soAddr.getBranchId())) {      sql.setNullLong("branchId");     } else {    sql.setLong("branchId", soAddr.getBranchId());    }       if (StringUtil.isBlank(soAddr.getBuildingId())) {      sql.setNullLong("buildingId");     } else {    sql.setLong("buildingId", soAddr.getBuildingId());    }       if (StringUtil.isBlank(soAddr.getBuildingName())) {      sql.setNullString("buildingName");     } else {    sql.setString("buildingName", soAddr.getBuildingName());    }       if (StringUtil.isBlank(soAddr.getChangedFlag())) {      sql.setNullString("changedFlag");     } else {    sql.setString("changedFlag", soAddr.getChangedFlag());    }       if (StringUtil.isBlank(soAddr.getDeviceId())) {      sql.setNullLong("deviceId");     } else {    sql.setLong("deviceId", soAddr.getDeviceId());    }       if (StringUtil.isBlank(soAddr.getDistrictId())) {      sql.setNullLong("districtId");     } else {    sql.setLong("districtId", soAddr.getDistrictId());    }       if (StringUtil.isBlank(soAddr.getDistrictName())) {      sql.setNullString("districtName");     } else {    sql.setString("districtName", soAddr.getDistrictName());    }       if (StringUtil.isBlank(soAddr.getExchId())) {      sql.setNullLong("exchId");     } else {    sql.setLong("exchId", soAddr.getExchId());    }       if (StringUtil.isBlank(soAddr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soAddr.getLocalNetId());    }       if (StringUtil.isBlank(soAddr.getMaintAreaId())) {      sql.setNullLong("maintAreaId");     } else {    sql.setLong("maintAreaId", soAddr.getMaintAreaId());    }       if (StringUtil.isBlank(soAddr.getMsAreaId())) {      sql.setNullLong("msAreaId");     } else {    sql.setLong("msAreaId", soAddr.getMsAreaId());    }       if (StringUtil.isBlank(soAddr.getMsAreaName())) {      sql.setNullString("msAreaName");     } else {    sql.setString("msAreaName", soAddr.getMsAreaName());    }       if (StringUtil.isBlank(soAddr.getMsStaffId())) {      sql.setNullLong("msStaffId");     } else {    sql.setLong("msStaffId", soAddr.getMsStaffId());    }       if (StringUtil.isBlank(soAddr.getMsStaffName())) {      sql.setNullString("msStaffName");     } else {    sql.setString("msStaffName", soAddr.getMsStaffName());    }       if (StringUtil.isBlank(soAddr.getMtAreaName())) {      sql.setNullString("mtAreaName");     } else {    sql.setString("mtAreaName", soAddr.getMtAreaName());    }       if (StringUtil.isBlank(soAddr.getMtStaffId())) {      sql.setNullLong("mtStaffId");     } else {    sql.setLong("mtStaffId", soAddr.getMtStaffId());    }       if (StringUtil.isBlank(soAddr.getMtStaffName())) {      sql.setNullString("mtStaffName");     } else {    sql.setString("mtStaffName", soAddr.getMtStaffName());    }       if (StringUtil.isBlank(soAddr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soAddr.getNoFlag());    }       if (StringUtil.isBlank(soAddr.getPostCode())) {      sql.setNullString("postCode");     } else {    sql.setString("postCode", soAddr.getPostCode());    }       if (StringUtil.isBlank(soAddr.getProjectId())) {      sql.setNullLong("projectId");     } else {    sql.setLong("projectId", soAddr.getProjectId());    }       if (StringUtil.isBlank(soAddr.getRefAccNbr())) {      sql.setNullString("refAccNbr");     } else {    sql.setString("refAccNbr", soAddr.getRefAccNbr());    }       if (StringUtil.isBlank(soAddr.getServDeptId())) {      sql.setNullLong("servDeptId");     } else {    sql.setLong("servDeptId", soAddr.getServDeptId());    }       if (StringUtil.isBlank(soAddr.getSituated())) {      sql.setNullString("situated");     } else {    sql.setString("situated", soAddr.getSituated());    }       if (StringUtil.isBlank(soAddr.getSoAddrId())) {      sql.setNullLong("soAddrId");     } else {    sql.setLong("soAddrId", soAddr.getSoAddrId());    }       if (StringUtil.isBlank(soAddr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soAddr.getSoNbr());    }       if (StringUtil.isBlank(soAddr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soAddr.getSts());    }    if (soAddr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soAddr.getStsDate());    }       if (StringUtil.isBlank(soAddr.getTwoExchFlag())) {      sql.setNullString("twoExchFlag");     } else {    sql.setString("twoExchFlag", soAddr.getTwoExchFlag());    }       if (StringUtil.isBlank(soAddr.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", soAddr.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoAddrSVO soAddr=(SoAddrSVO) vo;    if (StringUtil.isBlank(soAddr.getSoAddrId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACT_TYPE,ADDR_ID,ADDR_INFO,AREA_ID,AZ_FLAG,BRANCH_ID,BUILDING_ID,BUILDING_NAME,CHANGED_FLAG,DEVICE_ID,DISTRICT_ID,DISTRICT_NAME,EXCH_ID,LOCAL_NET_ID,MAINT_AREA_ID,MS_AREA_ID,MS_AREA_NAME,MS_STAFF_ID,MS_STAFF_NAME,MT_AREA_NAME,MT_STAFF_ID,MT_STAFF_NAME,NO_FLAG,POST_CODE,PROJECT_ID,REF_ACC_NBR,SERV_DEPT_ID,SITUATED,SO_ADDR_ID,SO_NBR,STS,STS_DATE,TWO_EXCH_FLAG,WO_ACTION FROM SO_ADDR WHERE 1=1  ");sql.append(" and SO_ADDR_ID=:soAddrId");sql.setLong("soAddrId", soAddr.getSoAddrId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      soAddr =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           soAddr = new SoAddrSVO();           soAddr.setActType(rs.getString("ACT_TYPE"));           soAddr.setAddrId(rs.getString("ADDR_ID"));           soAddr.setAddrInfo(rs.getString("ADDR_INFO"));           soAddr.setAreaId(rs.getString("AREA_ID"));           soAddr.setAzFlag(rs.getString("AZ_FLAG"));           soAddr.setBranchId(rs.getString("BRANCH_ID"));           soAddr.setBuildingId(rs.getString("BUILDING_ID"));           soAddr.setBuildingName(rs.getString("BUILDING_NAME"));           soAddr.setChangedFlag(rs.getString("CHANGED_FLAG"));           soAddr.setDeviceId(rs.getString("DEVICE_ID"));           soAddr.setDistrictId(rs.getString("DISTRICT_ID"));           soAddr.setDistrictName(rs.getString("DISTRICT_NAME"));           soAddr.setExchId(rs.getString("EXCH_ID"));           soAddr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soAddr.setMaintAreaId(rs.getString("MAINT_AREA_ID"));           soAddr.setMsAreaId(rs.getString("MS_AREA_ID"));           soAddr.setMsAreaName(rs.getString("MS_AREA_NAME"));           soAddr.setMsStaffId(rs.getString("MS_STAFF_ID"));           soAddr.setMsStaffName(rs.getString("MS_STAFF_NAME"));           soAddr.setMtAreaName(rs.getString("MT_AREA_NAME"));           soAddr.setMtStaffId(rs.getString("MT_STAFF_ID"));           soAddr.setMtStaffName(rs.getString("MT_STAFF_NAME"));           soAddr.setNoFlag(rs.getString("NO_FLAG"));           soAddr.setPostCode(rs.getString("POST_CODE"));           soAddr.setProjectId(rs.getString("PROJECT_ID"));           soAddr.setRefAccNbr(rs.getString("REF_ACC_NBR"));           soAddr.setServDeptId(rs.getString("SERV_DEPT_ID"));           soAddr.setSituated(rs.getString("SITUATED"));           soAddr.setSoAddrId(rs.getString("SO_ADDR_ID"));           soAddr.setSoNbr(rs.getString("SO_NBR"));           soAddr.setSts(rs.getString("STS"));           soAddr.setStsDate(rs.getTimestamp("STS_DATE"));           soAddr.setTwoExchFlag(rs.getString("TWO_EXCH_FLAG"));           soAddr.setWoAction(rs.getString("WO_ACTION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return soAddr;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoAddrSVO soAddr=(SoAddrSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,ADDR_ID,ADDR_INFO,AREA_ID,AZ_FLAG,BRANCH_ID,BUILDING_ID,BUILDING_NAME,CHANGED_FLAG,DEVICE_ID,DISTRICT_ID,DISTRICT_NAME,EXCH_ID,LOCAL_NET_ID,MAINT_AREA_ID,MS_AREA_ID,MS_AREA_NAME,MS_STAFF_ID,MS_STAFF_NAME,MT_AREA_NAME,MT_STAFF_ID,MT_STAFF_NAME,NO_FLAG,POST_CODE,PROJECT_ID,REF_ACC_NBR,SERV_DEPT_ID,SITUATED,SO_ADDR_ID,SO_NBR,STS,STS_DATE,TWO_EXCH_FLAG,WO_ACTION FROM SO_ADDR WHERE 1=1 ");     try {if (soAddr.getFlagActType() == 1) {      if (StringUtil.isBlank(soAddr.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", soAddr.getActType());          }   } if (soAddr.getFlagAddrId() == 1) {      if (StringUtil.isBlank(soAddr.getAddrId())) {             sql.append(" and ADDR_ID is null ");          }      else{             sql.append(" and ADDR_ID=:addrId");             sql.setLong("addrId", soAddr.getAddrId());          }   } if (soAddr.getFlagAddrInfo() == 1) {      if (StringUtil.isBlank(soAddr.getAddrInfo())) {             sql.append(" and ADDR_INFO is null ");          }      else{             sql.append(" and ADDR_INFO=:addrInfo");             sql.setString("addrInfo", soAddr.getAddrInfo());          }   } if (soAddr.getFlagAreaId() == 1) {      if (StringUtil.isBlank(soAddr.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", soAddr.getAreaId());          }   } if (soAddr.getFlagAzFlag() == 1) {      if (StringUtil.isBlank(soAddr.getAzFlag())) {             sql.append(" and AZ_FLAG is null ");          }      else{             sql.append(" and AZ_FLAG=:azFlag");             sql.setString("azFlag", soAddr.getAzFlag());          }   } if (soAddr.getFlagBranchId() == 1) {      if (StringUtil.isBlank(soAddr.getBranchId())) {             sql.append(" and BRANCH_ID is null ");          }      else{             sql.append(" and BRANCH_ID=:branchId");             sql.setLong("branchId", soAddr.getBranchId());          }   } if (soAddr.getFlagBuildingId() == 1) {      if (StringUtil.isBlank(soAddr.getBuildingId())) {             sql.append(" and BUILDING_ID is null ");          }      else{             sql.append(" and BUILDING_ID=:buildingId");             sql.setLong("buildingId", soAddr.getBuildingId());          }   } if (soAddr.getFlagBuildingName() == 1) {      if (StringUtil.isBlank(soAddr.getBuildingName())) {             sql.append(" and BUILDING_NAME is null ");          }      else{             sql.append(" and BUILDING_NAME=:buildingName");             sql.setString("buildingName", soAddr.getBuildingName());          }   } if (soAddr.getFlagChangedFlag() == 1) {      if (StringUtil.isBlank(soAddr.getChangedFlag())) {             sql.append(" and CHANGED_FLAG is null ");          }      else{             sql.append(" and CHANGED_FLAG=:changedFlag");             sql.setString("changedFlag", soAddr.getChangedFlag());          }   } if (soAddr.getFlagDeviceId() == 1) {      if (StringUtil.isBlank(soAddr.getDeviceId())) {             sql.append(" and DEVICE_ID is null ");          }      else{             sql.append(" and DEVICE_ID=:deviceId");             sql.setLong("deviceId", soAddr.getDeviceId());          }   } if (soAddr.getFlagDistrictId() == 1) {      if (StringUtil.isBlank(soAddr.getDistrictId())) {             sql.append(" and DISTRICT_ID is null ");          }      else{             sql.append(" and DISTRICT_ID=:districtId");             sql.setLong("districtId", soAddr.getDistrictId());          }   } if (soAddr.getFlagDistrictName() == 1) {      if (StringUtil.isBlank(soAddr.getDistrictName())) {             sql.append(" and DISTRICT_NAME is null ");          }      else{             sql.append(" and DISTRICT_NAME=:districtName");             sql.setString("districtName", soAddr.getDistrictName());          }   } if (soAddr.getFlagExchId() == 1) {      if (StringUtil.isBlank(soAddr.getExchId())) {             sql.append(" and EXCH_ID is null ");          }      else{             sql.append(" and EXCH_ID=:exchId");             sql.setLong("exchId", soAddr.getExchId());          }   } if (soAddr.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(soAddr.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", soAddr.getLocalNetId());          }   } if (soAddr.getFlagMaintAreaId() == 1) {      if (StringUtil.isBlank(soAddr.getMaintAreaId())) {             sql.append(" and MAINT_AREA_ID is null ");          }      else{             sql.append(" and MAINT_AREA_ID=:maintAreaId");             sql.setLong("maintAreaId", soAddr.getMaintAreaId());          }   } if (soAddr.getFlagMsAreaId() == 1) {      if (StringUtil.isBlank(soAddr.getMsAreaId())) {             sql.append(" and MS_AREA_ID is null ");          }      else{             sql.append(" and MS_AREA_ID=:msAreaId");             sql.setLong("msAreaId", soAddr.getMsAreaId());          }   } if (soAddr.getFlagMsAreaName() == 1) {      if (StringUtil.isBlank(soAddr.getMsAreaName())) {             sql.append(" and MS_AREA_NAME is null ");          }      else{             sql.append(" and MS_AREA_NAME=:msAreaName");             sql.setString("msAreaName", soAddr.getMsAreaName());          }   } if (soAddr.getFlagMsStaffId() == 1) {      if (StringUtil.isBlank(soAddr.getMsStaffId())) {             sql.append(" and MS_STAFF_ID is null ");          }      else{             sql.append(" and MS_STAFF_ID=:msStaffId");             sql.setLong("msStaffId", soAddr.getMsStaffId());          }   } if (soAddr.getFlagMsStaffName() == 1) {      if (StringUtil.isBlank(soAddr.getMsStaffName())) {             sql.append(" and MS_STAFF_NAME is null ");          }      else{             sql.append(" and MS_STAFF_NAME=:msStaffName");             sql.setString("msStaffName", soAddr.getMsStaffName());          }   } if (soAddr.getFlagMtAreaName() == 1) {      if (StringUtil.isBlank(soAddr.getMtAreaName())) {             sql.append(" and MT_AREA_NAME is null ");          }      else{             sql.append(" and MT_AREA_NAME=:mtAreaName");             sql.setString("mtAreaName", soAddr.getMtAreaName());          }   } if (soAddr.getFlagMtStaffId() == 1) {      if (StringUtil.isBlank(soAddr.getMtStaffId())) {             sql.append(" and MT_STAFF_ID is null ");          }      else{             sql.append(" and MT_STAFF_ID=:mtStaffId");             sql.setLong("mtStaffId", soAddr.getMtStaffId());          }   } if (soAddr.getFlagMtStaffName() == 1) {      if (StringUtil.isBlank(soAddr.getMtStaffName())) {             sql.append(" and MT_STAFF_NAME is null ");          }      else{             sql.append(" and MT_STAFF_NAME=:mtStaffName");             sql.setString("mtStaffName", soAddr.getMtStaffName());          }   } if (soAddr.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(soAddr.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", soAddr.getNoFlag());          }   } if (soAddr.getFlagPostCode() == 1) {      if (StringUtil.isBlank(soAddr.getPostCode())) {             sql.append(" and POST_CODE is null ");          }      else{             sql.append(" and POST_CODE=:postCode");             sql.setString("postCode", soAddr.getPostCode());          }   } if (soAddr.getFlagProjectId() == 1) {      if (StringUtil.isBlank(soAddr.getProjectId())) {             sql.append(" and PROJECT_ID is null ");          }      else{             sql.append(" and PROJECT_ID=:projectId");             sql.setLong("projectId", soAddr.getProjectId());          }   } if (soAddr.getFlagRefAccNbr() == 1) {      if (StringUtil.isBlank(soAddr.getRefAccNbr())) {             sql.append(" and REF_ACC_NBR is null ");          }      else{             sql.append(" and REF_ACC_NBR=:refAccNbr");             sql.setString("refAccNbr", soAddr.getRefAccNbr());          }   } if (soAddr.getFlagServDeptId() == 1) {      if (StringUtil.isBlank(soAddr.getServDeptId())) {             sql.append(" and SERV_DEPT_ID is null ");          }      else{             sql.append(" and SERV_DEPT_ID=:servDeptId");             sql.setLong("servDeptId", soAddr.getServDeptId());          }   } if (soAddr.getFlagSituated() == 1) {      if (StringUtil.isBlank(soAddr.getSituated())) {             sql.append(" and SITUATED is null ");          }      else{             sql.append(" and SITUATED=:situated");             sql.setString("situated", soAddr.getSituated());          }   } if (soAddr.getFlagSoAddrId() == 1) {      if (StringUtil.isBlank(soAddr.getSoAddrId())) {             sql.append(" and SO_ADDR_ID is null ");          }      else{             sql.append(" and SO_ADDR_ID=:soAddrId");             sql.setLong("soAddrId", soAddr.getSoAddrId());          }   } if (soAddr.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(soAddr.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", soAddr.getSoNbr());          }   } if (soAddr.getFlagSts() == 1) {      if (StringUtil.isBlank(soAddr.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", soAddr.getSts());          }   } if (soAddr.getFlagStsDate() == 1) {      if (soAddr.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", soAddr.getStsDate());          }   } if (soAddr.getFlagTwoExchFlag() == 1) {      if (StringUtil.isBlank(soAddr.getTwoExchFlag())) {             sql.append(" and TWO_EXCH_FLAG is null ");          }      else{             sql.append(" and TWO_EXCH_FLAG=:twoExchFlag");             sql.setString("twoExchFlag", soAddr.getTwoExchFlag());          }   } if (soAddr.getFlagWoAction() == 1) {      if (StringUtil.isBlank(soAddr.getWoAction())) {             sql.append(" and WO_ACTION is null ");          }      else{             sql.append(" and WO_ACTION=:woAction");             sql.setString("woAction", soAddr.getWoAction());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           soAddr = new SoAddrSVO();           soAddr.setActType(rs.getString("ACT_TYPE"));           soAddr.setAddrId(rs.getString("ADDR_ID"));           soAddr.setAddrInfo(rs.getString("ADDR_INFO"));           soAddr.setAreaId(rs.getString("AREA_ID"));           soAddr.setAzFlag(rs.getString("AZ_FLAG"));           soAddr.setBranchId(rs.getString("BRANCH_ID"));           soAddr.setBuildingId(rs.getString("BUILDING_ID"));           soAddr.setBuildingName(rs.getString("BUILDING_NAME"));           soAddr.setChangedFlag(rs.getString("CHANGED_FLAG"));           soAddr.setDeviceId(rs.getString("DEVICE_ID"));           soAddr.setDistrictId(rs.getString("DISTRICT_ID"));           soAddr.setDistrictName(rs.getString("DISTRICT_NAME"));           soAddr.setExchId(rs.getString("EXCH_ID"));           soAddr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soAddr.setMaintAreaId(rs.getString("MAINT_AREA_ID"));           soAddr.setMsAreaId(rs.getString("MS_AREA_ID"));           soAddr.setMsAreaName(rs.getString("MS_AREA_NAME"));           soAddr.setMsStaffId(rs.getString("MS_STAFF_ID"));           soAddr.setMsStaffName(rs.getString("MS_STAFF_NAME"));           soAddr.setMtAreaName(rs.getString("MT_AREA_NAME"));           soAddr.setMtStaffId(rs.getString("MT_STAFF_ID"));           soAddr.setMtStaffName(rs.getString("MT_STAFF_NAME"));           soAddr.setNoFlag(rs.getString("NO_FLAG"));           soAddr.setPostCode(rs.getString("POST_CODE"));           soAddr.setProjectId(rs.getString("PROJECT_ID"));           soAddr.setRefAccNbr(rs.getString("REF_ACC_NBR"));           soAddr.setServDeptId(rs.getString("SERV_DEPT_ID"));           soAddr.setSituated(rs.getString("SITUATED"));           soAddr.setSoAddrId(rs.getString("SO_ADDR_ID"));           soAddr.setSoNbr(rs.getString("SO_NBR"));           soAddr.setSts(rs.getString("STS"));           soAddr.setStsDate(rs.getTimestamp("STS_DATE"));           soAddr.setTwoExchFlag(rs.getString("TWO_EXCH_FLAG"));           soAddr.setWoAction(rs.getString("WO_ACTION"));               res.add(soAddr);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoAddrSVO soAddr=(SoAddrSVO) vo;    if (StringUtil.isBlank(soAddr.getSoAddrId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO_ADDR SET ");     try {if (soAddr.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", soAddr.getActType()); } if (soAddr.getFlagAddrId() == 1) {sql.append("ADDR_ID=:addrId,");sql.setLong("addrId", soAddr.getAddrId()); } if (soAddr.getFlagAddrInfo() == 1) {sql.append("ADDR_INFO=:addrInfo,"); sql.setString("addrInfo", soAddr.getAddrInfo()); } if (soAddr.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", soAddr.getAreaId()); } if (soAddr.getFlagAzFlag() == 1) {sql.append("AZ_FLAG=:azFlag,"); sql.setString("azFlag", soAddr.getAzFlag()); } if (soAddr.getFlagBranchId() == 1) {sql.append("BRANCH_ID=:branchId,");sql.setLong("branchId", soAddr.getBranchId()); } if (soAddr.getFlagBuildingId() == 1) {sql.append("BUILDING_ID=:buildingId,");sql.setLong("buildingId", soAddr.getBuildingId()); } if (soAddr.getFlagBuildingName() == 1) {sql.append("BUILDING_NAME=:buildingName,"); sql.setString("buildingName", soAddr.getBuildingName()); } if (soAddr.getFlagChangedFlag() == 1) {sql.append("CHANGED_FLAG=:changedFlag,"); sql.setString("changedFlag", soAddr.getChangedFlag()); } if (soAddr.getFlagDeviceId() == 1) {sql.append("DEVICE_ID=:deviceId,");sql.setLong("deviceId", soAddr.getDeviceId()); } if (soAddr.getFlagDistrictId() == 1) {sql.append("DISTRICT_ID=:districtId,");sql.setLong("districtId", soAddr.getDistrictId()); } if (soAddr.getFlagDistrictName() == 1) {sql.append("DISTRICT_NAME=:districtName,"); sql.setString("districtName", soAddr.getDistrictName()); } if (soAddr.getFlagExchId() == 1) {sql.append("EXCH_ID=:exchId,");sql.setLong("exchId", soAddr.getExchId()); } if (soAddr.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", soAddr.getLocalNetId()); } if (soAddr.getFlagMaintAreaId() == 1) {sql.append("MAINT_AREA_ID=:maintAreaId,");sql.setLong("maintAreaId", soAddr.getMaintAreaId()); } if (soAddr.getFlagMsAreaId() == 1) {sql.append("MS_AREA_ID=:msAreaId,");sql.setLong("msAreaId", soAddr.getMsAreaId()); } if (soAddr.getFlagMsAreaName() == 1) {sql.append("MS_AREA_NAME=:msAreaName,"); sql.setString("msAreaName", soAddr.getMsAreaName()); } if (soAddr.getFlagMsStaffId() == 1) {sql.append("MS_STAFF_ID=:msStaffId,");sql.setLong("msStaffId", soAddr.getMsStaffId()); } if (soAddr.getFlagMsStaffName() == 1) {sql.append("MS_STAFF_NAME=:msStaffName,"); sql.setString("msStaffName", soAddr.getMsStaffName()); } if (soAddr.getFlagMtAreaName() == 1) {sql.append("MT_AREA_NAME=:mtAreaName,"); sql.setString("mtAreaName", soAddr.getMtAreaName()); } if (soAddr.getFlagMtStaffId() == 1) {sql.append("MT_STAFF_ID=:mtStaffId,");sql.setLong("mtStaffId", soAddr.getMtStaffId()); } if (soAddr.getFlagMtStaffName() == 1) {sql.append("MT_STAFF_NAME=:mtStaffName,"); sql.setString("mtStaffName", soAddr.getMtStaffName()); } if (soAddr.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", soAddr.getNoFlag()); } if (soAddr.getFlagPostCode() == 1) {sql.append("POST_CODE=:postCode,"); sql.setString("postCode", soAddr.getPostCode()); } if (soAddr.getFlagProjectId() == 1) {sql.append("PROJECT_ID=:projectId,");sql.setLong("projectId", soAddr.getProjectId()); } if (soAddr.getFlagRefAccNbr() == 1) {sql.append("REF_ACC_NBR=:refAccNbr,"); sql.setString("refAccNbr", soAddr.getRefAccNbr()); } if (soAddr.getFlagServDeptId() == 1) {sql.append("SERV_DEPT_ID=:servDeptId,");sql.setLong("servDeptId", soAddr.getServDeptId()); } if (soAddr.getFlagSituated() == 1) {sql.append("SITUATED=:situated,"); sql.setString("situated", soAddr.getSituated()); } if (soAddr.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", soAddr.getSoNbr()); } if (soAddr.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", soAddr.getSts()); } if (soAddr.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", soAddr.getStsDate()); } if (soAddr.getFlagTwoExchFlag() == 1) {sql.append("TWO_EXCH_FLAG=:twoExchFlag,"); sql.setString("twoExchFlag", soAddr.getTwoExchFlag()); } if (soAddr.getFlagWoAction() == 1) {sql.append("WO_ACTION=:woAction,"); sql.setString("woAction", soAddr.getWoAction()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and SO_ADDR_ID=:soAddrId");sql.setLong("soAddrId", soAddr.getSoAddrId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_ADDR(ACT_TYPE,ADDR_ID,ADDR_INFO,AREA_ID,AZ_FLAG,BRANCH_ID,BUILDING_ID,BUILDING_NAME,CHANGED_FLAG,DEVICE_ID,DISTRICT_ID,DISTRICT_NAME,EXCH_ID,LOCAL_NET_ID,MAINT_AREA_ID,MS_AREA_ID,MS_AREA_NAME,MS_STAFF_ID,MS_STAFF_NAME,MT_AREA_NAME,MT_STAFF_ID,MT_STAFF_NAME,NO_FLAG,POST_CODE,PROJECT_ID,REF_ACC_NBR,SERV_DEPT_ID,SITUATED,SO_ADDR_ID,SO_NBR,STS,STS_DATE,TWO_EXCH_FLAG,WO_ACTION)");sql.append(" VALUES (:actType,:addrId,:addrInfo,:areaId,:azFlag,:branchId,:buildingId,:buildingName,:changedFlag,:deviceId,:districtId,:districtName,:exchId,:localNetId,:maintAreaId,:msAreaId,:msAreaName,:msStaffId,:msStaffName,:mtAreaName,:mtStaffId,:mtStaffName,:noFlag,:postCode,:projectId,:refAccNbr,:servDeptId,:situated,:soAddrId,:soNbr,:sts,:stsDate,:twoExchFlag,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoAddrSVO soAddr=(SoAddrSVO) list.get(i);         if (soAddr== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(soAddr.getSoAddrId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(soAddr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soAddr.getActType());    }       if (StringUtil.isBlank(soAddr.getAddrId())) {      sql.setNullLong("addrId");     } else {    sql.setLong("addrId", soAddr.getAddrId());    }       if (StringUtil.isBlank(soAddr.getAddrInfo())) {      sql.setNullString("addrInfo");     } else {    sql.setString("addrInfo", soAddr.getAddrInfo());    }       if (StringUtil.isBlank(soAddr.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", soAddr.getAreaId());    }       if (StringUtil.isBlank(soAddr.getAzFlag())) {      sql.setNullString("azFlag");     } else {    sql.setString("azFlag", soAddr.getAzFlag());    }       if (StringUtil.isBlank(soAddr.getBranchId())) {      sql.setNullLong("branchId");     } else {    sql.setLong("branchId", soAddr.getBranchId());    }       if (StringUtil.isBlank(soAddr.getBuildingId())) {      sql.setNullLong("buildingId");     } else {    sql.setLong("buildingId", soAddr.getBuildingId());    }       if (StringUtil.isBlank(soAddr.getBuildingName())) {      sql.setNullString("buildingName");     } else {    sql.setString("buildingName", soAddr.getBuildingName());    }       if (StringUtil.isBlank(soAddr.getChangedFlag())) {      sql.setNullString("changedFlag");     } else {    sql.setString("changedFlag", soAddr.getChangedFlag());    }       if (StringUtil.isBlank(soAddr.getDeviceId())) {      sql.setNullLong("deviceId");     } else {    sql.setLong("deviceId", soAddr.getDeviceId());    }       if (StringUtil.isBlank(soAddr.getDistrictId())) {      sql.setNullLong("districtId");     } else {    sql.setLong("districtId", soAddr.getDistrictId());    }       if (StringUtil.isBlank(soAddr.getDistrictName())) {      sql.setNullString("districtName");     } else {    sql.setString("districtName", soAddr.getDistrictName());    }       if (StringUtil.isBlank(soAddr.getExchId())) {      sql.setNullLong("exchId");     } else {    sql.setLong("exchId", soAddr.getExchId());    }       if (StringUtil.isBlank(soAddr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soAddr.getLocalNetId());    }       if (StringUtil.isBlank(soAddr.getMaintAreaId())) {      sql.setNullLong("maintAreaId");     } else {    sql.setLong("maintAreaId", soAddr.getMaintAreaId());    }       if (StringUtil.isBlank(soAddr.getMsAreaId())) {      sql.setNullLong("msAreaId");     } else {    sql.setLong("msAreaId", soAddr.getMsAreaId());    }       if (StringUtil.isBlank(soAddr.getMsAreaName())) {      sql.setNullString("msAreaName");     } else {    sql.setString("msAreaName", soAddr.getMsAreaName());    }       if (StringUtil.isBlank(soAddr.getMsStaffId())) {      sql.setNullLong("msStaffId");     } else {    sql.setLong("msStaffId", soAddr.getMsStaffId());    }       if (StringUtil.isBlank(soAddr.getMsStaffName())) {      sql.setNullString("msStaffName");     } else {    sql.setString("msStaffName", soAddr.getMsStaffName());    }       if (StringUtil.isBlank(soAddr.getMtAreaName())) {      sql.setNullString("mtAreaName");     } else {    sql.setString("mtAreaName", soAddr.getMtAreaName());    }       if (StringUtil.isBlank(soAddr.getMtStaffId())) {      sql.setNullLong("mtStaffId");     } else {    sql.setLong("mtStaffId", soAddr.getMtStaffId());    }       if (StringUtil.isBlank(soAddr.getMtStaffName())) {      sql.setNullString("mtStaffName");     } else {    sql.setString("mtStaffName", soAddr.getMtStaffName());    }       if (StringUtil.isBlank(soAddr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soAddr.getNoFlag());    }       if (StringUtil.isBlank(soAddr.getPostCode())) {      sql.setNullString("postCode");     } else {    sql.setString("postCode", soAddr.getPostCode());    }       if (StringUtil.isBlank(soAddr.getProjectId())) {      sql.setNullLong("projectId");     } else {    sql.setLong("projectId", soAddr.getProjectId());    }       if (StringUtil.isBlank(soAddr.getRefAccNbr())) {      sql.setNullString("refAccNbr");     } else {    sql.setString("refAccNbr", soAddr.getRefAccNbr());    }       if (StringUtil.isBlank(soAddr.getServDeptId())) {      sql.setNullLong("servDeptId");     } else {    sql.setLong("servDeptId", soAddr.getServDeptId());    }       if (StringUtil.isBlank(soAddr.getSituated())) {      sql.setNullString("situated");     } else {    sql.setString("situated", soAddr.getSituated());    }       if (StringUtil.isBlank(soAddr.getSoAddrId())) {      sql.setNullLong("soAddrId");     } else {    sql.setLong("soAddrId", soAddr.getSoAddrId());    }       if (StringUtil.isBlank(soAddr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soAddr.getSoNbr());    }       if (StringUtil.isBlank(soAddr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soAddr.getSts());    }    if (soAddr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soAddr.getStsDate());    }       if (StringUtil.isBlank(soAddr.getTwoExchFlag())) {      sql.setNullString("twoExchFlag");     } else {    sql.setString("twoExchFlag", soAddr.getTwoExchFlag());    }       if (StringUtil.isBlank(soAddr.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", soAddr.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoAddrSVO soAddr=(SoAddrSVO) vo;    if (StringUtil.isBlank(soAddr.getSoAddrId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO_ADDR WHERE 1=1  ");sql.append(" and SO_ADDR_ID=:soAddrId");sql.setLong("soAddrId", soAddr.getSoAddrId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoAddrSVO soAddr=(SoAddrSVO) vo;       }}
