package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.SysConstants;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sp.component.dao.IFailReasonSDAO;import com.cattsoft.sp.vo.FailReasonSVO;/** * 方法FailReasonSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class FailReasonSDAOImpl implements IFailReasonSDAO {	// private static Logger log = Logger.getLogger(FailReasonSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		if (StringUtil.isBlank(failReason.getFailReasonId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO FAIL_REASON(ACTION_ID,DUTY_FLAG,EXP_CODE,EXT_REASON_ID,FAIL_REASON_ID,NAME,REASON_CAT,REMARKS,STS,STS_DATE,SYSTEM_NAME)");		sql				.append(" VALUES (:actionId,:dutyFlag,:expCode,:extReasonId,:failReasonId,:name,:reasonCat,:remarks,:sts,:stsDate,:systemName)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(failReason.getActionId())) {				sql.setNullLong("actionId");			} else {				sql.setLong("actionId", failReason.getActionId());			}			if (StringUtil.isBlank(failReason.getDutyFlag())) {				sql.setNullString("dutyFlag");			} else {				sql.setString("dutyFlag", failReason.getDutyFlag());			}			if (StringUtil.isBlank(failReason.getExpCode())) {				sql.setNullString("expCode");			} else {				sql.setString("expCode", failReason.getExpCode());			}			if (StringUtil.isBlank(failReason.getExtReasonId())) {				sql.setNullString("extReasonId");			} else {				sql.setString("extReasonId", failReason.getExtReasonId());			}			if (StringUtil.isBlank(failReason.getFailReasonId())) {				sql.setNullString("failReasonId");			} else {				sql.setString("failReasonId", failReason.getFailReasonId());			}			if (StringUtil.isBlank(failReason.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", failReason.getName());			}			if (StringUtil.isBlank(failReason.getReasonCat())) {				sql.setNullString("reasonCat");			} else {				sql.setString("reasonCat", failReason.getReasonCat());			}			if (StringUtil.isBlank(failReason.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", failReason.getRemarks());			}			if (StringUtil.isBlank(failReason.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", failReason.getSts());			}			if (failReason.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", failReason.getStsDate());			}			if (StringUtil.isBlank(failReason.getSystemName())) {				sql.setNullString("systemName");			} else {				sql.setString("systemName", failReason.getSystemName());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		if (StringUtil.isBlank(failReason.getFailReasonId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ACTION_ID,DUTY_FLAG,EXP_CODE,EXT_REASON_ID,FAIL_REASON_ID,NAME,REASON_CAT,REMARKS,STS,STS_DATE,SYSTEM_NAME FROM FAIL_REASON WHERE 1=1  ");		sql.append(" and FAIL_REASON_ID=:failReasonId");		sql.setString("failReasonId", failReason.getFailReasonId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		failReason = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				failReason = new FailReasonSVO();				failReason.setActionId(rs.getString("ACTION_ID"));				failReason.setDutyFlag(rs.getString("DUTY_FLAG"));				failReason.setExpCode(rs.getString("EXP_CODE"));				failReason.setExtReasonId(rs.getString("EXT_REASON_ID"));				failReason.setFailReasonId(rs.getString("FAIL_REASON_ID"));				failReason.setName(rs.getString("NAME"));				failReason.setReasonCat(rs.getString("REASON_CAT"));				failReason.setRemarks(rs.getString("REMARKS"));				failReason.setSts(rs.getString("STS"));				failReason.setStsDate(rs.getTimestamp("STS_DATE"));				failReason.setSystemName(rs.getString("SYSTEM_NAME"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return failReason;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ACTION_ID,DUTY_FLAG,EXP_CODE,EXT_REASON_ID,FAIL_REASON_ID,NAME,REASON_CAT,REMARKS,STS,STS_DATE,SYSTEM_NAME FROM FAIL_REASON WHERE 1=1 ");		try {			if (failReason.getFlagActionId() == 1) {				if (StringUtil.isBlank(failReason.getActionId())) {					sql.append(" and ACTION_ID is null ");				} else {					sql.append(" and ACTION_ID=:actionId");					sql.setLong("actionId", failReason.getActionId());				}			}			if (failReason.getFlagDutyFlag() == 1) {				if (StringUtil.isBlank(failReason.getDutyFlag())) {					sql.append(" and DUTY_FLAG is null ");				} else {					sql.append(" and DUTY_FLAG=:dutyFlag");					sql.setString("dutyFlag", failReason.getDutyFlag());				}			}			if (failReason.getFlagExpCode() == 1) {				if (StringUtil.isBlank(failReason.getExpCode())) {					sql.append(" and EXP_CODE is null ");				} else {					sql.append(" and EXP_CODE=:expCode");					sql.setString("expCode", failReason.getExpCode());				}			}			if (failReason.getFlagExtReasonId() == 1) {				if (StringUtil.isBlank(failReason.getExtReasonId())) {					sql.append(" and EXT_REASON_ID is null ");				} else {					sql.append(" and EXT_REASON_ID=:extReasonId");					sql.setString("extReasonId", failReason.getExtReasonId());				}			}			if (failReason.getFlagFailReasonId() == 1) {				if (StringUtil.isBlank(failReason.getFailReasonId())) {					sql.append(" and FAIL_REASON_ID is null ");				} else {					sql.append(" and FAIL_REASON_ID=:failReasonId");					sql.setString("failReasonId", failReason.getFailReasonId());				}			}			if (failReason.getFlagName() == 1) {				if (StringUtil.isBlank(failReason.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", failReason.getName());				}			}			if (failReason.getFlagReasonCat() == 1) {				if (StringUtil.isBlank(failReason.getReasonCat())) {					sql.append(" and REASON_CAT is null ");				} else {					sql.append(" and REASON_CAT=:reasonCat");					sql.setString("reasonCat", failReason.getReasonCat());				}			}			if (failReason.getFlagRemarks() == 1) {				if (StringUtil.isBlank(failReason.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", failReason.getRemarks());				}			}			if (failReason.getFlagSts() == 1) {				if (StringUtil.isBlank(failReason.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", failReason.getSts());				}			}			if (failReason.getFlagStsDate() == 1) {				if (failReason.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", failReason.getStsDate());				}			}			if (failReason.getFlagSystemName() == 1) {				if (StringUtil.isBlank(failReason.getSystemName())) {					sql.append(" and SYSTEM_NAME is null ");				} else {					sql.append(" and SYSTEM_NAME=:systemName");					sql.setString("systemName", failReason.getSystemName());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				failReason = new FailReasonSVO();				failReason.setActionId(rs.getString("ACTION_ID"));				failReason.setDutyFlag(rs.getString("DUTY_FLAG"));				failReason.setExpCode(rs.getString("EXP_CODE"));				failReason.setExtReasonId(rs.getString("EXT_REASON_ID"));				failReason.setFailReasonId(rs.getString("FAIL_REASON_ID"));				failReason.setName(rs.getString("NAME"));				failReason.setReasonCat(rs.getString("REASON_CAT"));				failReason.setRemarks(rs.getString("REMARKS"));				failReason.setSts(rs.getString("STS"));				failReason.setStsDate(rs.getTimestamp("STS_DATE"));				failReason.setSystemName(rs.getString("SYSTEM_NAME"));				res.add(failReason);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		if (StringUtil.isBlank(failReason.getFailReasonId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE FAIL_REASON SET ");		try {			if (failReason.getFlagActionId() == 1) {				sql.append("ACTION_ID=:actionId,");				sql.setLong("actionId", failReason.getActionId());			}			if (failReason.getFlagDutyFlag() == 1) {				sql.append("DUTY_FLAG=:dutyFlag,");				sql.setString("dutyFlag", failReason.getDutyFlag());			}			if (failReason.getFlagExpCode() == 1) {				sql.append("EXP_CODE=:expCode,");				sql.setString("expCode", failReason.getExpCode());			}			if (failReason.getFlagExtReasonId() == 1) {				sql.append("EXT_REASON_ID=:extReasonId,");				sql.setString("extReasonId", failReason.getExtReasonId());			}			if (failReason.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", failReason.getName());			}			if (failReason.getFlagReasonCat() == 1) {				sql.append("REASON_CAT=:reasonCat,");				sql.setString("reasonCat", failReason.getReasonCat());			}			if (failReason.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", failReason.getRemarks());			}			if (failReason.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", failReason.getSts());			}			if (failReason.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", failReason.getStsDate());			}			if (failReason.getFlagSystemName() == 1) {				sql.append("SYSTEM_NAME=:systemName,");				sql.setString("systemName", failReason.getSystemName());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and FAIL_REASON_ID=:failReasonId");			sql.setString("failReasonId", failReason.getFailReasonId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO FAIL_REASON(ACTION_ID,DUTY_FLAG,EXP_CODE,EXT_REASON_ID,FAIL_REASON_ID,NAME,REASON_CAT,REMARKS,STS,STS_DATE,SYSTEM_NAME)");		sql				.append(" VALUES (:actionId,:dutyFlag,:expCode,:extReasonId,:failReasonId,:name,:reasonCat,:remarks,:sts,:stsDate,:systemName)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				FailReasonSVO failReason = (FailReasonSVO) list.get(i);				if (failReason == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(failReason.getFailReasonId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(failReason.getActionId())) {					sql.setNullLong("actionId");				} else {					sql.setLong("actionId", failReason.getActionId());				}				if (StringUtil.isBlank(failReason.getDutyFlag())) {					sql.setNullString("dutyFlag");				} else {					sql.setString("dutyFlag", failReason.getDutyFlag());				}				if (StringUtil.isBlank(failReason.getExpCode())) {					sql.setNullString("expCode");				} else {					sql.setString("expCode", failReason.getExpCode());				}				if (StringUtil.isBlank(failReason.getExtReasonId())) {					sql.setNullString("extReasonId");				} else {					sql.setString("extReasonId", failReason.getExtReasonId());				}				if (StringUtil.isBlank(failReason.getFailReasonId())) {					sql.setNullString("failReasonId");				} else {					sql.setString("failReasonId", failReason.getFailReasonId());				}				if (StringUtil.isBlank(failReason.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", failReason.getName());				}				if (StringUtil.isBlank(failReason.getReasonCat())) {					sql.setNullString("reasonCat");				} else {					sql.setString("reasonCat", failReason.getReasonCat());				}				if (StringUtil.isBlank(failReason.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", failReason.getRemarks());				}				if (StringUtil.isBlank(failReason.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", failReason.getSts());				}				if (failReason.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", failReason.getStsDate());				}				if (StringUtil.isBlank(failReason.getSystemName())) {					sql.setNullString("systemName");				} else {					sql.setString("systemName", failReason.getSystemName());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		if (StringUtil.isBlank(failReason.getFailReasonId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM FAIL_REASON WHERE 1=1  ");		sql.append(" and FAIL_REASON_ID=:failReasonId");		sql.setString("failReasonId", failReason.getFailReasonId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条	 * 	 * @return String ： 注销一条的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		FailReasonSVO failReason = (FailReasonSVO) vo;		if (StringUtil.isBlank(failReason.getFailReasonId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE FAIL_REASON SET ");		try {			sql.append(" STS=:sts");			sql.setString("sts", failReason.getSts());			sql.append(" WHERE 1=1 ");			sql.append(" and FAIL_REASON_ID=:failReasonId");			sql.setString("failReasonId", failReason.getFailReasonId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeQuery();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}		/**	 * 注销一批	 * 	 * @return String ： 注销一批的SQL。	 */	public void unable(List voList) throws AppException, SysException {		if (voList == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE FAIL_REASON SET ");		sql.append(" STS='");		sql.append(SysConstants.USE_NO_STS);		sql.append("' WHERE 1=1  ");		sql.append(" and FAIL_REASON_ID=:failReasonId");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < voList.size(); i++) {				FailReasonSVO failReason = (FailReasonSVO) (voList.get(i));				if (StringUtil.isBlank(failReason.getFailReasonId())) {					throw new AppException("100002", "缺少对象的主键！");				}				sql.setString("failReasonId", failReason.getFailReasonId());				ps = sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}}