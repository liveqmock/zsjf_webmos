package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.IStepSpecPrptySDAO;import com.cattsoft.sp.vo.StepSpecPrptySVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法StepSpecPrptySDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class StepSpecPrptySDAOImpl implements IStepSpecPrptySDAO{    private static Logger log = Logger.getLogger(StepSpecPrptySDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;    if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_SPEC_PRPTY(ACTION_ID,AREA_ID,CHG_SERV_SPEC_ID,COMPONENT_CODE,FILL_TYPE,LOCAL_NET_ID,NEED_FLAG,PROD_ID,REMARKS,SPEC_PRPTY_ID,STEP_ID,STEP_SPEC_PRPTY_ID,STS,STS_STATE,SUB_PROD_ID)");sql.append(" VALUES (:actionId,:areaId,:chgServSpecId,:componentCode,:fillType,:localNetId,:needFlag,:prodId,:remarks,:specPrptyId,:stepId,:stepSpecPrptyId,:sts,:stsState,:subProdId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(stepSpecPrpty.getActionId())) {      sql.setNullLong("actionId");     } else {    sql.setLong("actionId", stepSpecPrpty.getActionId());    }       if (StringUtil.isBlank(stepSpecPrpty.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepSpecPrpty.getAreaId());    }       if (StringUtil.isBlank(stepSpecPrpty.getChgServSpecId())) {      sql.setNullLong("chgServSpecId");     } else {    sql.setLong("chgServSpecId", stepSpecPrpty.getChgServSpecId());    }       if (StringUtil.isBlank(stepSpecPrpty.getComponentCode())) {      sql.setNullString("componentCode");     } else {    sql.setString("componentCode", stepSpecPrpty.getComponentCode());    }       if (StringUtil.isBlank(stepSpecPrpty.getFillType())) {      sql.setNullString("fillType");     } else {    sql.setString("fillType", stepSpecPrpty.getFillType());    }       if (StringUtil.isBlank(stepSpecPrpty.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepSpecPrpty.getLocalNetId());    }       if (StringUtil.isBlank(stepSpecPrpty.getNeedFlag())) {      sql.setNullString("needFlag");     } else {    sql.setString("needFlag", stepSpecPrpty.getNeedFlag());    }       if (StringUtil.isBlank(stepSpecPrpty.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", stepSpecPrpty.getProdId());    }       if (StringUtil.isBlank(stepSpecPrpty.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepSpecPrpty.getRemarks());    }       if (StringUtil.isBlank(stepSpecPrpty.getSpecPrptyId())) {      sql.setNullLong("specPrptyId");     } else {    sql.setLong("specPrptyId", stepSpecPrpty.getSpecPrptyId());    }       if (StringUtil.isBlank(stepSpecPrpty.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepSpecPrpty.getStepId());    }       if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {      sql.setNullLong("stepSpecPrptyId");     } else {    sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());    }       if (StringUtil.isBlank(stepSpecPrpty.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepSpecPrpty.getSts());    }    if (stepSpecPrpty.getStsState() == null) {      sql.setNullDate("stsState");     } else {    sql.setTimestamp("stsState", stepSpecPrpty.getStsState());    }       if (StringUtil.isBlank(stepSpecPrpty.getSubProdId())) {      sql.setNullLong("subProdId");     } else {    sql.setLong("subProdId", stepSpecPrpty.getSubProdId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;    if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTION_ID,AREA_ID,CHG_SERV_SPEC_ID,COMPONENT_CODE,FILL_TYPE,LOCAL_NET_ID,NEED_FLAG,PROD_ID,REMARKS,SPEC_PRPTY_ID,STEP_ID,STEP_SPEC_PRPTY_ID,STS,STS_STATE,SUB_PROD_ID FROM STEP_SPEC_PRPTY WHERE 1=1  ");sql.append(" and STEP_SPEC_PRPTY_ID=:stepSpecPrptyId");sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      stepSpecPrpty =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           stepSpecPrpty = new StepSpecPrptySVO();           stepSpecPrpty.setActionId(rs.getString("ACTION_ID"));           stepSpecPrpty.setAreaId(rs.getString("AREA_ID"));           stepSpecPrpty.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           stepSpecPrpty.setComponentCode(rs.getString("COMPONENT_CODE"));           stepSpecPrpty.setFillType(rs.getString("FILL_TYPE"));           stepSpecPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepSpecPrpty.setNeedFlag(rs.getString("NEED_FLAG"));           stepSpecPrpty.setProdId(rs.getString("PROD_ID"));           stepSpecPrpty.setRemarks(rs.getString("REMARKS"));           stepSpecPrpty.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           stepSpecPrpty.setStepId(rs.getString("STEP_ID"));           stepSpecPrpty.setStepSpecPrptyId(rs.getString("STEP_SPEC_PRPTY_ID"));           stepSpecPrpty.setSts(rs.getString("STS"));           stepSpecPrpty.setStsState(rs.getTimestamp("STS_STATE"));           stepSpecPrpty.setSubProdId(rs.getString("SUB_PROD_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return stepSpecPrpty;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTION_ID,AREA_ID,CHG_SERV_SPEC_ID,COMPONENT_CODE,FILL_TYPE,LOCAL_NET_ID,NEED_FLAG,PROD_ID,REMARKS,SPEC_PRPTY_ID,STEP_ID,STEP_SPEC_PRPTY_ID,STS,STS_STATE,SUB_PROD_ID FROM STEP_SPEC_PRPTY WHERE 1=1 ");     try {if (stepSpecPrpty.getFlagActionId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getActionId())) {             sql.append(" and ACTION_ID is null ");          }      else{             sql.append(" and ACTION_ID=:actionId");             sql.setLong("actionId", stepSpecPrpty.getActionId());          }   } if (stepSpecPrpty.getFlagAreaId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", stepSpecPrpty.getAreaId());          }   } if (stepSpecPrpty.getFlagChgServSpecId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getChgServSpecId())) {             sql.append(" and CHG_SERV_SPEC_ID is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_ID=:chgServSpecId");             sql.setLong("chgServSpecId", stepSpecPrpty.getChgServSpecId());          }   } if (stepSpecPrpty.getFlagComponentCode() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getComponentCode())) {             sql.append(" and COMPONENT_CODE is null ");          }      else{             sql.append(" and COMPONENT_CODE=:componentCode");             sql.setString("componentCode", stepSpecPrpty.getComponentCode());          }   } if (stepSpecPrpty.getFlagFillType() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getFillType())) {             sql.append(" and FILL_TYPE is null ");          }      else{             sql.append(" and FILL_TYPE=:fillType");             sql.setString("fillType", stepSpecPrpty.getFillType());          }   } if (stepSpecPrpty.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", stepSpecPrpty.getLocalNetId());          }   } if (stepSpecPrpty.getFlagNeedFlag() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getNeedFlag())) {             sql.append(" and NEED_FLAG is null ");          }      else{             sql.append(" and NEED_FLAG=:needFlag");             sql.setString("needFlag", stepSpecPrpty.getNeedFlag());          }   } if (stepSpecPrpty.getFlagProdId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", stepSpecPrpty.getProdId());          }   } if (stepSpecPrpty.getFlagRemarks() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", stepSpecPrpty.getRemarks());          }   } if (stepSpecPrpty.getFlagSpecPrptyId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getSpecPrptyId())) {             sql.append(" and SPEC_PRPTY_ID is null ");          }      else{             sql.append(" and SPEC_PRPTY_ID=:specPrptyId");             sql.setLong("specPrptyId", stepSpecPrpty.getSpecPrptyId());          }   } if (stepSpecPrpty.getFlagStepId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getStepId())) {             sql.append(" and STEP_ID is null ");          }      else{             sql.append(" and STEP_ID=:stepId");             sql.setString("stepId", stepSpecPrpty.getStepId());          }   } if (stepSpecPrpty.getFlagStepSpecPrptyId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {             sql.append(" and STEP_SPEC_PRPTY_ID is null ");          }      else{             sql.append(" and STEP_SPEC_PRPTY_ID=:stepSpecPrptyId");             sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());          }   } if (stepSpecPrpty.getFlagSts() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", stepSpecPrpty.getSts());          }   } if (stepSpecPrpty.getFlagStsState() == 1) {      if (stepSpecPrpty.getStsState() == null) {             sql.append(" and STS_STATE is null ");          }      else{             sql.append(" and STS_STATE=:stsState");             sql.setTimestamp("stsState", stepSpecPrpty.getStsState());          }   } if (stepSpecPrpty.getFlagSubProdId() == 1) {      if (StringUtil.isBlank(stepSpecPrpty.getSubProdId())) {             sql.append(" and SUB_PROD_ID is null ");          }      else{             sql.append(" and SUB_PROD_ID=:subProdId");             sql.setLong("subProdId", stepSpecPrpty.getSubProdId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           stepSpecPrpty = new StepSpecPrptySVO();           stepSpecPrpty.setActionId(rs.getString("ACTION_ID"));           stepSpecPrpty.setAreaId(rs.getString("AREA_ID"));           stepSpecPrpty.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           stepSpecPrpty.setComponentCode(rs.getString("COMPONENT_CODE"));           stepSpecPrpty.setFillType(rs.getString("FILL_TYPE"));           stepSpecPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepSpecPrpty.setNeedFlag(rs.getString("NEED_FLAG"));           stepSpecPrpty.setProdId(rs.getString("PROD_ID"));           stepSpecPrpty.setRemarks(rs.getString("REMARKS"));           stepSpecPrpty.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           stepSpecPrpty.setStepId(rs.getString("STEP_ID"));           stepSpecPrpty.setStepSpecPrptyId(rs.getString("STEP_SPEC_PRPTY_ID"));           stepSpecPrpty.setSts(rs.getString("STS"));           stepSpecPrpty.setStsState(rs.getTimestamp("STS_STATE"));           stepSpecPrpty.setSubProdId(rs.getString("SUB_PROD_ID"));               res.add(stepSpecPrpty);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;    if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE STEP_SPEC_PRPTY SET ");     try {if (stepSpecPrpty.getFlagActionId() == 1) {sql.append("ACTION_ID=:actionId,");sql.setLong("actionId", stepSpecPrpty.getActionId()); } if (stepSpecPrpty.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", stepSpecPrpty.getAreaId()); } if (stepSpecPrpty.getFlagChgServSpecId() == 1) {sql.append("CHG_SERV_SPEC_ID=:chgServSpecId,");sql.setLong("chgServSpecId", stepSpecPrpty.getChgServSpecId()); } if (stepSpecPrpty.getFlagComponentCode() == 1) {sql.append("COMPONENT_CODE=:componentCode,"); sql.setString("componentCode", stepSpecPrpty.getComponentCode()); } if (stepSpecPrpty.getFlagFillType() == 1) {sql.append("FILL_TYPE=:fillType,"); sql.setString("fillType", stepSpecPrpty.getFillType()); } if (stepSpecPrpty.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", stepSpecPrpty.getLocalNetId()); } if (stepSpecPrpty.getFlagNeedFlag() == 1) {sql.append("NEED_FLAG=:needFlag,"); sql.setString("needFlag", stepSpecPrpty.getNeedFlag()); } if (stepSpecPrpty.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", stepSpecPrpty.getProdId()); } if (stepSpecPrpty.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", stepSpecPrpty.getRemarks()); } if (stepSpecPrpty.getFlagSpecPrptyId() == 1) {sql.append("SPEC_PRPTY_ID=:specPrptyId,");sql.setLong("specPrptyId", stepSpecPrpty.getSpecPrptyId()); } if (stepSpecPrpty.getFlagStepId() == 1) {sql.append("STEP_ID=:stepId,"); sql.setString("stepId", stepSpecPrpty.getStepId()); } if (stepSpecPrpty.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", stepSpecPrpty.getSts()); } if (stepSpecPrpty.getFlagStsState() == 1) {sql.append("STS_STATE=:stsState,"); sql.setTimestamp("stsState", stepSpecPrpty.getStsState()); } if (stepSpecPrpty.getFlagSubProdId() == 1) {sql.append("SUB_PROD_ID=:subProdId,");sql.setLong("subProdId", stepSpecPrpty.getSubProdId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and STEP_SPEC_PRPTY_ID=:stepSpecPrptyId");sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_SPEC_PRPTY(ACTION_ID,AREA_ID,CHG_SERV_SPEC_ID,COMPONENT_CODE,FILL_TYPE,LOCAL_NET_ID,NEED_FLAG,PROD_ID,REMARKS,SPEC_PRPTY_ID,STEP_ID,STEP_SPEC_PRPTY_ID,STS,STS_STATE,SUB_PROD_ID)");sql.append(" VALUES (:actionId,:areaId,:chgServSpecId,:componentCode,:fillType,:localNetId,:needFlag,:prodId,:remarks,:specPrptyId,:stepId,:stepSpecPrptyId,:sts,:stsState,:subProdId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) list.get(i);         if (stepSpecPrpty== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(stepSpecPrpty.getActionId())) {      sql.setNullLong("actionId");     } else {    sql.setLong("actionId", stepSpecPrpty.getActionId());    }       if (StringUtil.isBlank(stepSpecPrpty.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepSpecPrpty.getAreaId());    }       if (StringUtil.isBlank(stepSpecPrpty.getChgServSpecId())) {      sql.setNullLong("chgServSpecId");     } else {    sql.setLong("chgServSpecId", stepSpecPrpty.getChgServSpecId());    }       if (StringUtil.isBlank(stepSpecPrpty.getComponentCode())) {      sql.setNullString("componentCode");     } else {    sql.setString("componentCode", stepSpecPrpty.getComponentCode());    }       if (StringUtil.isBlank(stepSpecPrpty.getFillType())) {      sql.setNullString("fillType");     } else {    sql.setString("fillType", stepSpecPrpty.getFillType());    }       if (StringUtil.isBlank(stepSpecPrpty.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepSpecPrpty.getLocalNetId());    }       if (StringUtil.isBlank(stepSpecPrpty.getNeedFlag())) {      sql.setNullString("needFlag");     } else {    sql.setString("needFlag", stepSpecPrpty.getNeedFlag());    }       if (StringUtil.isBlank(stepSpecPrpty.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", stepSpecPrpty.getProdId());    }       if (StringUtil.isBlank(stepSpecPrpty.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepSpecPrpty.getRemarks());    }       if (StringUtil.isBlank(stepSpecPrpty.getSpecPrptyId())) {      sql.setNullLong("specPrptyId");     } else {    sql.setLong("specPrptyId", stepSpecPrpty.getSpecPrptyId());    }       if (StringUtil.isBlank(stepSpecPrpty.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepSpecPrpty.getStepId());    }       if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {      sql.setNullLong("stepSpecPrptyId");     } else {    sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());    }       if (StringUtil.isBlank(stepSpecPrpty.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepSpecPrpty.getSts());    }    if (stepSpecPrpty.getStsState() == null) {      sql.setNullDate("stsState");     } else {    sql.setTimestamp("stsState", stepSpecPrpty.getStsState());    }       if (StringUtil.isBlank(stepSpecPrpty.getSubProdId())) {      sql.setNullLong("subProdId");     } else {    sql.setLong("subProdId", stepSpecPrpty.getSubProdId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;    if (StringUtil.isBlank(stepSpecPrpty.getStepSpecPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM STEP_SPEC_PRPTY WHERE 1=1  ");sql.append(" and STEP_SPEC_PRPTY_ID=:stepSpecPrptyId");sql.setLong("stepSpecPrptyId", stepSpecPrpty.getStepSpecPrptyId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     StepSpecPrptySVO stepSpecPrpty=(StepSpecPrptySVO) vo;       }}
