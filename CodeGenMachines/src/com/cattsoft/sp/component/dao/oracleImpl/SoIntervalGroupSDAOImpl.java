package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoIntervalGroupSDAO;import com.cattsoft.sp.vo.SoIntervalGroupSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoIntervalGroupSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoIntervalGroupSDAOImpl implements ISoIntervalGroupSDAO{    private static Logger log = Logger.getLogger(SoIntervalGroupSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_INTERVAL_GROUP(ACT_TYPE,EFF_DATE,EXP_DATE,INTERNAL_GROUP_ID,INTERNAL_GROUP_NAME,INTERNAL_GROUP_NO,INTERNAL_MAX_NUM,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_INST_ID,REMARK,SERV_INST_ID,SO_NBR,STS,STS_DATE)");sql.append(" VALUES (:actType,:effDate,:expDate,:internalGroupId,:internalGroupName,:internalGroupNo,:internalMaxNum,:localNetId,:noFlag,:pricePlanInstId,:remark,:servInstId,:soNbr,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(soIntervalGroup.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soIntervalGroup.getActType());    }    if (soIntervalGroup.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soIntervalGroup.getEffDate());    }    if (soIntervalGroup.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soIntervalGroup.getExpDate());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupId())) {      sql.setNullLong("internalGroupId");     } else {    sql.setLong("internalGroupId", soIntervalGroup.getInternalGroupId());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupName())) {      sql.setNullString("internalGroupName");     } else {    sql.setString("internalGroupName", soIntervalGroup.getInternalGroupName());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupNo())) {      sql.setNullString("internalGroupNo");     } else {    sql.setString("internalGroupNo", soIntervalGroup.getInternalGroupNo());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalMaxNum())) {      sql.setNullLong("internalMaxNum");     } else {    sql.setLong("internalMaxNum", soIntervalGroup.getInternalMaxNum());    }       if (StringUtil.isBlank(soIntervalGroup.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soIntervalGroup.getLocalNetId());    }       if (StringUtil.isBlank(soIntervalGroup.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soIntervalGroup.getNoFlag());    }       if (StringUtil.isBlank(soIntervalGroup.getPricePlanInstId())) {      sql.setNullLong("pricePlanInstId");     } else {    sql.setLong("pricePlanInstId", soIntervalGroup.getPricePlanInstId());    }       if (StringUtil.isBlank(soIntervalGroup.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", soIntervalGroup.getRemark());    }       if (StringUtil.isBlank(soIntervalGroup.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soIntervalGroup.getServInstId());    }       if (StringUtil.isBlank(soIntervalGroup.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soIntervalGroup.getSoNbr());    }       if (StringUtil.isBlank(soIntervalGroup.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soIntervalGroup.getSts());    }    if (soIntervalGroup.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soIntervalGroup.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;       Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,INTERNAL_GROUP_ID,INTERNAL_GROUP_NAME,INTERNAL_GROUP_NO,INTERNAL_MAX_NUM,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_INST_ID,REMARK,SERV_INST_ID,SO_NBR,STS,STS_DATE FROM SO_INTERVAL_GROUP WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      soIntervalGroup =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           soIntervalGroup = new SoIntervalGroupSVO();           soIntervalGroup.setActType(rs.getString("ACT_TYPE"));           soIntervalGroup.setEffDate(rs.getTimestamp("EFF_DATE"));           soIntervalGroup.setExpDate(rs.getTimestamp("EXP_DATE"));           soIntervalGroup.setInternalGroupId(rs.getString("INTERNAL_GROUP_ID"));           soIntervalGroup.setInternalGroupName(rs.getString("INTERNAL_GROUP_NAME"));           soIntervalGroup.setInternalGroupNo(rs.getString("INTERNAL_GROUP_NO"));           soIntervalGroup.setInternalMaxNum(rs.getString("INTERNAL_MAX_NUM"));           soIntervalGroup.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soIntervalGroup.setNoFlag(rs.getString("NO_FLAG"));           soIntervalGroup.setPricePlanInstId(rs.getString("PRICE_PLAN_INST_ID"));           soIntervalGroup.setRemark(rs.getString("REMARK"));           soIntervalGroup.setServInstId(rs.getString("SERV_INST_ID"));           soIntervalGroup.setSoNbr(rs.getString("SO_NBR"));           soIntervalGroup.setSts(rs.getString("STS"));           soIntervalGroup.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return soIntervalGroup;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,INTERNAL_GROUP_ID,INTERNAL_GROUP_NAME,INTERNAL_GROUP_NO,INTERNAL_MAX_NUM,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_INST_ID,REMARK,SERV_INST_ID,SO_NBR,STS,STS_DATE FROM SO_INTERVAL_GROUP WHERE 1=1 ");     try {if (soIntervalGroup.getFlagActType() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", soIntervalGroup.getActType());          }   } if (soIntervalGroup.getFlagEffDate() == 1) {      if (soIntervalGroup.getEffDate() == null) {             sql.append(" and EFF_DATE is null ");          }      else{             sql.append(" and EFF_DATE=:effDate");             sql.setTimestamp("effDate", soIntervalGroup.getEffDate());          }   } if (soIntervalGroup.getFlagExpDate() == 1) {      if (soIntervalGroup.getExpDate() == null) {             sql.append(" and EXP_DATE is null ");          }      else{             sql.append(" and EXP_DATE=:expDate");             sql.setTimestamp("expDate", soIntervalGroup.getExpDate());          }   } if (soIntervalGroup.getFlagInternalGroupId() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getInternalGroupId())) {             sql.append(" and INTERNAL_GROUP_ID is null ");          }      else{             sql.append(" and INTERNAL_GROUP_ID=:internalGroupId");             sql.setLong("internalGroupId", soIntervalGroup.getInternalGroupId());          }   } if (soIntervalGroup.getFlagInternalGroupName() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getInternalGroupName())) {             sql.append(" and INTERNAL_GROUP_NAME is null ");          }      else{             sql.append(" and INTERNAL_GROUP_NAME=:internalGroupName");             sql.setString("internalGroupName", soIntervalGroup.getInternalGroupName());          }   } if (soIntervalGroup.getFlagInternalGroupNo() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getInternalGroupNo())) {             sql.append(" and INTERNAL_GROUP_NO is null ");          }      else{             sql.append(" and INTERNAL_GROUP_NO=:internalGroupNo");             sql.setString("internalGroupNo", soIntervalGroup.getInternalGroupNo());          }   } if (soIntervalGroup.getFlagInternalMaxNum() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getInternalMaxNum())) {             sql.append(" and INTERNAL_MAX_NUM is null ");          }      else{             sql.append(" and INTERNAL_MAX_NUM=:internalMaxNum");             sql.setLong("internalMaxNum", soIntervalGroup.getInternalMaxNum());          }   } if (soIntervalGroup.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", soIntervalGroup.getLocalNetId());          }   } if (soIntervalGroup.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", soIntervalGroup.getNoFlag());          }   } if (soIntervalGroup.getFlagPricePlanInstId() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getPricePlanInstId())) {             sql.append(" and PRICE_PLAN_INST_ID is null ");          }      else{             sql.append(" and PRICE_PLAN_INST_ID=:pricePlanInstId");             sql.setLong("pricePlanInstId", soIntervalGroup.getPricePlanInstId());          }   } if (soIntervalGroup.getFlagRemark() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getRemark())) {             sql.append(" and REMARK is null ");          }      else{             sql.append(" and REMARK=:remark");             sql.setString("remark", soIntervalGroup.getRemark());          }   } if (soIntervalGroup.getFlagServInstId() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", soIntervalGroup.getServInstId());          }   } if (soIntervalGroup.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", soIntervalGroup.getSoNbr());          }   } if (soIntervalGroup.getFlagSts() == 1) {      if (StringUtil.isBlank(soIntervalGroup.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", soIntervalGroup.getSts());          }   } if (soIntervalGroup.getFlagStsDate() == 1) {      if (soIntervalGroup.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", soIntervalGroup.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           soIntervalGroup = new SoIntervalGroupSVO();           soIntervalGroup.setActType(rs.getString("ACT_TYPE"));           soIntervalGroup.setEffDate(rs.getTimestamp("EFF_DATE"));           soIntervalGroup.setExpDate(rs.getTimestamp("EXP_DATE"));           soIntervalGroup.setInternalGroupId(rs.getString("INTERNAL_GROUP_ID"));           soIntervalGroup.setInternalGroupName(rs.getString("INTERNAL_GROUP_NAME"));           soIntervalGroup.setInternalGroupNo(rs.getString("INTERNAL_GROUP_NO"));           soIntervalGroup.setInternalMaxNum(rs.getString("INTERNAL_MAX_NUM"));           soIntervalGroup.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soIntervalGroup.setNoFlag(rs.getString("NO_FLAG"));           soIntervalGroup.setPricePlanInstId(rs.getString("PRICE_PLAN_INST_ID"));           soIntervalGroup.setRemark(rs.getString("REMARK"));           soIntervalGroup.setServInstId(rs.getString("SERV_INST_ID"));           soIntervalGroup.setSoNbr(rs.getString("SO_NBR"));           soIntervalGroup.setSts(rs.getString("STS"));           soIntervalGroup.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(soIntervalGroup);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO_INTERVAL_GROUP SET ");     try {if (soIntervalGroup.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", soIntervalGroup.getActType()); } if (soIntervalGroup.getFlagEffDate() == 1) {sql.append("EFF_DATE=:effDate,"); sql.setTimestamp("effDate", soIntervalGroup.getEffDate()); } if (soIntervalGroup.getFlagExpDate() == 1) {sql.append("EXP_DATE=:expDate,"); sql.setTimestamp("expDate", soIntervalGroup.getExpDate()); } if (soIntervalGroup.getFlagInternalGroupId() == 1) {sql.append("INTERNAL_GROUP_ID=:internalGroupId,");sql.setLong("internalGroupId", soIntervalGroup.getInternalGroupId()); } if (soIntervalGroup.getFlagInternalGroupName() == 1) {sql.append("INTERNAL_GROUP_NAME=:internalGroupName,"); sql.setString("internalGroupName", soIntervalGroup.getInternalGroupName()); } if (soIntervalGroup.getFlagInternalGroupNo() == 1) {sql.append("INTERNAL_GROUP_NO=:internalGroupNo,"); sql.setString("internalGroupNo", soIntervalGroup.getInternalGroupNo()); } if (soIntervalGroup.getFlagInternalMaxNum() == 1) {sql.append("INTERNAL_MAX_NUM=:internalMaxNum,");sql.setLong("internalMaxNum", soIntervalGroup.getInternalMaxNum()); } if (soIntervalGroup.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", soIntervalGroup.getLocalNetId()); } if (soIntervalGroup.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", soIntervalGroup.getNoFlag()); } if (soIntervalGroup.getFlagPricePlanInstId() == 1) {sql.append("PRICE_PLAN_INST_ID=:pricePlanInstId,");sql.setLong("pricePlanInstId", soIntervalGroup.getPricePlanInstId()); } if (soIntervalGroup.getFlagRemark() == 1) {sql.append("REMARK=:remark,"); sql.setString("remark", soIntervalGroup.getRemark()); } if (soIntervalGroup.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", soIntervalGroup.getServInstId()); } if (soIntervalGroup.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", soIntervalGroup.getSoNbr()); } if (soIntervalGroup.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", soIntervalGroup.getSts()); } if (soIntervalGroup.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", soIntervalGroup.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_INTERVAL_GROUP(ACT_TYPE,EFF_DATE,EXP_DATE,INTERNAL_GROUP_ID,INTERNAL_GROUP_NAME,INTERNAL_GROUP_NO,INTERNAL_MAX_NUM,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_INST_ID,REMARK,SERV_INST_ID,SO_NBR,STS,STS_DATE)");sql.append(" VALUES (:actType,:effDate,:expDate,:internalGroupId,:internalGroupName,:internalGroupNo,:internalMaxNum,:localNetId,:noFlag,:pricePlanInstId,:remark,:servInstId,:soNbr,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) list.get(i);         if (soIntervalGroup== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(soIntervalGroup.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soIntervalGroup.getActType());    }    if (soIntervalGroup.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soIntervalGroup.getEffDate());    }    if (soIntervalGroup.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soIntervalGroup.getExpDate());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupId())) {      sql.setNullLong("internalGroupId");     } else {    sql.setLong("internalGroupId", soIntervalGroup.getInternalGroupId());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupName())) {      sql.setNullString("internalGroupName");     } else {    sql.setString("internalGroupName", soIntervalGroup.getInternalGroupName());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalGroupNo())) {      sql.setNullString("internalGroupNo");     } else {    sql.setString("internalGroupNo", soIntervalGroup.getInternalGroupNo());    }       if (StringUtil.isBlank(soIntervalGroup.getInternalMaxNum())) {      sql.setNullLong("internalMaxNum");     } else {    sql.setLong("internalMaxNum", soIntervalGroup.getInternalMaxNum());    }       if (StringUtil.isBlank(soIntervalGroup.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soIntervalGroup.getLocalNetId());    }       if (StringUtil.isBlank(soIntervalGroup.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soIntervalGroup.getNoFlag());    }       if (StringUtil.isBlank(soIntervalGroup.getPricePlanInstId())) {      sql.setNullLong("pricePlanInstId");     } else {    sql.setLong("pricePlanInstId", soIntervalGroup.getPricePlanInstId());    }       if (StringUtil.isBlank(soIntervalGroup.getRemark())) {      sql.setNullString("remark");     } else {    sql.setString("remark", soIntervalGroup.getRemark());    }       if (StringUtil.isBlank(soIntervalGroup.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soIntervalGroup.getServInstId());    }       if (StringUtil.isBlank(soIntervalGroup.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soIntervalGroup.getSoNbr());    }       if (StringUtil.isBlank(soIntervalGroup.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soIntervalGroup.getSts());    }    if (soIntervalGroup.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soIntervalGroup.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO_INTERVAL_GROUP WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoIntervalGroupSVO soIntervalGroup=(SoIntervalGroupSVO) vo;       }}
