package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ITempFeeSoMainProdPrptySDAO;import com.cattsoft.sp.vo.TempFeeSoMainProdPrptySVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TempFeeSoMainProdPrptySDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TempFeeSoMainProdPrptySDAOImpl implements ITempFeeSoMainProdPrptySDAO{    private static Logger log = Logger.getLogger(TempFeeSoMainProdPrptySDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;    if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_MAIN_PROD_PRPTY(ACT_TYPE,CHANGED_FLAG,LOCAL_NET_ID,PARENT_PRPTY_ID,PARENT_PRPTY_INST_ID,SORT_POSITION,SPEC_PRPTY_ID,SPEC_PRPTY_NAME,SPEC_PRPTY_VALUE,SPEC_PRPTY_VALUE_ID,SPV_SEQ,STS,STS_DATE,TEMP_FEE_SO_MAIN_PROD_ID,TEMP_FEE_SO_MAIN_PROD_PRPTY_ID)");sql.append(" VALUES (:actType,:changedFlag,:localNetId,:parentPrptyId,:parentPrptyInstId,:sortPosition,:specPrptyId,:specPrptyName,:specPrptyValue,:specPrptyValueId,:spvSeq,:sts,:stsDate,:tempFeeSoMainProdId,:tempFeeSoMainProdPrptyId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoMainProdPrpty.getActType());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getChangedFlag())) {      sql.setNullString("changedFlag");     } else {    sql.setString("changedFlag", tempFeeSoMainProdPrpty.getChangedFlag());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoMainProdPrpty.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyId())) {      sql.setNullLong("parentPrptyId");     } else {    sql.setLong("parentPrptyId", tempFeeSoMainProdPrpty.getParentPrptyId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyInstId())) {      sql.setNullLong("parentPrptyInstId");     } else {    sql.setLong("parentPrptyInstId", tempFeeSoMainProdPrpty.getParentPrptyInstId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSortPosition())) {      sql.setNullLong("sortPosition");     } else {    sql.setLong("sortPosition", tempFeeSoMainProdPrpty.getSortPosition());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyId())) {      sql.setNullLong("specPrptyId");     } else {    sql.setLong("specPrptyId", tempFeeSoMainProdPrpty.getSpecPrptyId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyName())) {      sql.setNullString("specPrptyName");     } else {    sql.setString("specPrptyName", tempFeeSoMainProdPrpty.getSpecPrptyName());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValue())) {      sql.setNullString("specPrptyValue");     } else {    sql.setString("specPrptyValue", tempFeeSoMainProdPrpty.getSpecPrptyValue());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValueId())) {      sql.setNullLong("specPrptyValueId");     } else {    sql.setLong("specPrptyValueId", tempFeeSoMainProdPrpty.getSpecPrptyValueId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpvSeq())) {      sql.setNullLong("spvSeq");     } else {    sql.setLong("spvSeq", tempFeeSoMainProdPrpty.getSpvSeq());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoMainProdPrpty.getSts());    }    if (tempFeeSoMainProdPrpty.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoMainProdPrpty.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdId())) {      sql.setNullLong("tempFeeSoMainProdId");     } else {    sql.setLong("tempFeeSoMainProdId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {      sql.setNullLong("tempFeeSoMainProdPrptyId");     } else {    sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;    if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACT_TYPE,CHANGED_FLAG,LOCAL_NET_ID,PARENT_PRPTY_ID,PARENT_PRPTY_INST_ID,SORT_POSITION,SPEC_PRPTY_ID,SPEC_PRPTY_NAME,SPEC_PRPTY_VALUE,SPEC_PRPTY_VALUE_ID,SPV_SEQ,STS,STS_DATE,TEMP_FEE_SO_MAIN_PROD_ID,TEMP_FEE_SO_MAIN_PROD_PRPTY_ID FROM TEMP_FEE_SO_MAIN_PROD_PRPTY WHERE 1=1  ");sql.append(" and TEMP_FEE_SO_MAIN_PROD_PRPTY_ID=:tempFeeSoMainProdPrptyId");sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tempFeeSoMainProdPrpty =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tempFeeSoMainProdPrpty = new TempFeeSoMainProdPrptySVO();           tempFeeSoMainProdPrpty.setActType(rs.getString("ACT_TYPE"));           tempFeeSoMainProdPrpty.setChangedFlag(rs.getString("CHANGED_FLAG"));           tempFeeSoMainProdPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoMainProdPrpty.setParentPrptyId(rs.getString("PARENT_PRPTY_ID"));           tempFeeSoMainProdPrpty.setParentPrptyInstId(rs.getString("PARENT_PRPTY_INST_ID"));           tempFeeSoMainProdPrpty.setSortPosition(rs.getString("SORT_POSITION"));           tempFeeSoMainProdPrpty.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           tempFeeSoMainProdPrpty.setSpecPrptyName(rs.getString("SPEC_PRPTY_NAME"));           tempFeeSoMainProdPrpty.setSpecPrptyValue(rs.getString("SPEC_PRPTY_VALUE"));           tempFeeSoMainProdPrpty.setSpecPrptyValueId(rs.getString("SPEC_PRPTY_VALUE_ID"));           tempFeeSoMainProdPrpty.setSpvSeq(rs.getString("SPV_SEQ"));           tempFeeSoMainProdPrpty.setSts(rs.getString("STS"));           tempFeeSoMainProdPrpty.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoMainProdPrpty.setTempFeeSoMainProdId(rs.getString("TEMP_FEE_SO_MAIN_PROD_ID"));           tempFeeSoMainProdPrpty.setTempFeeSoMainProdPrptyId(rs.getString("TEMP_FEE_SO_MAIN_PROD_PRPTY_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tempFeeSoMainProdPrpty;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,CHANGED_FLAG,LOCAL_NET_ID,PARENT_PRPTY_ID,PARENT_PRPTY_INST_ID,SORT_POSITION,SPEC_PRPTY_ID,SPEC_PRPTY_NAME,SPEC_PRPTY_VALUE,SPEC_PRPTY_VALUE_ID,SPV_SEQ,STS,STS_DATE,TEMP_FEE_SO_MAIN_PROD_ID,TEMP_FEE_SO_MAIN_PROD_PRPTY_ID FROM TEMP_FEE_SO_MAIN_PROD_PRPTY WHERE 1=1 ");     try {if (tempFeeSoMainProdPrpty.getFlagActType() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", tempFeeSoMainProdPrpty.getActType());          }   } if (tempFeeSoMainProdPrpty.getFlagChangedFlag() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getChangedFlag())) {             sql.append(" and CHANGED_FLAG is null ");          }      else{             sql.append(" and CHANGED_FLAG=:changedFlag");             sql.setString("changedFlag", tempFeeSoMainProdPrpty.getChangedFlag());          }   } if (tempFeeSoMainProdPrpty.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", tempFeeSoMainProdPrpty.getLocalNetId());          }   } if (tempFeeSoMainProdPrpty.getFlagParentPrptyId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyId())) {             sql.append(" and PARENT_PRPTY_ID is null ");          }      else{             sql.append(" and PARENT_PRPTY_ID=:parentPrptyId");             sql.setLong("parentPrptyId", tempFeeSoMainProdPrpty.getParentPrptyId());          }   } if (tempFeeSoMainProdPrpty.getFlagParentPrptyInstId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyInstId())) {             sql.append(" and PARENT_PRPTY_INST_ID is null ");          }      else{             sql.append(" and PARENT_PRPTY_INST_ID=:parentPrptyInstId");             sql.setLong("parentPrptyInstId", tempFeeSoMainProdPrpty.getParentPrptyInstId());          }   } if (tempFeeSoMainProdPrpty.getFlagSortPosition() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSortPosition())) {             sql.append(" and SORT_POSITION is null ");          }      else{             sql.append(" and SORT_POSITION=:sortPosition");             sql.setLong("sortPosition", tempFeeSoMainProdPrpty.getSortPosition());          }   } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyId())) {             sql.append(" and SPEC_PRPTY_ID is null ");          }      else{             sql.append(" and SPEC_PRPTY_ID=:specPrptyId");             sql.setLong("specPrptyId", tempFeeSoMainProdPrpty.getSpecPrptyId());          }   } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyName() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyName())) {             sql.append(" and SPEC_PRPTY_NAME is null ");          }      else{             sql.append(" and SPEC_PRPTY_NAME=:specPrptyName");             sql.setString("specPrptyName", tempFeeSoMainProdPrpty.getSpecPrptyName());          }   } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyValue() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValue())) {             sql.append(" and SPEC_PRPTY_VALUE is null ");          }      else{             sql.append(" and SPEC_PRPTY_VALUE=:specPrptyValue");             sql.setString("specPrptyValue", tempFeeSoMainProdPrpty.getSpecPrptyValue());          }   } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyValueId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValueId())) {             sql.append(" and SPEC_PRPTY_VALUE_ID is null ");          }      else{             sql.append(" and SPEC_PRPTY_VALUE_ID=:specPrptyValueId");             sql.setLong("specPrptyValueId", tempFeeSoMainProdPrpty.getSpecPrptyValueId());          }   } if (tempFeeSoMainProdPrpty.getFlagSpvSeq() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpvSeq())) {             sql.append(" and SPV_SEQ is null ");          }      else{             sql.append(" and SPV_SEQ=:spvSeq");             sql.setLong("spvSeq", tempFeeSoMainProdPrpty.getSpvSeq());          }   } if (tempFeeSoMainProdPrpty.getFlagSts() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tempFeeSoMainProdPrpty.getSts());          }   } if (tempFeeSoMainProdPrpty.getFlagStsDate() == 1) {      if (tempFeeSoMainProdPrpty.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", tempFeeSoMainProdPrpty.getStsDate());          }   } if (tempFeeSoMainProdPrpty.getFlagTempFeeSoMainProdId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdId())) {             sql.append(" and TEMP_FEE_SO_MAIN_PROD_ID is null ");          }      else{             sql.append(" and TEMP_FEE_SO_MAIN_PROD_ID=:tempFeeSoMainProdId");             sql.setLong("tempFeeSoMainProdId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdId());          }   } if (tempFeeSoMainProdPrpty.getFlagTempFeeSoMainProdPrptyId() == 1) {      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {             sql.append(" and TEMP_FEE_SO_MAIN_PROD_PRPTY_ID is null ");          }      else{             sql.append(" and TEMP_FEE_SO_MAIN_PROD_PRPTY_ID=:tempFeeSoMainProdPrptyId");             sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tempFeeSoMainProdPrpty = new TempFeeSoMainProdPrptySVO();           tempFeeSoMainProdPrpty.setActType(rs.getString("ACT_TYPE"));           tempFeeSoMainProdPrpty.setChangedFlag(rs.getString("CHANGED_FLAG"));           tempFeeSoMainProdPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoMainProdPrpty.setParentPrptyId(rs.getString("PARENT_PRPTY_ID"));           tempFeeSoMainProdPrpty.setParentPrptyInstId(rs.getString("PARENT_PRPTY_INST_ID"));           tempFeeSoMainProdPrpty.setSortPosition(rs.getString("SORT_POSITION"));           tempFeeSoMainProdPrpty.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           tempFeeSoMainProdPrpty.setSpecPrptyName(rs.getString("SPEC_PRPTY_NAME"));           tempFeeSoMainProdPrpty.setSpecPrptyValue(rs.getString("SPEC_PRPTY_VALUE"));           tempFeeSoMainProdPrpty.setSpecPrptyValueId(rs.getString("SPEC_PRPTY_VALUE_ID"));           tempFeeSoMainProdPrpty.setSpvSeq(rs.getString("SPV_SEQ"));           tempFeeSoMainProdPrpty.setSts(rs.getString("STS"));           tempFeeSoMainProdPrpty.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoMainProdPrpty.setTempFeeSoMainProdId(rs.getString("TEMP_FEE_SO_MAIN_PROD_ID"));           tempFeeSoMainProdPrpty.setTempFeeSoMainProdPrptyId(rs.getString("TEMP_FEE_SO_MAIN_PROD_PRPTY_ID"));               res.add(tempFeeSoMainProdPrpty);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;    if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TEMP_FEE_SO_MAIN_PROD_PRPTY SET ");     try {if (tempFeeSoMainProdPrpty.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", tempFeeSoMainProdPrpty.getActType()); } if (tempFeeSoMainProdPrpty.getFlagChangedFlag() == 1) {sql.append("CHANGED_FLAG=:changedFlag,"); sql.setString("changedFlag", tempFeeSoMainProdPrpty.getChangedFlag()); } if (tempFeeSoMainProdPrpty.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", tempFeeSoMainProdPrpty.getLocalNetId()); } if (tempFeeSoMainProdPrpty.getFlagParentPrptyId() == 1) {sql.append("PARENT_PRPTY_ID=:parentPrptyId,");sql.setLong("parentPrptyId", tempFeeSoMainProdPrpty.getParentPrptyId()); } if (tempFeeSoMainProdPrpty.getFlagParentPrptyInstId() == 1) {sql.append("PARENT_PRPTY_INST_ID=:parentPrptyInstId,");sql.setLong("parentPrptyInstId", tempFeeSoMainProdPrpty.getParentPrptyInstId()); } if (tempFeeSoMainProdPrpty.getFlagSortPosition() == 1) {sql.append("SORT_POSITION=:sortPosition,");sql.setLong("sortPosition", tempFeeSoMainProdPrpty.getSortPosition()); } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyId() == 1) {sql.append("SPEC_PRPTY_ID=:specPrptyId,");sql.setLong("specPrptyId", tempFeeSoMainProdPrpty.getSpecPrptyId()); } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyName() == 1) {sql.append("SPEC_PRPTY_NAME=:specPrptyName,"); sql.setString("specPrptyName", tempFeeSoMainProdPrpty.getSpecPrptyName()); } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyValue() == 1) {sql.append("SPEC_PRPTY_VALUE=:specPrptyValue,"); sql.setString("specPrptyValue", tempFeeSoMainProdPrpty.getSpecPrptyValue()); } if (tempFeeSoMainProdPrpty.getFlagSpecPrptyValueId() == 1) {sql.append("SPEC_PRPTY_VALUE_ID=:specPrptyValueId,");sql.setLong("specPrptyValueId", tempFeeSoMainProdPrpty.getSpecPrptyValueId()); } if (tempFeeSoMainProdPrpty.getFlagSpvSeq() == 1) {sql.append("SPV_SEQ=:spvSeq,");sql.setLong("spvSeq", tempFeeSoMainProdPrpty.getSpvSeq()); } if (tempFeeSoMainProdPrpty.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tempFeeSoMainProdPrpty.getSts()); } if (tempFeeSoMainProdPrpty.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", tempFeeSoMainProdPrpty.getStsDate()); } if (tempFeeSoMainProdPrpty.getFlagTempFeeSoMainProdId() == 1) {sql.append("TEMP_FEE_SO_MAIN_PROD_ID=:tempFeeSoMainProdId,");sql.setLong("tempFeeSoMainProdId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and TEMP_FEE_SO_MAIN_PROD_PRPTY_ID=:tempFeeSoMainProdPrptyId");sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_MAIN_PROD_PRPTY(ACT_TYPE,CHANGED_FLAG,LOCAL_NET_ID,PARENT_PRPTY_ID,PARENT_PRPTY_INST_ID,SORT_POSITION,SPEC_PRPTY_ID,SPEC_PRPTY_NAME,SPEC_PRPTY_VALUE,SPEC_PRPTY_VALUE_ID,SPV_SEQ,STS,STS_DATE,TEMP_FEE_SO_MAIN_PROD_ID,TEMP_FEE_SO_MAIN_PROD_PRPTY_ID)");sql.append(" VALUES (:actType,:changedFlag,:localNetId,:parentPrptyId,:parentPrptyInstId,:sortPosition,:specPrptyId,:specPrptyName,:specPrptyValue,:specPrptyValueId,:spvSeq,:sts,:stsDate,:tempFeeSoMainProdId,:tempFeeSoMainProdPrptyId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) list.get(i);         if (tempFeeSoMainProdPrpty== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoMainProdPrpty.getActType());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getChangedFlag())) {      sql.setNullString("changedFlag");     } else {    sql.setString("changedFlag", tempFeeSoMainProdPrpty.getChangedFlag());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoMainProdPrpty.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyId())) {      sql.setNullLong("parentPrptyId");     } else {    sql.setLong("parentPrptyId", tempFeeSoMainProdPrpty.getParentPrptyId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getParentPrptyInstId())) {      sql.setNullLong("parentPrptyInstId");     } else {    sql.setLong("parentPrptyInstId", tempFeeSoMainProdPrpty.getParentPrptyInstId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSortPosition())) {      sql.setNullLong("sortPosition");     } else {    sql.setLong("sortPosition", tempFeeSoMainProdPrpty.getSortPosition());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyId())) {      sql.setNullLong("specPrptyId");     } else {    sql.setLong("specPrptyId", tempFeeSoMainProdPrpty.getSpecPrptyId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyName())) {      sql.setNullString("specPrptyName");     } else {    sql.setString("specPrptyName", tempFeeSoMainProdPrpty.getSpecPrptyName());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValue())) {      sql.setNullString("specPrptyValue");     } else {    sql.setString("specPrptyValue", tempFeeSoMainProdPrpty.getSpecPrptyValue());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpecPrptyValueId())) {      sql.setNullLong("specPrptyValueId");     } else {    sql.setLong("specPrptyValueId", tempFeeSoMainProdPrpty.getSpecPrptyValueId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSpvSeq())) {      sql.setNullLong("spvSeq");     } else {    sql.setLong("spvSeq", tempFeeSoMainProdPrpty.getSpvSeq());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoMainProdPrpty.getSts());    }    if (tempFeeSoMainProdPrpty.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoMainProdPrpty.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdId())) {      sql.setNullLong("tempFeeSoMainProdId");     } else {    sql.setLong("tempFeeSoMainProdId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdId());    }       if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {      sql.setNullLong("tempFeeSoMainProdPrptyId");     } else {    sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;    if (StringUtil.isBlank(tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TEMP_FEE_SO_MAIN_PROD_PRPTY WHERE 1=1  ");sql.append(" and TEMP_FEE_SO_MAIN_PROD_PRPTY_ID=:tempFeeSoMainProdPrptyId");sql.setLong("tempFeeSoMainProdPrptyId", tempFeeSoMainProdPrpty.getTempFeeSoMainProdPrptyId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TempFeeSoMainProdPrptySVO tempFeeSoMainProdPrpty=(TempFeeSoMainProdPrptySVO) vo;       }}
