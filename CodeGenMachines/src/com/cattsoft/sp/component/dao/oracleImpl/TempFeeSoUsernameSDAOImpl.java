package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ITempFeeSoUsernameSDAO;import com.cattsoft.sp.vo.TempFeeSoUsernameSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TempFeeSoUsernameSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TempFeeSoUsernameSDAOImpl implements ITempFeeSoUsernameSDAO{    private static Logger log = Logger.getLogger(TempFeeSoUsernameSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_USERNAME(ACT_TYPE,EMAIL_BOX,EMAIL_LEVEL,EMAIL_PWD,LOCAL_NET_ID,NO_FLAG,PASSWORD,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_USERNAME_ID,USERNAME,USERNAME1,USERNAME2,USERNAME3,USERNAME_TYPE,USER_LEVEL,WO_ACTION)");sql.append(" VALUES (:actType,:emailBox,:emailLevel,:emailPwd,:localNetId,:noFlag,:password,:soNbr,:sts,:stsDate,:tempFeeSoUsernameId,:username,:username1,:username2,:username3,:usernameType,:userLevel,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tempFeeSoUsername.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoUsername.getActType());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailBox())) {      sql.setNullString("emailBox");     } else {    sql.setString("emailBox", tempFeeSoUsername.getEmailBox());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailLevel())) {      sql.setNullLong("emailLevel");     } else {    sql.setLong("emailLevel", tempFeeSoUsername.getEmailLevel());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailPwd())) {      sql.setNullString("emailPwd");     } else {    sql.setString("emailPwd", tempFeeSoUsername.getEmailPwd());    }       if (StringUtil.isBlank(tempFeeSoUsername.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoUsername.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoUsername.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoUsername.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoUsername.getPassword())) {      sql.setNullString("password");     } else {    sql.setString("password", tempFeeSoUsername.getPassword());    }       if (StringUtil.isBlank(tempFeeSoUsername.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoUsername.getSoNbr());    }       if (StringUtil.isBlank(tempFeeSoUsername.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoUsername.getSts());    }    if (tempFeeSoUsername.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoUsername.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoUsername.getTempFeeSoUsernameId())) {      sql.setNullLong("tempFeeSoUsernameId");     } else {    sql.setLong("tempFeeSoUsernameId", tempFeeSoUsername.getTempFeeSoUsernameId());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername())) {      sql.setNullString("username");     } else {    sql.setString("username", tempFeeSoUsername.getUsername());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername1())) {      sql.setNullString("username1");     } else {    sql.setString("username1", tempFeeSoUsername.getUsername1());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername2())) {      sql.setNullString("username2");     } else {    sql.setString("username2", tempFeeSoUsername.getUsername2());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername3())) {      sql.setNullString("username3");     } else {    sql.setString("username3", tempFeeSoUsername.getUsername3());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsernameType())) {      sql.setNullString("usernameType");     } else {    sql.setString("usernameType", tempFeeSoUsername.getUsernameType());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUserLevel())) {      sql.setNullLong("userLevel");     } else {    sql.setLong("userLevel", tempFeeSoUsername.getUserLevel());    }       if (StringUtil.isBlank(tempFeeSoUsername.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoUsername.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;       Sql sql = new Sql("SELECT ACT_TYPE,EMAIL_BOX,EMAIL_LEVEL,EMAIL_PWD,LOCAL_NET_ID,NO_FLAG,PASSWORD,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_USERNAME_ID,USERNAME,USERNAME1,USERNAME2,USERNAME3,USERNAME_TYPE,USER_LEVEL,WO_ACTION FROM TEMP_FEE_SO_USERNAME WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tempFeeSoUsername =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tempFeeSoUsername = new TempFeeSoUsernameSVO();           tempFeeSoUsername.setActType(rs.getString("ACT_TYPE"));           tempFeeSoUsername.setEmailBox(rs.getString("EMAIL_BOX"));           tempFeeSoUsername.setEmailLevel(rs.getString("EMAIL_LEVEL"));           tempFeeSoUsername.setEmailPwd(rs.getString("EMAIL_PWD"));           tempFeeSoUsername.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoUsername.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoUsername.setPassword(rs.getString("PASSWORD"));           tempFeeSoUsername.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoUsername.setSts(rs.getString("STS"));           tempFeeSoUsername.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoUsername.setTempFeeSoUsernameId(rs.getString("TEMP_FEE_SO_USERNAME_ID"));           tempFeeSoUsername.setUsername(rs.getString("USERNAME"));           tempFeeSoUsername.setUsername1(rs.getString("USERNAME1"));           tempFeeSoUsername.setUsername2(rs.getString("USERNAME2"));           tempFeeSoUsername.setUsername3(rs.getString("USERNAME3"));           tempFeeSoUsername.setUsernameType(rs.getString("USERNAME_TYPE"));           tempFeeSoUsername.setUserLevel(rs.getString("USER_LEVEL"));           tempFeeSoUsername.setWoAction(rs.getString("WO_ACTION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tempFeeSoUsername;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,EMAIL_BOX,EMAIL_LEVEL,EMAIL_PWD,LOCAL_NET_ID,NO_FLAG,PASSWORD,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_USERNAME_ID,USERNAME,USERNAME1,USERNAME2,USERNAME3,USERNAME_TYPE,USER_LEVEL,WO_ACTION FROM TEMP_FEE_SO_USERNAME WHERE 1=1 ");     try {if (tempFeeSoUsername.getFlagActType() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", tempFeeSoUsername.getActType());          }   } if (tempFeeSoUsername.getFlagEmailBox() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getEmailBox())) {             sql.append(" and EMAIL_BOX is null ");          }      else{             sql.append(" and EMAIL_BOX=:emailBox");             sql.setString("emailBox", tempFeeSoUsername.getEmailBox());          }   } if (tempFeeSoUsername.getFlagEmailLevel() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getEmailLevel())) {             sql.append(" and EMAIL_LEVEL is null ");          }      else{             sql.append(" and EMAIL_LEVEL=:emailLevel");             sql.setLong("emailLevel", tempFeeSoUsername.getEmailLevel());          }   } if (tempFeeSoUsername.getFlagEmailPwd() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getEmailPwd())) {             sql.append(" and EMAIL_PWD is null ");          }      else{             sql.append(" and EMAIL_PWD=:emailPwd");             sql.setString("emailPwd", tempFeeSoUsername.getEmailPwd());          }   } if (tempFeeSoUsername.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", tempFeeSoUsername.getLocalNetId());          }   } if (tempFeeSoUsername.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", tempFeeSoUsername.getNoFlag());          }   } if (tempFeeSoUsername.getFlagPassword() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getPassword())) {             sql.append(" and PASSWORD is null ");          }      else{             sql.append(" and PASSWORD=:password");             sql.setString("password", tempFeeSoUsername.getPassword());          }   } if (tempFeeSoUsername.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", tempFeeSoUsername.getSoNbr());          }   } if (tempFeeSoUsername.getFlagSts() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tempFeeSoUsername.getSts());          }   } if (tempFeeSoUsername.getFlagStsDate() == 1) {      if (tempFeeSoUsername.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", tempFeeSoUsername.getStsDate());          }   } if (tempFeeSoUsername.getFlagTempFeeSoUsernameId() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getTempFeeSoUsernameId())) {             sql.append(" and TEMP_FEE_SO_USERNAME_ID is null ");          }      else{             sql.append(" and TEMP_FEE_SO_USERNAME_ID=:tempFeeSoUsernameId");             sql.setLong("tempFeeSoUsernameId", tempFeeSoUsername.getTempFeeSoUsernameId());          }   } if (tempFeeSoUsername.getFlagUsername() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUsername())) {             sql.append(" and USERNAME is null ");          }      else{             sql.append(" and USERNAME=:username");             sql.setString("username", tempFeeSoUsername.getUsername());          }   } if (tempFeeSoUsername.getFlagUsername1() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUsername1())) {             sql.append(" and USERNAME1 is null ");          }      else{             sql.append(" and USERNAME1=:username1");             sql.setString("username1", tempFeeSoUsername.getUsername1());          }   } if (tempFeeSoUsername.getFlagUsername2() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUsername2())) {             sql.append(" and USERNAME2 is null ");          }      else{             sql.append(" and USERNAME2=:username2");             sql.setString("username2", tempFeeSoUsername.getUsername2());          }   } if (tempFeeSoUsername.getFlagUsername3() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUsername3())) {             sql.append(" and USERNAME3 is null ");          }      else{             sql.append(" and USERNAME3=:username3");             sql.setString("username3", tempFeeSoUsername.getUsername3());          }   } if (tempFeeSoUsername.getFlagUsernameType() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUsernameType())) {             sql.append(" and USERNAME_TYPE is null ");          }      else{             sql.append(" and USERNAME_TYPE=:usernameType");             sql.setString("usernameType", tempFeeSoUsername.getUsernameType());          }   } if (tempFeeSoUsername.getFlagUserLevel() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getUserLevel())) {             sql.append(" and USER_LEVEL is null ");          }      else{             sql.append(" and USER_LEVEL=:userLevel");             sql.setLong("userLevel", tempFeeSoUsername.getUserLevel());          }   } if (tempFeeSoUsername.getFlagWoAction() == 1) {      if (StringUtil.isBlank(tempFeeSoUsername.getWoAction())) {             sql.append(" and WO_ACTION is null ");          }      else{             sql.append(" and WO_ACTION=:woAction");             sql.setString("woAction", tempFeeSoUsername.getWoAction());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tempFeeSoUsername = new TempFeeSoUsernameSVO();           tempFeeSoUsername.setActType(rs.getString("ACT_TYPE"));           tempFeeSoUsername.setEmailBox(rs.getString("EMAIL_BOX"));           tempFeeSoUsername.setEmailLevel(rs.getString("EMAIL_LEVEL"));           tempFeeSoUsername.setEmailPwd(rs.getString("EMAIL_PWD"));           tempFeeSoUsername.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoUsername.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoUsername.setPassword(rs.getString("PASSWORD"));           tempFeeSoUsername.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoUsername.setSts(rs.getString("STS"));           tempFeeSoUsername.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoUsername.setTempFeeSoUsernameId(rs.getString("TEMP_FEE_SO_USERNAME_ID"));           tempFeeSoUsername.setUsername(rs.getString("USERNAME"));           tempFeeSoUsername.setUsername1(rs.getString("USERNAME1"));           tempFeeSoUsername.setUsername2(rs.getString("USERNAME2"));           tempFeeSoUsername.setUsername3(rs.getString("USERNAME3"));           tempFeeSoUsername.setUsernameType(rs.getString("USERNAME_TYPE"));           tempFeeSoUsername.setUserLevel(rs.getString("USER_LEVEL"));           tempFeeSoUsername.setWoAction(rs.getString("WO_ACTION"));               res.add(tempFeeSoUsername);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TEMP_FEE_SO_USERNAME SET ");     try {if (tempFeeSoUsername.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", tempFeeSoUsername.getActType()); } if (tempFeeSoUsername.getFlagEmailBox() == 1) {sql.append("EMAIL_BOX=:emailBox,"); sql.setString("emailBox", tempFeeSoUsername.getEmailBox()); } if (tempFeeSoUsername.getFlagEmailLevel() == 1) {sql.append("EMAIL_LEVEL=:emailLevel,");sql.setLong("emailLevel", tempFeeSoUsername.getEmailLevel()); } if (tempFeeSoUsername.getFlagEmailPwd() == 1) {sql.append("EMAIL_PWD=:emailPwd,"); sql.setString("emailPwd", tempFeeSoUsername.getEmailPwd()); } if (tempFeeSoUsername.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", tempFeeSoUsername.getLocalNetId()); } if (tempFeeSoUsername.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", tempFeeSoUsername.getNoFlag()); } if (tempFeeSoUsername.getFlagPassword() == 1) {sql.append("PASSWORD=:password,"); sql.setString("password", tempFeeSoUsername.getPassword()); } if (tempFeeSoUsername.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", tempFeeSoUsername.getSoNbr()); } if (tempFeeSoUsername.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tempFeeSoUsername.getSts()); } if (tempFeeSoUsername.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", tempFeeSoUsername.getStsDate()); } if (tempFeeSoUsername.getFlagTempFeeSoUsernameId() == 1) {sql.append("TEMP_FEE_SO_USERNAME_ID=:tempFeeSoUsernameId,");sql.setLong("tempFeeSoUsernameId", tempFeeSoUsername.getTempFeeSoUsernameId()); } if (tempFeeSoUsername.getFlagUsername() == 1) {sql.append("USERNAME=:username,"); sql.setString("username", tempFeeSoUsername.getUsername()); } if (tempFeeSoUsername.getFlagUsername1() == 1) {sql.append("USERNAME1=:username1,"); sql.setString("username1", tempFeeSoUsername.getUsername1()); } if (tempFeeSoUsername.getFlagUsername2() == 1) {sql.append("USERNAME2=:username2,"); sql.setString("username2", tempFeeSoUsername.getUsername2()); } if (tempFeeSoUsername.getFlagUsername3() == 1) {sql.append("USERNAME3=:username3,"); sql.setString("username3", tempFeeSoUsername.getUsername3()); } if (tempFeeSoUsername.getFlagUsernameType() == 1) {sql.append("USERNAME_TYPE=:usernameType,"); sql.setString("usernameType", tempFeeSoUsername.getUsernameType()); } if (tempFeeSoUsername.getFlagUserLevel() == 1) {sql.append("USER_LEVEL=:userLevel,");sql.setLong("userLevel", tempFeeSoUsername.getUserLevel()); } if (tempFeeSoUsername.getFlagWoAction() == 1) {sql.append("WO_ACTION=:woAction,"); sql.setString("woAction", tempFeeSoUsername.getWoAction()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_USERNAME(ACT_TYPE,EMAIL_BOX,EMAIL_LEVEL,EMAIL_PWD,LOCAL_NET_ID,NO_FLAG,PASSWORD,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_USERNAME_ID,USERNAME,USERNAME1,USERNAME2,USERNAME3,USERNAME_TYPE,USER_LEVEL,WO_ACTION)");sql.append(" VALUES (:actType,:emailBox,:emailLevel,:emailPwd,:localNetId,:noFlag,:password,:soNbr,:sts,:stsDate,:tempFeeSoUsernameId,:username,:username1,:username2,:username3,:usernameType,:userLevel,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) list.get(i);         if (tempFeeSoUsername== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tempFeeSoUsername.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoUsername.getActType());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailBox())) {      sql.setNullString("emailBox");     } else {    sql.setString("emailBox", tempFeeSoUsername.getEmailBox());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailLevel())) {      sql.setNullLong("emailLevel");     } else {    sql.setLong("emailLevel", tempFeeSoUsername.getEmailLevel());    }       if (StringUtil.isBlank(tempFeeSoUsername.getEmailPwd())) {      sql.setNullString("emailPwd");     } else {    sql.setString("emailPwd", tempFeeSoUsername.getEmailPwd());    }       if (StringUtil.isBlank(tempFeeSoUsername.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoUsername.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoUsername.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoUsername.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoUsername.getPassword())) {      sql.setNullString("password");     } else {    sql.setString("password", tempFeeSoUsername.getPassword());    }       if (StringUtil.isBlank(tempFeeSoUsername.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoUsername.getSoNbr());    }       if (StringUtil.isBlank(tempFeeSoUsername.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoUsername.getSts());    }    if (tempFeeSoUsername.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoUsername.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoUsername.getTempFeeSoUsernameId())) {      sql.setNullLong("tempFeeSoUsernameId");     } else {    sql.setLong("tempFeeSoUsernameId", tempFeeSoUsername.getTempFeeSoUsernameId());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername())) {      sql.setNullString("username");     } else {    sql.setString("username", tempFeeSoUsername.getUsername());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername1())) {      sql.setNullString("username1");     } else {    sql.setString("username1", tempFeeSoUsername.getUsername1());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername2())) {      sql.setNullString("username2");     } else {    sql.setString("username2", tempFeeSoUsername.getUsername2());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsername3())) {      sql.setNullString("username3");     } else {    sql.setString("username3", tempFeeSoUsername.getUsername3());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUsernameType())) {      sql.setNullString("usernameType");     } else {    sql.setString("usernameType", tempFeeSoUsername.getUsernameType());    }       if (StringUtil.isBlank(tempFeeSoUsername.getUserLevel())) {      sql.setNullLong("userLevel");     } else {    sql.setLong("userLevel", tempFeeSoUsername.getUserLevel());    }       if (StringUtil.isBlank(tempFeeSoUsername.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoUsername.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TEMP_FEE_SO_USERNAME WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TempFeeSoUsernameSVO tempFeeSoUsername=(TempFeeSoUsernameSVO) vo;       }}
