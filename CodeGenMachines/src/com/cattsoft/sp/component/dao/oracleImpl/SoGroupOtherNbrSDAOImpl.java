package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoGroupOtherNbrSDAO;import com.cattsoft.sp.vo.SoGroupOtherNbrSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoGroupOtherNbrSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoGroupOtherNbrSDAOImpl implements ISoGroupOtherNbrSDAO{    private static Logger log = Logger.getLogger(SoGroupOtherNbrSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_GROUP_OTHER_NBR(ACT_TYPE,GROUP_FLAG,GRP_SERV_ID,LOCAL_NET_ID,NBR,NBR_TYPE,NO_FLAG,SERV_INST_ID,SO_GROUP_OTHER_NBR_ID,SO_NBR,STS,STS_DATE)");sql.append(" VALUES (:actType,:groupFlag,:grpServId,:localNetId,:nbr,:nbrType,:noFlag,:servInstId,:soGroupOtherNbrId,:soNbr,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(soGroupOtherNbr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soGroupOtherNbr.getActType());    }       if (StringUtil.isBlank(soGroupOtherNbr.getGroupFlag())) {      sql.setNullString("groupFlag");     } else {    sql.setString("groupFlag", soGroupOtherNbr.getGroupFlag());    }       if (StringUtil.isBlank(soGroupOtherNbr.getGrpServId())) {      sql.setNullLong("grpServId");     } else {    sql.setLong("grpServId", soGroupOtherNbr.getGrpServId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soGroupOtherNbr.getLocalNetId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNbr())) {      sql.setNullString("nbr");     } else {    sql.setString("nbr", soGroupOtherNbr.getNbr());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNbrType())) {      sql.setNullString("nbrType");     } else {    sql.setString("nbrType", soGroupOtherNbr.getNbrType());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soGroupOtherNbr.getNoFlag());    }       if (StringUtil.isBlank(soGroupOtherNbr.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soGroupOtherNbr.getServInstId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSoGroupOtherNbrId())) {      sql.setNullLong("soGroupOtherNbrId");     } else {    sql.setLong("soGroupOtherNbrId", soGroupOtherNbr.getSoGroupOtherNbrId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soGroupOtherNbr.getSoNbr());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soGroupOtherNbr.getSts());    }    if (soGroupOtherNbr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soGroupOtherNbr.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;       Sql sql = new Sql("SELECT ACT_TYPE,GROUP_FLAG,GRP_SERV_ID,LOCAL_NET_ID,NBR,NBR_TYPE,NO_FLAG,SERV_INST_ID,SO_GROUP_OTHER_NBR_ID,SO_NBR,STS,STS_DATE FROM SO_GROUP_OTHER_NBR WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      soGroupOtherNbr =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           soGroupOtherNbr = new SoGroupOtherNbrSVO();           soGroupOtherNbr.setActType(rs.getString("ACT_TYPE"));           soGroupOtherNbr.setGroupFlag(rs.getString("GROUP_FLAG"));           soGroupOtherNbr.setGrpServId(rs.getString("GRP_SERV_ID"));           soGroupOtherNbr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soGroupOtherNbr.setNbr(rs.getString("NBR"));           soGroupOtherNbr.setNbrType(rs.getString("NBR_TYPE"));           soGroupOtherNbr.setNoFlag(rs.getString("NO_FLAG"));           soGroupOtherNbr.setServInstId(rs.getString("SERV_INST_ID"));           soGroupOtherNbr.setSoGroupOtherNbrId(rs.getString("SO_GROUP_OTHER_NBR_ID"));           soGroupOtherNbr.setSoNbr(rs.getString("SO_NBR"));           soGroupOtherNbr.setSts(rs.getString("STS"));           soGroupOtherNbr.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return soGroupOtherNbr;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,GROUP_FLAG,GRP_SERV_ID,LOCAL_NET_ID,NBR,NBR_TYPE,NO_FLAG,SERV_INST_ID,SO_GROUP_OTHER_NBR_ID,SO_NBR,STS,STS_DATE FROM SO_GROUP_OTHER_NBR WHERE 1=1 ");     try {if (soGroupOtherNbr.getFlagActType() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", soGroupOtherNbr.getActType());          }   } if (soGroupOtherNbr.getFlagGroupFlag() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getGroupFlag())) {             sql.append(" and GROUP_FLAG is null ");          }      else{             sql.append(" and GROUP_FLAG=:groupFlag");             sql.setString("groupFlag", soGroupOtherNbr.getGroupFlag());          }   } if (soGroupOtherNbr.getFlagGrpServId() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getGrpServId())) {             sql.append(" and GRP_SERV_ID is null ");          }      else{             sql.append(" and GRP_SERV_ID=:grpServId");             sql.setLong("grpServId", soGroupOtherNbr.getGrpServId());          }   } if (soGroupOtherNbr.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", soGroupOtherNbr.getLocalNetId());          }   } if (soGroupOtherNbr.getFlagNbr() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getNbr())) {             sql.append(" and NBR is null ");          }      else{             sql.append(" and NBR=:nbr");             sql.setString("nbr", soGroupOtherNbr.getNbr());          }   } if (soGroupOtherNbr.getFlagNbrType() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getNbrType())) {             sql.append(" and NBR_TYPE is null ");          }      else{             sql.append(" and NBR_TYPE=:nbrType");             sql.setString("nbrType", soGroupOtherNbr.getNbrType());          }   } if (soGroupOtherNbr.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", soGroupOtherNbr.getNoFlag());          }   } if (soGroupOtherNbr.getFlagServInstId() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", soGroupOtherNbr.getServInstId());          }   } if (soGroupOtherNbr.getFlagSoGroupOtherNbrId() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getSoGroupOtherNbrId())) {             sql.append(" and SO_GROUP_OTHER_NBR_ID is null ");          }      else{             sql.append(" and SO_GROUP_OTHER_NBR_ID=:soGroupOtherNbrId");             sql.setLong("soGroupOtherNbrId", soGroupOtherNbr.getSoGroupOtherNbrId());          }   } if (soGroupOtherNbr.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", soGroupOtherNbr.getSoNbr());          }   } if (soGroupOtherNbr.getFlagSts() == 1) {      if (StringUtil.isBlank(soGroupOtherNbr.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", soGroupOtherNbr.getSts());          }   } if (soGroupOtherNbr.getFlagStsDate() == 1) {      if (soGroupOtherNbr.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", soGroupOtherNbr.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           soGroupOtherNbr = new SoGroupOtherNbrSVO();           soGroupOtherNbr.setActType(rs.getString("ACT_TYPE"));           soGroupOtherNbr.setGroupFlag(rs.getString("GROUP_FLAG"));           soGroupOtherNbr.setGrpServId(rs.getString("GRP_SERV_ID"));           soGroupOtherNbr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soGroupOtherNbr.setNbr(rs.getString("NBR"));           soGroupOtherNbr.setNbrType(rs.getString("NBR_TYPE"));           soGroupOtherNbr.setNoFlag(rs.getString("NO_FLAG"));           soGroupOtherNbr.setServInstId(rs.getString("SERV_INST_ID"));           soGroupOtherNbr.setSoGroupOtherNbrId(rs.getString("SO_GROUP_OTHER_NBR_ID"));           soGroupOtherNbr.setSoNbr(rs.getString("SO_NBR"));           soGroupOtherNbr.setSts(rs.getString("STS"));           soGroupOtherNbr.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(soGroupOtherNbr);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO_GROUP_OTHER_NBR SET ");     try {if (soGroupOtherNbr.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", soGroupOtherNbr.getActType()); } if (soGroupOtherNbr.getFlagGroupFlag() == 1) {sql.append("GROUP_FLAG=:groupFlag,"); sql.setString("groupFlag", soGroupOtherNbr.getGroupFlag()); } if (soGroupOtherNbr.getFlagGrpServId() == 1) {sql.append("GRP_SERV_ID=:grpServId,");sql.setLong("grpServId", soGroupOtherNbr.getGrpServId()); } if (soGroupOtherNbr.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", soGroupOtherNbr.getLocalNetId()); } if (soGroupOtherNbr.getFlagNbr() == 1) {sql.append("NBR=:nbr,"); sql.setString("nbr", soGroupOtherNbr.getNbr()); } if (soGroupOtherNbr.getFlagNbrType() == 1) {sql.append("NBR_TYPE=:nbrType,"); sql.setString("nbrType", soGroupOtherNbr.getNbrType()); } if (soGroupOtherNbr.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", soGroupOtherNbr.getNoFlag()); } if (soGroupOtherNbr.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", soGroupOtherNbr.getServInstId()); } if (soGroupOtherNbr.getFlagSoGroupOtherNbrId() == 1) {sql.append("SO_GROUP_OTHER_NBR_ID=:soGroupOtherNbrId,");sql.setLong("soGroupOtherNbrId", soGroupOtherNbr.getSoGroupOtherNbrId()); } if (soGroupOtherNbr.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", soGroupOtherNbr.getSoNbr()); } if (soGroupOtherNbr.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", soGroupOtherNbr.getSts()); } if (soGroupOtherNbr.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", soGroupOtherNbr.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_GROUP_OTHER_NBR(ACT_TYPE,GROUP_FLAG,GRP_SERV_ID,LOCAL_NET_ID,NBR,NBR_TYPE,NO_FLAG,SERV_INST_ID,SO_GROUP_OTHER_NBR_ID,SO_NBR,STS,STS_DATE)");sql.append(" VALUES (:actType,:groupFlag,:grpServId,:localNetId,:nbr,:nbrType,:noFlag,:servInstId,:soGroupOtherNbrId,:soNbr,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) list.get(i);         if (soGroupOtherNbr== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(soGroupOtherNbr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soGroupOtherNbr.getActType());    }       if (StringUtil.isBlank(soGroupOtherNbr.getGroupFlag())) {      sql.setNullString("groupFlag");     } else {    sql.setString("groupFlag", soGroupOtherNbr.getGroupFlag());    }       if (StringUtil.isBlank(soGroupOtherNbr.getGrpServId())) {      sql.setNullLong("grpServId");     } else {    sql.setLong("grpServId", soGroupOtherNbr.getGrpServId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soGroupOtherNbr.getLocalNetId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNbr())) {      sql.setNullString("nbr");     } else {    sql.setString("nbr", soGroupOtherNbr.getNbr());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNbrType())) {      sql.setNullString("nbrType");     } else {    sql.setString("nbrType", soGroupOtherNbr.getNbrType());    }       if (StringUtil.isBlank(soGroupOtherNbr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soGroupOtherNbr.getNoFlag());    }       if (StringUtil.isBlank(soGroupOtherNbr.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soGroupOtherNbr.getServInstId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSoGroupOtherNbrId())) {      sql.setNullLong("soGroupOtherNbrId");     } else {    sql.setLong("soGroupOtherNbrId", soGroupOtherNbr.getSoGroupOtherNbrId());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soGroupOtherNbr.getSoNbr());    }       if (StringUtil.isBlank(soGroupOtherNbr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soGroupOtherNbr.getSts());    }    if (soGroupOtherNbr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soGroupOtherNbr.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO_GROUP_OTHER_NBR WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoGroupOtherNbrSVO soGroupOtherNbr=(SoGroupOtherNbrSVO) vo;       }}
