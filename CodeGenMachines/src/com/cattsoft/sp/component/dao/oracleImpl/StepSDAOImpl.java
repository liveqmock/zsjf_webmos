package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sp.component.dao.IStepSDAO;import com.cattsoft.sp.vo.StepSVO;/** * 方法StepSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class StepSDAOImpl implements IStepSDAO {	// private static Logger log = Logger.getLogger(StepSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		StepSVO step = (StepSVO) vo;		if (StringUtil.isBlank(step.getStepId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO STEP(ACTION_ID,ACTIVITY_ID,ACT_TYPE,AZ_FLAG,CANCEL_EXPRESS,CANCEL_FLAG,CANCEL_JUDGE_RULE,NAME,PAIRED_ID,PLUS_FLAG,PLUS_TYPE,POWER,PROCESS_TYPE,REMARKS,RETURN_FLAG,REVERSE_FLAG,STEP_ID,STEP_TYPE,STS,STS_DATE,WORK_SYSTEM,WORK_TYPE_ID)");		sql				.append(" VALUES (:actionId,:activityId,:actType,:azFlag,:cancelExpress,:cancelFlag,:cancelJudgeRule,:name,:pairedId,:plusFlag,:plusType,:power,:processType,:remarks,:returnFlag,:reverseFlag,:stepId,:stepType,:sts,:stsDate,:workSystem,:workTypeId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(step.getActionId())) {				sql.setNullLong("actionId");			} else {				sql.setLong("actionId", step.getActionId());			}			if (StringUtil.isBlank(step.getActivityId())) {				sql.setNullLong("activityId");			} else {				sql.setLong("activityId", step.getActivityId());			}			if (StringUtil.isBlank(step.getActType())) {				sql.setNullString("actType");			} else {				sql.setString("actType", step.getActType());			}			if (StringUtil.isBlank(step.getAzFlag())) {				sql.setNullString("azFlag");			} else {				sql.setString("azFlag", step.getAzFlag());			}			if (StringUtil.isBlank(step.getCancelExpress())) {				sql.setNullString("cancelExpress");			} else {				sql.setString("cancelExpress", step.getCancelExpress());			}			if (StringUtil.isBlank(step.getCancelFlag())) {				sql.setNullString("cancelFlag");			} else {				sql.setString("cancelFlag", step.getCancelFlag());			}			if (StringUtil.isBlank(step.getCancelJudgeRule())) {				sql.setNullString("cancelJudgeRule");			} else {				sql.setString("cancelJudgeRule", step.getCancelJudgeRule());			}			if (StringUtil.isBlank(step.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", step.getName());			}			if (StringUtil.isBlank(step.getPairedId())) {				sql.setNullString("pairedId");			} else {				sql.setString("pairedId", step.getPairedId());			}			if (StringUtil.isBlank(step.getPlusFlag())) {				sql.setNullString("plusFlag");			} else {				sql.setString("plusFlag", step.getPlusFlag());			}			if (StringUtil.isBlank(step.getPlusType())) {				sql.setNullString("plusType");			} else {				sql.setString("plusType", step.getPlusType());			}			if (StringUtil.isBlank(step.getPower())) {				sql.setNullLong("power");			} else {				sql.setLong("power", step.getPower());			}			if (StringUtil.isBlank(step.getProcessType())) {				sql.setNullString("processType");			} else {				sql.setString("processType", step.getProcessType());			}			if (StringUtil.isBlank(step.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", step.getRemarks());			}			if (StringUtil.isBlank(step.getReturnFlag())) {				sql.setNullString("returnFlag");			} else {				sql.setString("returnFlag", step.getReturnFlag());			}			if (StringUtil.isBlank(step.getReverseFlag())) {				sql.setNullString("reverseFlag");			} else {				sql.setString("reverseFlag", step.getReverseFlag());			}			if (StringUtil.isBlank(step.getStepId())) {				sql.setNullString("stepId");			} else {				sql.setString("stepId", step.getStepId());			}			if (StringUtil.isBlank(step.getStepType())) {				sql.setNullString("stepType");			} else {				sql.setString("stepType", step.getStepType());			}			if (StringUtil.isBlank(step.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", step.getSts());			}			if (step.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", step.getStsDate());			}			if (StringUtil.isBlank(step.getWorkSystem())) {				sql.setNullString("workSystem");			} else {				sql.setString("workSystem", step.getWorkSystem());			}			if (StringUtil.isBlank(step.getWorkTypeId())) {				sql.setNullLong("workTypeId");			} else {				sql.setLong("workTypeId", step.getWorkTypeId());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		StepSVO step = (StepSVO) vo;		if (StringUtil.isBlank(step.getStepId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ACTION_ID,ACTIVITY_ID,ACT_TYPE,AZ_FLAG,CANCEL_EXPRESS,CANCEL_FLAG,CANCEL_JUDGE_RULE,NAME,PAIRED_ID,PLUS_FLAG,PLUS_TYPE,POWER,PROCESS_TYPE,REMARKS,RETURN_FLAG,REVERSE_FLAG,STEP_ID,STEP_TYPE,STS,STS_DATE,WORK_SYSTEM,WORK_TYPE_ID FROM STEP WHERE 1=1  ");		sql.append(" and STEP_ID=:stepId");		sql.setString("stepId", step.getStepId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		step = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				step = new StepSVO();				step.setActionId(rs.getString("ACTION_ID"));				step.setActivityId(rs.getString("ACTIVITY_ID"));				step.setActType(rs.getString("ACT_TYPE"));				step.setAzFlag(rs.getString("AZ_FLAG"));				step.setCancelExpress(rs.getString("CANCEL_EXPRESS"));				step.setCancelFlag(rs.getString("CANCEL_FLAG"));				step.setCancelJudgeRule(rs.getString("CANCEL_JUDGE_RULE"));				step.setName(rs.getString("NAME"));				step.setPairedId(rs.getString("PAIRED_ID"));				step.setPlusFlag(rs.getString("PLUS_FLAG"));				step.setPlusType(rs.getString("PLUS_TYPE"));				step.setPower(rs.getString("POWER"));				step.setProcessType(rs.getString("PROCESS_TYPE"));				step.setRemarks(rs.getString("REMARKS"));				step.setReturnFlag(rs.getString("RETURN_FLAG"));				step.setReverseFlag(rs.getString("REVERSE_FLAG"));				step.setStepId(rs.getString("STEP_ID"));				step.setStepType(rs.getString("STEP_TYPE"));				step.setSts(rs.getString("STS"));				step.setStsDate(rs.getTimestamp("STS_DATE"));				step.setWorkSystem(rs.getString("WORK_SYSTEM"));				step.setWorkTypeId(rs.getString("WORK_TYPE_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return step;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		StepSVO step = (StepSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ACTION_ID,ACTIVITY_ID,ACT_TYPE,AZ_FLAG,CANCEL_EXPRESS,CANCEL_FLAG,CANCEL_JUDGE_RULE,NAME,PAIRED_ID,PLUS_FLAG,PLUS_TYPE,POWER,PROCESS_TYPE,REMARKS,RETURN_FLAG,REVERSE_FLAG,STEP_ID,STEP_TYPE,STS,STS_DATE,WORK_SYSTEM,WORK_TYPE_ID FROM STEP WHERE 1=1 ");		try {			if (step.getFlagActionId() == 1) {				if (StringUtil.isBlank(step.getActionId())) {					sql.append(" and ACTION_ID is null ");				} else {					sql.append(" and ACTION_ID=:actionId");					sql.setLong("actionId", step.getActionId());				}			}			if (step.getFlagActivityId() == 1) {				if (StringUtil.isBlank(step.getActivityId())) {					sql.append(" and ACTIVITY_ID is null ");				} else {					sql.append(" and ACTIVITY_ID=:activityId");					sql.setLong("activityId", step.getActivityId());				}			}			if (step.getFlagActType() == 1) {				if (StringUtil.isBlank(step.getActType())) {					sql.append(" and ACT_TYPE is null ");				} else {					sql.append(" and ACT_TYPE=:actType");					sql.setString("actType", step.getActType());				}			}			if (step.getFlagAzFlag() == 1) {				if (StringUtil.isBlank(step.getAzFlag())) {					sql.append(" and AZ_FLAG is null ");				} else {					sql.append(" and AZ_FLAG=:azFlag");					sql.setString("azFlag", step.getAzFlag());				}			}			if (step.getFlagCancelExpress() == 1) {				if (StringUtil.isBlank(step.getCancelExpress())) {					sql.append(" and CANCEL_EXPRESS is null ");				} else {					sql.append(" and CANCEL_EXPRESS=:cancelExpress");					sql.setString("cancelExpress", step.getCancelExpress());				}			}			if (step.getFlagCancelFlag() == 1) {				if (StringUtil.isBlank(step.getCancelFlag())) {					sql.append(" and CANCEL_FLAG is null ");				} else {					sql.append(" and CANCEL_FLAG=:cancelFlag");					sql.setString("cancelFlag", step.getCancelFlag());				}			}			if (step.getFlagCancelJudgeRule() == 1) {				if (StringUtil.isBlank(step.getCancelJudgeRule())) {					sql.append(" and CANCEL_JUDGE_RULE is null ");				} else {					sql.append(" and CANCEL_JUDGE_RULE=:cancelJudgeRule");					sql.setString("cancelJudgeRule", step.getCancelJudgeRule());				}			}			if (step.getFlagName() == 1) {				if (StringUtil.isBlank(step.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", step.getName());				}			}			if (step.getFlagPairedId() == 1) {				if (StringUtil.isBlank(step.getPairedId())) {					sql.append(" and PAIRED_ID is null ");				} else {					sql.append(" and PAIRED_ID=:pairedId");					sql.setString("pairedId", step.getPairedId());				}			}			if (step.getFlagPlusFlag() == 1) {				if (StringUtil.isBlank(step.getPlusFlag())) {					sql.append(" and PLUS_FLAG is null ");				} else {					sql.append(" and PLUS_FLAG=:plusFlag");					sql.setString("plusFlag", step.getPlusFlag());				}			}			if (step.getFlagPlusType() == 1) {				if (StringUtil.isBlank(step.getPlusType())) {					sql.append(" and PLUS_TYPE is null ");				} else {					sql.append(" and PLUS_TYPE=:plusType");					sql.setString("plusType", step.getPlusType());				}			}			if (step.getFlagPower() == 1) {				if (StringUtil.isBlank(step.getPower())) {					sql.append(" and POWER is null ");				} else {					sql.append(" and POWER=:power");					sql.setLong("power", step.getPower());				}			}			if (step.getFlagProcessType() == 1) {				if (StringUtil.isBlank(step.getProcessType())) {					sql.append(" and PROCESS_TYPE is null ");				} else {					sql.append(" and PROCESS_TYPE=:processType");					sql.setString("processType", step.getProcessType());				}			}			if (step.getFlagRemarks() == 1) {				if (StringUtil.isBlank(step.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", step.getRemarks());				}			}			if (step.getFlagReturnFlag() == 1) {				if (StringUtil.isBlank(step.getReturnFlag())) {					sql.append(" and RETURN_FLAG is null ");				} else {					sql.append(" and RETURN_FLAG=:returnFlag");					sql.setString("returnFlag", step.getReturnFlag());				}			}			if (step.getFlagReverseFlag() == 1) {				if (StringUtil.isBlank(step.getReverseFlag())) {					sql.append(" and REVERSE_FLAG is null ");				} else {					sql.append(" and REVERSE_FLAG=:reverseFlag");					sql.setString("reverseFlag", step.getReverseFlag());				}			}			if (step.getFlagStepId() == 1) {				if (StringUtil.isBlank(step.getStepId())) {					sql.append(" and STEP_ID is null ");				} else {					sql.append(" and STEP_ID=:stepId");					sql.setString("stepId", step.getStepId());				}			}			if (step.getFlagStepType() == 1) {				if (StringUtil.isBlank(step.getStepType())) {					sql.append(" and STEP_TYPE is null ");				} else {					sql.append(" and STEP_TYPE=:stepType");					sql.setString("stepType", step.getStepType());				}			}			if (step.getFlagSts() == 1) {				if (StringUtil.isBlank(step.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", step.getSts());				}			}			if (step.getFlagStsDate() == 1) {				if (step.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", step.getStsDate());				}			}			if (step.getFlagWorkSystem() == 1) {				if (StringUtil.isBlank(step.getWorkSystem())) {					sql.append(" and WORK_SYSTEM is null ");				} else {					sql.append(" and WORK_SYSTEM=:workSystem");					sql.setString("workSystem", step.getWorkSystem());				}			}			if (step.getFlagWorkTypeId() == 1) {				if (StringUtil.isBlank(step.getWorkTypeId())) {					sql.append(" and WORK_TYPE_ID is null ");				} else {					sql.append(" and WORK_TYPE_ID=:workTypeId");					sql.setLong("workTypeId", step.getWorkTypeId());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				step = new StepSVO();				step.setActionId(rs.getString("ACTION_ID"));				step.setActivityId(rs.getString("ACTIVITY_ID"));				step.setActType(rs.getString("ACT_TYPE"));				step.setAzFlag(rs.getString("AZ_FLAG"));				step.setCancelExpress(rs.getString("CANCEL_EXPRESS"));				step.setCancelFlag(rs.getString("CANCEL_FLAG"));				step.setCancelJudgeRule(rs.getString("CANCEL_JUDGE_RULE"));				step.setName(rs.getString("NAME"));				step.setPairedId(rs.getString("PAIRED_ID"));				step.setPlusFlag(rs.getString("PLUS_FLAG"));				step.setPlusType(rs.getString("PLUS_TYPE"));				step.setPower(rs.getString("POWER"));				step.setProcessType(rs.getString("PROCESS_TYPE"));				step.setRemarks(rs.getString("REMARKS"));				step.setReturnFlag(rs.getString("RETURN_FLAG"));				step.setReverseFlag(rs.getString("REVERSE_FLAG"));				step.setStepId(rs.getString("STEP_ID"));				step.setStepType(rs.getString("STEP_TYPE"));				step.setSts(rs.getString("STS"));				step.setStsDate(rs.getTimestamp("STS_DATE"));				step.setWorkSystem(rs.getString("WORK_SYSTEM"));				step.setWorkTypeId(rs.getString("WORK_TYPE_ID"));				res.add(step);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		StepSVO step = (StepSVO) vo;		if (StringUtil.isBlank(step.getStepId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE STEP SET ");		try {			if (step.getFlagActionId() == 1) {				sql.append("ACTION_ID=:actionId,");				sql.setLong("actionId", step.getActionId());			}			if (step.getFlagActivityId() == 1) {				sql.append("ACTIVITY_ID=:activityId,");				sql.setLong("activityId", step.getActivityId());			}			if (step.getFlagActType() == 1) {				sql.append("ACT_TYPE=:actType,");				sql.setString("actType", step.getActType());			}			if (step.getFlagAzFlag() == 1) {				sql.append("AZ_FLAG=:azFlag,");				sql.setString("azFlag", step.getAzFlag());			}			if (step.getFlagCancelExpress() == 1) {				sql.append("CANCEL_EXPRESS=:cancelExpress,");				sql.setString("cancelExpress", step.getCancelExpress());			}			if (step.getFlagCancelFlag() == 1) {				sql.append("CANCEL_FLAG=:cancelFlag,");				sql.setString("cancelFlag", step.getCancelFlag());			}			if (step.getFlagCancelJudgeRule() == 1) {				sql.append("CANCEL_JUDGE_RULE=:cancelJudgeRule,");				sql.setString("cancelJudgeRule", step.getCancelJudgeRule());			}			if (step.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", step.getName());			}			if (step.getFlagPairedId() == 1) {				sql.append("PAIRED_ID=:pairedId,");				sql.setString("pairedId", step.getPairedId());			}			if (step.getFlagPlusFlag() == 1) {				sql.append("PLUS_FLAG=:plusFlag,");				sql.setString("plusFlag", step.getPlusFlag());			}			if (step.getFlagPlusType() == 1) {				sql.append("PLUS_TYPE=:plusType,");				sql.setString("plusType", step.getPlusType());			}			if (step.getFlagPower() == 1) {				sql.append("POWER=:power,");				sql.setLong("power", step.getPower());			}			if (step.getFlagProcessType() == 1) {				sql.append("PROCESS_TYPE=:processType,");				sql.setString("processType", step.getProcessType());			}			if (step.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", step.getRemarks());			}			if (step.getFlagReturnFlag() == 1) {				sql.append("RETURN_FLAG=:returnFlag,");				sql.setString("returnFlag", step.getReturnFlag());			}			if (step.getFlagReverseFlag() == 1) {				sql.append("REVERSE_FLAG=:reverseFlag,");				sql.setString("reverseFlag", step.getReverseFlag());			}			if (step.getFlagStepType() == 1) {				sql.append("STEP_TYPE=:stepType,");				sql.setString("stepType", step.getStepType());			}			if (step.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", step.getSts());			}			if (step.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", step.getStsDate());			}			if (step.getFlagWorkSystem() == 1) {				sql.append("WORK_SYSTEM=:workSystem,");				sql.setString("workSystem", step.getWorkSystem());			}			if (step.getFlagWorkTypeId() == 1) {				sql.append("WORK_TYPE_ID=:workTypeId,");				sql.setLong("workTypeId", step.getWorkTypeId());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and STEP_ID=:stepId");			sql.setString("stepId", step.getStepId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO STEP(ACTION_ID,ACTIVITY_ID,ACT_TYPE,AZ_FLAG,CANCEL_EXPRESS,CANCEL_FLAG,CANCEL_JUDGE_RULE,NAME,PAIRED_ID,PLUS_FLAG,PLUS_TYPE,POWER,PROCESS_TYPE,REMARKS,RETURN_FLAG,REVERSE_FLAG,STEP_ID,STEP_TYPE,STS,STS_DATE,WORK_SYSTEM,WORK_TYPE_ID)");		sql				.append(" VALUES (:actionId,:activityId,:actType,:azFlag,:cancelExpress,:cancelFlag,:cancelJudgeRule,:name,:pairedId,:plusFlag,:plusType,:power,:processType,:remarks,:returnFlag,:reverseFlag,:stepId,:stepType,:sts,:stsDate,:workSystem,:workTypeId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				StepSVO step = (StepSVO) list.get(i);				if (step == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(step.getStepId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(step.getActionId())) {					sql.setNullLong("actionId");				} else {					sql.setLong("actionId", step.getActionId());				}				if (StringUtil.isBlank(step.getActivityId())) {					sql.setNullLong("activityId");				} else {					sql.setLong("activityId", step.getActivityId());				}				if (StringUtil.isBlank(step.getActType())) {					sql.setNullString("actType");				} else {					sql.setString("actType", step.getActType());				}				if (StringUtil.isBlank(step.getAzFlag())) {					sql.setNullString("azFlag");				} else {					sql.setString("azFlag", step.getAzFlag());				}				if (StringUtil.isBlank(step.getCancelExpress())) {					sql.setNullString("cancelExpress");				} else {					sql.setString("cancelExpress", step.getCancelExpress());				}				if (StringUtil.isBlank(step.getCancelFlag())) {					sql.setNullString("cancelFlag");				} else {					sql.setString("cancelFlag", step.getCancelFlag());				}				if (StringUtil.isBlank(step.getCancelJudgeRule())) {					sql.setNullString("cancelJudgeRule");				} else {					sql.setString("cancelJudgeRule", step.getCancelJudgeRule());				}				if (StringUtil.isBlank(step.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", step.getName());				}				if (StringUtil.isBlank(step.getPairedId())) {					sql.setNullString("pairedId");				} else {					sql.setString("pairedId", step.getPairedId());				}				if (StringUtil.isBlank(step.getPlusFlag())) {					sql.setNullString("plusFlag");				} else {					sql.setString("plusFlag", step.getPlusFlag());				}				if (StringUtil.isBlank(step.getPlusType())) {					sql.setNullString("plusType");				} else {					sql.setString("plusType", step.getPlusType());				}				if (StringUtil.isBlank(step.getPower())) {					sql.setNullLong("power");				} else {					sql.setLong("power", step.getPower());				}				if (StringUtil.isBlank(step.getProcessType())) {					sql.setNullString("processType");				} else {					sql.setString("processType", step.getProcessType());				}				if (StringUtil.isBlank(step.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", step.getRemarks());				}				if (StringUtil.isBlank(step.getReturnFlag())) {					sql.setNullString("returnFlag");				} else {					sql.setString("returnFlag", step.getReturnFlag());				}				if (StringUtil.isBlank(step.getReverseFlag())) {					sql.setNullString("reverseFlag");				} else {					sql.setString("reverseFlag", step.getReverseFlag());				}				if (StringUtil.isBlank(step.getStepId())) {					sql.setNullString("stepId");				} else {					sql.setString("stepId", step.getStepId());				}				if (StringUtil.isBlank(step.getStepType())) {					sql.setNullString("stepType");				} else {					sql.setString("stepType", step.getStepType());				}				if (StringUtil.isBlank(step.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", step.getSts());				}				if (step.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", step.getStsDate());				}				if (StringUtil.isBlank(step.getWorkSystem())) {					sql.setNullString("workSystem");				} else {					sql.setString("workSystem", step.getWorkSystem());				}				if (StringUtil.isBlank(step.getWorkTypeId())) {					sql.setNullLong("workTypeId");				} else {					sql.setLong("workTypeId", step.getWorkTypeId());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		StepSVO step = (StepSVO) vo;		if (StringUtil.isBlank(step.getStepId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM STEP WHERE 1=1  ");		sql.append(" and STEP_ID=:stepId");		sql.setString("stepId", step.getStepId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// StepSVO step = (StepSVO) vo;	}}