package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoResSDAO;import com.cattsoft.sp.vo.SoResSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil;/** * 方法SoResSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class SoResSDAOImpl implements ISoResSDAO {	// private static Logger log = Logger.getLogger(SoResSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoResSVO soRes = (SoResSVO) vo;		if (StringUtil.isBlank(soRes.getSoResId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_RES(ASSIGN_FLAG,AZ_FLAG,CHANGED_FLAG,IS_SELF,LOCAL_NET_ID,NO_FLAG,NWKSEG_TEMPLATE_ID,RES_RELEASE_FLAG,RES_SERV_ID,RE_ASSIGN_FLAG,SERV_INST_ID,SHARE_SO_RES_ID,SO_NBR,SO_RES_ID,STEP_ID,STS,STS_DATE,TOPOLOGY_POSITION)");		sql				.append(" VALUES (:assignFlag,:azFlag,:changedFlag,:isSelf,:localNetId,:noFlag,:nwksegTemplateId,:resReleaseFlag,:resServId,:reAssignFlag,:servInstId,:shareSoResId,:soNbr,:soResId,:stepId,:sts,:stsDate,:topologyPosition)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(soRes.getAssignFlag())) {				sql.setNullString("assignFlag");			} else {				sql.setString("assignFlag", soRes.getAssignFlag());			}			if (StringUtil.isBlank(soRes.getAzFlag())) {				sql.setNullString("azFlag");			} else {				sql.setString("azFlag", soRes.getAzFlag());			}			if (StringUtil.isBlank(soRes.getChangedFlag())) {				sql.setNullString("changedFlag");			} else {				sql.setString("changedFlag", soRes.getChangedFlag());			}			if (StringUtil.isBlank(soRes.getIsSelf())) {				sql.setNullString("isSelf");			} else {				sql.setString("isSelf", soRes.getIsSelf());			}			if (StringUtil.isBlank(soRes.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", soRes.getLocalNetId());			}			if (StringUtil.isBlank(soRes.getNoFlag())) {				sql.setNullString("noFlag");			} else {				sql.setString("noFlag", soRes.getNoFlag());			}			if (StringUtil.isBlank(soRes.getNwksegTemplateId())) {				sql.setNullLong("nwksegTemplateId");			} else {				sql.setLong("nwksegTemplateId", soRes.getNwksegTemplateId());			}			if (StringUtil.isBlank(soRes.getResReleaseFlag())) {				sql.setNullString("resReleaseFlag");			} else {				sql.setString("resReleaseFlag", soRes.getResReleaseFlag());			}			if (StringUtil.isBlank(soRes.getResServId())) {				sql.setNullLong("resServId");			} else {				sql.setLong("resServId", soRes.getResServId());			}			if (StringUtil.isBlank(soRes.getReAssignFlag())) {				sql.setNullString("reAssignFlag");			} else {				sql.setString("reAssignFlag", soRes.getReAssignFlag());			}			if (StringUtil.isBlank(soRes.getServInstId())) {				sql.setNullLong("servInstId");			} else {				sql.setLong("servInstId", soRes.getServInstId());			}			if (StringUtil.isBlank(soRes.getShareSoResId())) {				sql.setNullLong("shareSoResId");			} else {				sql.setLong("shareSoResId", soRes.getShareSoResId());			}			if (StringUtil.isBlank(soRes.getSoNbr())) {				sql.setNullString("soNbr");			} else {				sql.setString("soNbr", soRes.getSoNbr());			}			if (StringUtil.isBlank(soRes.getSoResId())) {				sql.setNullLong("soResId");			} else {				sql.setLong("soResId", soRes.getSoResId());			}			if (StringUtil.isBlank(soRes.getStepId())) {				sql.setNullString("stepId");			} else {				sql.setString("stepId", soRes.getStepId());			}			if (StringUtil.isBlank(soRes.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", soRes.getSts());			}			if (soRes.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", soRes.getStsDate());			}			if (StringUtil.isBlank(soRes.getTopologyPosition())) {				sql.setNullString("topologyPosition");			} else {				sql.setString("topologyPosition", soRes.getTopologyPosition());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoResSVO soRes = (SoResSVO) vo;		if (StringUtil.isBlank(soRes.getSoResId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ASSIGN_FLAG,AZ_FLAG,CHANGED_FLAG,IS_SELF,LOCAL_NET_ID,NO_FLAG,NWKSEG_TEMPLATE_ID,RES_RELEASE_FLAG,RES_SERV_ID,RE_ASSIGN_FLAG,SERV_INST_ID,SHARE_SO_RES_ID,SO_NBR,SO_RES_ID,STEP_ID,STS,STS_DATE,TOPOLOGY_POSITION FROM SO_RES WHERE 1=1  ");		sql.append(" and SO_RES_ID=:soResId");		sql.setLong("soResId", soRes.getSoResId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		soRes = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soRes = new SoResSVO();				soRes.setAssignFlag(rs.getString("ASSIGN_FLAG"));				soRes.setAzFlag(rs.getString("AZ_FLAG"));				soRes.setChangedFlag(rs.getString("CHANGED_FLAG"));				soRes.setIsSelf(rs.getString("IS_SELF"));				soRes.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soRes.setNoFlag(rs.getString("NO_FLAG"));				soRes.setNwksegTemplateId(rs.getString("NWKSEG_TEMPLATE_ID"));				soRes.setResReleaseFlag(rs.getString("RES_RELEASE_FLAG"));				soRes.setResServId(rs.getString("RES_SERV_ID"));				soRes.setReAssignFlag(rs.getString("RE_ASSIGN_FLAG"));				soRes.setServInstId(rs.getString("SERV_INST_ID"));				soRes.setShareSoResId(rs.getString("SHARE_SO_RES_ID"));				soRes.setSoNbr(rs.getString("SO_NBR"));				soRes.setSoResId(rs.getString("SO_RES_ID"));				soRes.setStepId(rs.getString("STEP_ID"));				soRes.setSts(rs.getString("STS"));				soRes.setStsDate(rs.getTimestamp("STS_DATE"));				soRes.setTopologyPosition(rs.getString("TOPOLOGY_POSITION"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return soRes;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoResSVO soRes = (SoResSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ASSIGN_FLAG,AZ_FLAG,CHANGED_FLAG,IS_SELF,LOCAL_NET_ID,NO_FLAG,NWKSEG_TEMPLATE_ID,RES_RELEASE_FLAG,RES_SERV_ID,RE_ASSIGN_FLAG,SERV_INST_ID,SHARE_SO_RES_ID,SO_NBR,SO_RES_ID,STEP_ID,STS,STS_DATE,TOPOLOGY_POSITION FROM SO_RES WHERE 1=1 ");		try {			if (soRes.getFlagAssignFlag() == 1) {				if (StringUtil.isBlank(soRes.getAssignFlag())) {					sql.append(" and ASSIGN_FLAG is null ");				} else {					sql.append(" and ASSIGN_FLAG=:assignFlag");					sql.setString("assignFlag", soRes.getAssignFlag());				}			}			if (soRes.getFlagAzFlag() == 1) {				if (StringUtil.isBlank(soRes.getAzFlag())) {					sql.append(" and AZ_FLAG is null ");				} else {					sql.append(" and AZ_FLAG=:azFlag");					sql.setString("azFlag", soRes.getAzFlag());				}			}			if (soRes.getFlagChangedFlag() == 1) {				if (StringUtil.isBlank(soRes.getChangedFlag())) {					sql.append(" and CHANGED_FLAG is null ");				} else {					sql.append(" and CHANGED_FLAG=:changedFlag");					sql.setString("changedFlag", soRes.getChangedFlag());				}			}			if (soRes.getFlagIsSelf() == 1) {				if (StringUtil.isBlank(soRes.getIsSelf())) {					sql.append(" and IS_SELF is null ");				} else {					sql.append(" and IS_SELF=:isSelf");					sql.setString("isSelf", soRes.getIsSelf());				}			}			if (soRes.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(soRes.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", soRes.getLocalNetId());				}			}			if (soRes.getFlagNoFlag() == 1) {				if (StringUtil.isBlank(soRes.getNoFlag())) {					sql.append(" and NO_FLAG is null ");				} else {					sql.append(" and NO_FLAG=:noFlag");					sql.setString("noFlag", soRes.getNoFlag());				}			}			if (soRes.getFlagNwksegTemplateId() == 1) {				if (StringUtil.isBlank(soRes.getNwksegTemplateId())) {					sql.append(" and NWKSEG_TEMPLATE_ID is null ");				} else {					sql.append(" and NWKSEG_TEMPLATE_ID=:nwksegTemplateId");					sql							.setLong("nwksegTemplateId", soRes									.getNwksegTemplateId());				}			}			if (soRes.getFlagResReleaseFlag() == 1) {				if (StringUtil.isBlank(soRes.getResReleaseFlag())) {					sql.append(" and RES_RELEASE_FLAG is null ");				} else {					sql.append(" and RES_RELEASE_FLAG=:resReleaseFlag");					sql.setString("resReleaseFlag", soRes.getResReleaseFlag());				}			}			if (soRes.getFlagResServId() == 1) {				if (StringUtil.isBlank(soRes.getResServId())) {					sql.append(" and RES_SERV_ID is null ");				} else {					sql.append(" and RES_SERV_ID=:resServId");					sql.setLong("resServId", soRes.getResServId());				}			}			if (soRes.getFlagReAssignFlag() == 1) {				if (StringUtil.isBlank(soRes.getReAssignFlag())) {					sql.append(" and RE_ASSIGN_FLAG is null ");				} else {					sql.append(" and RE_ASSIGN_FLAG=:reAssignFlag");					sql.setString("reAssignFlag", soRes.getReAssignFlag());				}			}			if (soRes.getFlagServInstId() == 1) {				if (StringUtil.isBlank(soRes.getServInstId())) {					sql.append(" and SERV_INST_ID is null ");				} else {					sql.append(" and SERV_INST_ID=:servInstId");					sql.setLong("servInstId", soRes.getServInstId());				}			}			if (soRes.getFlagShareSoResId() == 1) {				if (StringUtil.isBlank(soRes.getShareSoResId())) {					sql.append(" and SHARE_SO_RES_ID is null ");				} else {					sql.append(" and SHARE_SO_RES_ID=:shareSoResId");					sql.setLong("shareSoResId", soRes.getShareSoResId());				}			}			if (soRes.getFlagSoNbr() == 1) {				if (StringUtil.isBlank(soRes.getSoNbr())) {					sql.append(" and SO_NBR is null ");				} else {					sql.append(" and SO_NBR=:soNbr");					sql.setString("soNbr", soRes.getSoNbr());				}			}			if (soRes.getFlagSoResId() == 1) {				if (StringUtil.isBlank(soRes.getSoResId())) {					sql.append(" and SO_RES_ID is null ");				} else {					sql.append(" and SO_RES_ID=:soResId");					sql.setLong("soResId", soRes.getSoResId());				}			}			if (soRes.getFlagStepId() == 1) {				if (StringUtil.isBlank(soRes.getStepId())) {					sql.append(" and STEP_ID is null ");				} else {					sql.append(" and STEP_ID=:stepId");					sql.setString("stepId", soRes.getStepId());				}			}			if (soRes.getFlagSts() == 1) {				if (StringUtil.isBlank(soRes.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", soRes.getSts());				}			}			if (soRes.getFlagStsDate() == 1) {				if (soRes.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", soRes.getStsDate());				}			}			if (soRes.getFlagTopologyPosition() == 1) {				if (StringUtil.isBlank(soRes.getTopologyPosition())) {					sql.append(" and TOPOLOGY_POSITION is null ");				} else {					sql.append(" and TOPOLOGY_POSITION=:topologyPosition");					sql.setString("topologyPosition", soRes							.getTopologyPosition());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soRes = new SoResSVO();				soRes.setAssignFlag(rs.getString("ASSIGN_FLAG"));				soRes.setAzFlag(rs.getString("AZ_FLAG"));				soRes.setChangedFlag(rs.getString("CHANGED_FLAG"));				soRes.setIsSelf(rs.getString("IS_SELF"));				soRes.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soRes.setNoFlag(rs.getString("NO_FLAG"));				soRes.setNwksegTemplateId(rs.getString("NWKSEG_TEMPLATE_ID"));				soRes.setResReleaseFlag(rs.getString("RES_RELEASE_FLAG"));				soRes.setResServId(rs.getString("RES_SERV_ID"));				soRes.setReAssignFlag(rs.getString("RE_ASSIGN_FLAG"));				soRes.setServInstId(rs.getString("SERV_INST_ID"));				soRes.setShareSoResId(rs.getString("SHARE_SO_RES_ID"));				soRes.setSoNbr(rs.getString("SO_NBR"));				soRes.setSoResId(rs.getString("SO_RES_ID"));				soRes.setStepId(rs.getString("STEP_ID"));				soRes.setSts(rs.getString("STS"));				soRes.setStsDate(rs.getTimestamp("STS_DATE"));				soRes.setTopologyPosition(rs.getString("TOPOLOGY_POSITION"));				res.add(soRes);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoResSVO soRes = (SoResSVO) vo;		if (StringUtil.isBlank(soRes.getSoResId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE SO_RES SET ");		try {			if (soRes.getFlagAssignFlag() == 1) {				sql.append("ASSIGN_FLAG=:assignFlag,");				sql.setString("assignFlag", soRes.getAssignFlag());			}			if (soRes.getFlagAzFlag() == 1) {				sql.append("AZ_FLAG=:azFlag,");				sql.setString("azFlag", soRes.getAzFlag());			}			if (soRes.getFlagChangedFlag() == 1) {				sql.append("CHANGED_FLAG=:changedFlag,");				sql.setString("changedFlag", soRes.getChangedFlag());			}			if (soRes.getFlagIsSelf() == 1) {				sql.append("IS_SELF=:isSelf,");				sql.setString("isSelf", soRes.getIsSelf());			}			if (soRes.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", soRes.getLocalNetId());			}			if (soRes.getFlagNoFlag() == 1) {				sql.append("NO_FLAG=:noFlag,");				sql.setString("noFlag", soRes.getNoFlag());			}			if (soRes.getFlagNwksegTemplateId() == 1) {				sql.append("NWKSEG_TEMPLATE_ID=:nwksegTemplateId,");				sql.setLong("nwksegTemplateId", soRes.getNwksegTemplateId());			}			if (soRes.getFlagResReleaseFlag() == 1) {				sql.append("RES_RELEASE_FLAG=:resReleaseFlag,");				sql.setString("resReleaseFlag", soRes.getResReleaseFlag());			}			if (soRes.getFlagResServId() == 1) {				sql.append("RES_SERV_ID=:resServId,");				sql.setLong("resServId", soRes.getResServId());			}			if (soRes.getFlagReAssignFlag() == 1) {				sql.append("RE_ASSIGN_FLAG=:reAssignFlag,");				sql.setString("reAssignFlag", soRes.getReAssignFlag());			}			if (soRes.getFlagServInstId() == 1) {				sql.append("SERV_INST_ID=:servInstId,");				sql.setLong("servInstId", soRes.getServInstId());			}			if (soRes.getFlagShareSoResId() == 1) {				sql.append("SHARE_SO_RES_ID=:shareSoResId,");				sql.setLong("shareSoResId", soRes.getShareSoResId());			}			if (soRes.getFlagSoNbr() == 1) {				sql.append("SO_NBR=:soNbr,");				sql.setString("soNbr", soRes.getSoNbr());			}			if (soRes.getFlagStepId() == 1) {				sql.append("STEP_ID=:stepId,");				sql.setString("stepId", soRes.getStepId());			}			if (soRes.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", soRes.getSts());			}			if (soRes.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", soRes.getStsDate());			}			if (soRes.getFlagTopologyPosition() == 1) {				sql.append("TOPOLOGY_POSITION=:topologyPosition,");				sql.setString("topologyPosition", soRes.getTopologyPosition());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and SO_RES_ID=:soResId");			sql.setLong("soResId", soRes.getSoResId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_RES(ASSIGN_FLAG,AZ_FLAG,CHANGED_FLAG,IS_SELF,LOCAL_NET_ID,NO_FLAG,NWKSEG_TEMPLATE_ID,RES_RELEASE_FLAG,RES_SERV_ID,RE_ASSIGN_FLAG,SERV_INST_ID,SHARE_SO_RES_ID,SO_NBR,SO_RES_ID,STEP_ID,STS,STS_DATE,TOPOLOGY_POSITION)");		sql				.append(" VALUES (:assignFlag,:azFlag,:changedFlag,:isSelf,:localNetId,:noFlag,:nwksegTemplateId,:resReleaseFlag,:resServId,:reAssignFlag,:servInstId,:shareSoResId,:soNbr,:soResId,:stepId,:sts,:stsDate,:topologyPosition)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				SoResSVO soRes = (SoResSVO) list.get(i);				if (soRes == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(soRes.getSoResId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(soRes.getAssignFlag())) {					sql.setNullString("assignFlag");				} else {					sql.setString("assignFlag", soRes.getAssignFlag());				}				if (StringUtil.isBlank(soRes.getAzFlag())) {					sql.setNullString("azFlag");				} else {					sql.setString("azFlag", soRes.getAzFlag());				}				if (StringUtil.isBlank(soRes.getChangedFlag())) {					sql.setNullString("changedFlag");				} else {					sql.setString("changedFlag", soRes.getChangedFlag());				}				if (StringUtil.isBlank(soRes.getIsSelf())) {					sql.setNullString("isSelf");				} else {					sql.setString("isSelf", soRes.getIsSelf());				}				if (StringUtil.isBlank(soRes.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", soRes.getLocalNetId());				}				if (StringUtil.isBlank(soRes.getNoFlag())) {					sql.setNullString("noFlag");				} else {					sql.setString("noFlag", soRes.getNoFlag());				}				if (StringUtil.isBlank(soRes.getNwksegTemplateId())) {					sql.setNullLong("nwksegTemplateId");				} else {					sql							.setLong("nwksegTemplateId", soRes									.getNwksegTemplateId());				}				if (StringUtil.isBlank(soRes.getResReleaseFlag())) {					sql.setNullString("resReleaseFlag");				} else {					sql.setString("resReleaseFlag", soRes.getResReleaseFlag());				}				if (StringUtil.isBlank(soRes.getResServId())) {					sql.setNullLong("resServId");				} else {					sql.setLong("resServId", soRes.getResServId());				}				if (StringUtil.isBlank(soRes.getReAssignFlag())) {					sql.setNullString("reAssignFlag");				} else {					sql.setString("reAssignFlag", soRes.getReAssignFlag());				}				if (StringUtil.isBlank(soRes.getServInstId())) {					sql.setNullLong("servInstId");				} else {					sql.setLong("servInstId", soRes.getServInstId());				}				if (StringUtil.isBlank(soRes.getShareSoResId())) {					sql.setNullLong("shareSoResId");				} else {					sql.setLong("shareSoResId", soRes.getShareSoResId());				}				if (StringUtil.isBlank(soRes.getSoNbr())) {					sql.setNullString("soNbr");				} else {					sql.setString("soNbr", soRes.getSoNbr());				}				if (StringUtil.isBlank(soRes.getSoResId())) {					sql.setNullLong("soResId");				} else {					sql.setLong("soResId", soRes.getSoResId());				}				if (StringUtil.isBlank(soRes.getStepId())) {					sql.setNullString("stepId");				} else {					sql.setString("stepId", soRes.getStepId());				}				if (StringUtil.isBlank(soRes.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", soRes.getSts());				}				if (soRes.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", soRes.getStsDate());				}				if (StringUtil.isBlank(soRes.getTopologyPosition())) {					sql.setNullString("topologyPosition");				} else {					sql.setString("topologyPosition", soRes							.getTopologyPosition());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoResSVO soRes = (SoResSVO) vo;		if (StringUtil.isBlank(soRes.getSoResId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM SO_RES WHERE 1=1  ");		sql.append(" and SO_RES_ID=:soResId");		sql.setLong("soResId", soRes.getSoResId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		SoResSVO soRes = (SoResSVO) vo;	}}