package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.IObjGroupRelationSDAO;import com.cattsoft.sp.vo.ObjGroupRelationSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法ObjGroupRelationSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class ObjGroupRelationSDAOImpl implements IObjGroupRelationSDAO{    private static Logger log = Logger.getLogger(ObjGroupRelationSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;    if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO OBJ_GROUP_RELATION(GROUP_SPEC_ID,GROUP_SPEC_TYPE,OBJ_GROUP_RELA_ID,RES_OBJ_ID,STS,STS_DATE)");sql.append(" VALUES (:groupSpecId,:groupSpecType,:objGroupRelaId,:resObjId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(objGroupRelation.getGroupSpecId())) {      sql.setNullLong("groupSpecId");     } else {    sql.setLong("groupSpecId", objGroupRelation.getGroupSpecId());    }       if (StringUtil.isBlank(objGroupRelation.getGroupSpecType())) {      sql.setNullString("groupSpecType");     } else {    sql.setString("groupSpecType", objGroupRelation.getGroupSpecType());    }       if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {      sql.setNullLong("objGroupRelaId");     } else {    sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());    }       if (StringUtil.isBlank(objGroupRelation.getResObjId())) {      sql.setNullLong("resObjId");     } else {    sql.setLong("resObjId", objGroupRelation.getResObjId());    }       if (StringUtil.isBlank(objGroupRelation.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", objGroupRelation.getSts());    }    if (objGroupRelation.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", objGroupRelation.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;    if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT GROUP_SPEC_ID,GROUP_SPEC_TYPE,OBJ_GROUP_RELA_ID,RES_OBJ_ID,STS,STS_DATE FROM OBJ_GROUP_RELATION WHERE 1=1  ");sql.append(" and OBJ_GROUP_RELA_ID=:objGroupRelaId");sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      objGroupRelation =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           objGroupRelation = new ObjGroupRelationSVO();           objGroupRelation.setGroupSpecId(rs.getString("GROUP_SPEC_ID"));           objGroupRelation.setGroupSpecType(rs.getString("GROUP_SPEC_TYPE"));           objGroupRelation.setObjGroupRelaId(rs.getString("OBJ_GROUP_RELA_ID"));           objGroupRelation.setResObjId(rs.getString("RES_OBJ_ID"));           objGroupRelation.setSts(rs.getString("STS"));           objGroupRelation.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return objGroupRelation;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT GROUP_SPEC_ID,GROUP_SPEC_TYPE,OBJ_GROUP_RELA_ID,RES_OBJ_ID,STS,STS_DATE FROM OBJ_GROUP_RELATION WHERE 1=1 ");     try {if (objGroupRelation.getFlagGroupSpecId() == 1) {      if (StringUtil.isBlank(objGroupRelation.getGroupSpecId())) {             sql.append(" and GROUP_SPEC_ID is null ");          }      else{             sql.append(" and GROUP_SPEC_ID=:groupSpecId");             sql.setLong("groupSpecId", objGroupRelation.getGroupSpecId());          }   } if (objGroupRelation.getFlagGroupSpecType() == 1) {      if (StringUtil.isBlank(objGroupRelation.getGroupSpecType())) {             sql.append(" and GROUP_SPEC_TYPE is null ");          }      else{             sql.append(" and GROUP_SPEC_TYPE=:groupSpecType");             sql.setString("groupSpecType", objGroupRelation.getGroupSpecType());          }   } if (objGroupRelation.getFlagObjGroupRelaId() == 1) {      if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {             sql.append(" and OBJ_GROUP_RELA_ID is null ");          }      else{             sql.append(" and OBJ_GROUP_RELA_ID=:objGroupRelaId");             sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());          }   } if (objGroupRelation.getFlagResObjId() == 1) {      if (StringUtil.isBlank(objGroupRelation.getResObjId())) {             sql.append(" and RES_OBJ_ID is null ");          }      else{             sql.append(" and RES_OBJ_ID=:resObjId");             sql.setLong("resObjId", objGroupRelation.getResObjId());          }   } if (objGroupRelation.getFlagSts() == 1) {      if (StringUtil.isBlank(objGroupRelation.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", objGroupRelation.getSts());          }   } if (objGroupRelation.getFlagStsDate() == 1) {      if (objGroupRelation.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", objGroupRelation.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           objGroupRelation = new ObjGroupRelationSVO();           objGroupRelation.setGroupSpecId(rs.getString("GROUP_SPEC_ID"));           objGroupRelation.setGroupSpecType(rs.getString("GROUP_SPEC_TYPE"));           objGroupRelation.setObjGroupRelaId(rs.getString("OBJ_GROUP_RELA_ID"));           objGroupRelation.setResObjId(rs.getString("RES_OBJ_ID"));           objGroupRelation.setSts(rs.getString("STS"));           objGroupRelation.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(objGroupRelation);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;    if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE OBJ_GROUP_RELATION SET ");     try {if (objGroupRelation.getFlagGroupSpecId() == 1) {sql.append("GROUP_SPEC_ID=:groupSpecId,");sql.setLong("groupSpecId", objGroupRelation.getGroupSpecId()); } if (objGroupRelation.getFlagGroupSpecType() == 1) {sql.append("GROUP_SPEC_TYPE=:groupSpecType,"); sql.setString("groupSpecType", objGroupRelation.getGroupSpecType()); } if (objGroupRelation.getFlagResObjId() == 1) {sql.append("RES_OBJ_ID=:resObjId,");sql.setLong("resObjId", objGroupRelation.getResObjId()); } if (objGroupRelation.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", objGroupRelation.getSts()); } if (objGroupRelation.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", objGroupRelation.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and OBJ_GROUP_RELA_ID=:objGroupRelaId");sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO OBJ_GROUP_RELATION(GROUP_SPEC_ID,GROUP_SPEC_TYPE,OBJ_GROUP_RELA_ID,RES_OBJ_ID,STS,STS_DATE)");sql.append(" VALUES (:groupSpecId,:groupSpecType,:objGroupRelaId,:resObjId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) list.get(i);         if (objGroupRelation== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(objGroupRelation.getGroupSpecId())) {      sql.setNullLong("groupSpecId");     } else {    sql.setLong("groupSpecId", objGroupRelation.getGroupSpecId());    }       if (StringUtil.isBlank(objGroupRelation.getGroupSpecType())) {      sql.setNullString("groupSpecType");     } else {    sql.setString("groupSpecType", objGroupRelation.getGroupSpecType());    }       if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {      sql.setNullLong("objGroupRelaId");     } else {    sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());    }       if (StringUtil.isBlank(objGroupRelation.getResObjId())) {      sql.setNullLong("resObjId");     } else {    sql.setLong("resObjId", objGroupRelation.getResObjId());    }       if (StringUtil.isBlank(objGroupRelation.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", objGroupRelation.getSts());    }    if (objGroupRelation.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", objGroupRelation.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;    if (StringUtil.isBlank(objGroupRelation.getObjGroupRelaId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM OBJ_GROUP_RELATION WHERE 1=1  ");sql.append(" and OBJ_GROUP_RELA_ID=:objGroupRelaId");sql.setLong("objGroupRelaId", objGroupRelation.getObjGroupRelaId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     ObjGroupRelationSVO objGroupRelation=(ObjGroupRelationSVO) vo;       }}
