package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.IStepBusiLimitSDAO;import com.cattsoft.sp.vo.StepBusiLimitSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法StepBusiLimitSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class StepBusiLimitSDAOImpl implements IStepBusiLimitSDAO{    private static Logger log = Logger.getLogger(StepBusiLimitSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;    if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_BUSI_LIMIT(AREA_ID,ASSIGN_DEPT,CHG_SERV_SPEC_ID,DEAL_FLAG,HASTEN_VALUE,LOCAL_NET_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PRIORITY,PROD_ID,REMARKS,SPEC_PRPTY_ID,SPEC_PRPTY_VALUE,STEP_BUSI_LIMIT_ID,STEP_ID,STS,STS_DATE)");sql.append(" VALUES (:areaId,:assignDept,:chgServSpecId,:dealFlag,:hastenValue,:localNetId,:metricUnit,:metricValue,:preValue,:priority,:prodId,:remarks,:specPrptyId,:specPrptyValue,:stepBusiLimitId,:stepId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(stepBusiLimit.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepBusiLimit.getAreaId());    }       if (StringUtil.isBlank(stepBusiLimit.getAssignDept())) {      sql.setNullString("assignDept");     } else {    sql.setString("assignDept", stepBusiLimit.getAssignDept());    }       if (StringUtil.isBlank(stepBusiLimit.getChgServSpecId())) {      sql.setNullString("chgServSpecId");     } else {    sql.setString("chgServSpecId", stepBusiLimit.getChgServSpecId());    }       if (StringUtil.isBlank(stepBusiLimit.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", stepBusiLimit.getDealFlag());    }       if (StringUtil.isBlank(stepBusiLimit.getHastenValue())) {      sql.setNullLong("hastenValue");     } else {    sql.setLong("hastenValue", stepBusiLimit.getHastenValue());    }       if (StringUtil.isBlank(stepBusiLimit.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepBusiLimit.getLocalNetId());    }       if (StringUtil.isBlank(stepBusiLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", stepBusiLimit.getMetricUnit());    }       if (StringUtil.isBlank(stepBusiLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", stepBusiLimit.getMetricValue());    }       if (StringUtil.isBlank(stepBusiLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", stepBusiLimit.getPreValue());    }       if (StringUtil.isBlank(stepBusiLimit.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", stepBusiLimit.getPriority());    }       if (StringUtil.isBlank(stepBusiLimit.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", stepBusiLimit.getProdId());    }       if (StringUtil.isBlank(stepBusiLimit.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepBusiLimit.getRemarks());    }       if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyId())) {      sql.setNullString("specPrptyId");     } else {    sql.setString("specPrptyId", stepBusiLimit.getSpecPrptyId());    }       if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyValue())) {      sql.setNullString("specPrptyValue");     } else {    sql.setString("specPrptyValue", stepBusiLimit.getSpecPrptyValue());    }       if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {      sql.setNullLong("stepBusiLimitId");     } else {    sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());    }       if (StringUtil.isBlank(stepBusiLimit.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepBusiLimit.getStepId());    }       if (StringUtil.isBlank(stepBusiLimit.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepBusiLimit.getSts());    }    if (stepBusiLimit.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", stepBusiLimit.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;    if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT AREA_ID,ASSIGN_DEPT,CHG_SERV_SPEC_ID,DEAL_FLAG,HASTEN_VALUE,LOCAL_NET_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PRIORITY,PROD_ID,REMARKS,SPEC_PRPTY_ID,SPEC_PRPTY_VALUE,STEP_BUSI_LIMIT_ID,STEP_ID,STS,STS_DATE FROM STEP_BUSI_LIMIT WHERE 1=1  ");sql.append(" and STEP_BUSI_LIMIT_ID=:stepBusiLimitId");sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      stepBusiLimit =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           stepBusiLimit = new StepBusiLimitSVO();           stepBusiLimit.setAreaId(rs.getString("AREA_ID"));           stepBusiLimit.setAssignDept(rs.getString("ASSIGN_DEPT"));           stepBusiLimit.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           stepBusiLimit.setDealFlag(rs.getString("DEAL_FLAG"));           stepBusiLimit.setHastenValue(rs.getString("HASTEN_VALUE"));           stepBusiLimit.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepBusiLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           stepBusiLimit.setMetricValue(rs.getString("METRIC_VALUE"));           stepBusiLimit.setPreValue(rs.getString("PRE_VALUE"));           stepBusiLimit.setPriority(rs.getString("PRIORITY"));           stepBusiLimit.setProdId(rs.getString("PROD_ID"));           stepBusiLimit.setRemarks(rs.getString("REMARKS"));           stepBusiLimit.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           stepBusiLimit.setSpecPrptyValue(rs.getString("SPEC_PRPTY_VALUE"));           stepBusiLimit.setStepBusiLimitId(rs.getString("STEP_BUSI_LIMIT_ID"));           stepBusiLimit.setStepId(rs.getString("STEP_ID"));           stepBusiLimit.setSts(rs.getString("STS"));           stepBusiLimit.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return stepBusiLimit;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT AREA_ID,ASSIGN_DEPT,CHG_SERV_SPEC_ID,DEAL_FLAG,HASTEN_VALUE,LOCAL_NET_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PRIORITY,PROD_ID,REMARKS,SPEC_PRPTY_ID,SPEC_PRPTY_VALUE,STEP_BUSI_LIMIT_ID,STEP_ID,STS,STS_DATE FROM STEP_BUSI_LIMIT WHERE 1=1 ");     try {if (stepBusiLimit.getFlagAreaId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", stepBusiLimit.getAreaId());          }   } if (stepBusiLimit.getFlagAssignDept() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getAssignDept())) {             sql.append(" and ASSIGN_DEPT is null ");          }      else{             sql.append(" and ASSIGN_DEPT=:assignDept");             sql.setString("assignDept", stepBusiLimit.getAssignDept());          }   } if (stepBusiLimit.getFlagChgServSpecId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getChgServSpecId())) {             sql.append(" and CHG_SERV_SPEC_ID is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_ID=:chgServSpecId");             sql.setString("chgServSpecId", stepBusiLimit.getChgServSpecId());          }   } if (stepBusiLimit.getFlagDealFlag() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getDealFlag())) {             sql.append(" and DEAL_FLAG is null ");          }      else{             sql.append(" and DEAL_FLAG=:dealFlag");             sql.setString("dealFlag", stepBusiLimit.getDealFlag());          }   } if (stepBusiLimit.getFlagHastenValue() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getHastenValue())) {             sql.append(" and HASTEN_VALUE is null ");          }      else{             sql.append(" and HASTEN_VALUE=:hastenValue");             sql.setLong("hastenValue", stepBusiLimit.getHastenValue());          }   } if (stepBusiLimit.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", stepBusiLimit.getLocalNetId());          }   } if (stepBusiLimit.getFlagMetricUnit() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getMetricUnit())) {             sql.append(" and METRIC_UNIT is null ");          }      else{             sql.append(" and METRIC_UNIT=:metricUnit");             sql.setLong("metricUnit", stepBusiLimit.getMetricUnit());          }   } if (stepBusiLimit.getFlagMetricValue() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getMetricValue())) {             sql.append(" and METRIC_VALUE is null ");          }      else{             sql.append(" and METRIC_VALUE=:metricValue");             sql.setLong("metricValue", stepBusiLimit.getMetricValue());          }   } if (stepBusiLimit.getFlagPreValue() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getPreValue())) {             sql.append(" and PRE_VALUE is null ");          }      else{             sql.append(" and PRE_VALUE=:preValue");             sql.setLong("preValue", stepBusiLimit.getPreValue());          }   } if (stepBusiLimit.getFlagPriority() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getPriority())) {             sql.append(" and PRIORITY is null ");          }      else{             sql.append(" and PRIORITY=:priority");             sql.setLong("priority", stepBusiLimit.getPriority());          }   } if (stepBusiLimit.getFlagProdId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setString("prodId", stepBusiLimit.getProdId());          }   } if (stepBusiLimit.getFlagRemarks() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", stepBusiLimit.getRemarks());          }   } if (stepBusiLimit.getFlagSpecPrptyId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyId())) {             sql.append(" and SPEC_PRPTY_ID is null ");          }      else{             sql.append(" and SPEC_PRPTY_ID=:specPrptyId");             sql.setString("specPrptyId", stepBusiLimit.getSpecPrptyId());          }   } if (stepBusiLimit.getFlagSpecPrptyValue() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyValue())) {             sql.append(" and SPEC_PRPTY_VALUE is null ");          }      else{             sql.append(" and SPEC_PRPTY_VALUE=:specPrptyValue");             sql.setString("specPrptyValue", stepBusiLimit.getSpecPrptyValue());          }   } if (stepBusiLimit.getFlagStepBusiLimitId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {             sql.append(" and STEP_BUSI_LIMIT_ID is null ");          }      else{             sql.append(" and STEP_BUSI_LIMIT_ID=:stepBusiLimitId");             sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());          }   } if (stepBusiLimit.getFlagStepId() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getStepId())) {             sql.append(" and STEP_ID is null ");          }      else{             sql.append(" and STEP_ID=:stepId");             sql.setString("stepId", stepBusiLimit.getStepId());          }   } if (stepBusiLimit.getFlagSts() == 1) {      if (StringUtil.isBlank(stepBusiLimit.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", stepBusiLimit.getSts());          }   } if (stepBusiLimit.getFlagStsDate() == 1) {      if (stepBusiLimit.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", stepBusiLimit.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           stepBusiLimit = new StepBusiLimitSVO();           stepBusiLimit.setAreaId(rs.getString("AREA_ID"));           stepBusiLimit.setAssignDept(rs.getString("ASSIGN_DEPT"));           stepBusiLimit.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           stepBusiLimit.setDealFlag(rs.getString("DEAL_FLAG"));           stepBusiLimit.setHastenValue(rs.getString("HASTEN_VALUE"));           stepBusiLimit.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepBusiLimit.setMetricUnit(rs.getString("METRIC_UNIT"));           stepBusiLimit.setMetricValue(rs.getString("METRIC_VALUE"));           stepBusiLimit.setPreValue(rs.getString("PRE_VALUE"));           stepBusiLimit.setPriority(rs.getString("PRIORITY"));           stepBusiLimit.setProdId(rs.getString("PROD_ID"));           stepBusiLimit.setRemarks(rs.getString("REMARKS"));           stepBusiLimit.setSpecPrptyId(rs.getString("SPEC_PRPTY_ID"));           stepBusiLimit.setSpecPrptyValue(rs.getString("SPEC_PRPTY_VALUE"));           stepBusiLimit.setStepBusiLimitId(rs.getString("STEP_BUSI_LIMIT_ID"));           stepBusiLimit.setStepId(rs.getString("STEP_ID"));           stepBusiLimit.setSts(rs.getString("STS"));           stepBusiLimit.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(stepBusiLimit);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;    if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE STEP_BUSI_LIMIT SET ");     try {if (stepBusiLimit.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", stepBusiLimit.getAreaId()); } if (stepBusiLimit.getFlagAssignDept() == 1) {sql.append("ASSIGN_DEPT=:assignDept,"); sql.setString("assignDept", stepBusiLimit.getAssignDept()); } if (stepBusiLimit.getFlagChgServSpecId() == 1) {sql.append("CHG_SERV_SPEC_ID=:chgServSpecId,"); sql.setString("chgServSpecId", stepBusiLimit.getChgServSpecId()); } if (stepBusiLimit.getFlagDealFlag() == 1) {sql.append("DEAL_FLAG=:dealFlag,"); sql.setString("dealFlag", stepBusiLimit.getDealFlag()); } if (stepBusiLimit.getFlagHastenValue() == 1) {sql.append("HASTEN_VALUE=:hastenValue,");sql.setLong("hastenValue", stepBusiLimit.getHastenValue()); } if (stepBusiLimit.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", stepBusiLimit.getLocalNetId()); } if (stepBusiLimit.getFlagMetricUnit() == 1) {sql.append("METRIC_UNIT=:metricUnit,");sql.setLong("metricUnit", stepBusiLimit.getMetricUnit()); } if (stepBusiLimit.getFlagMetricValue() == 1) {sql.append("METRIC_VALUE=:metricValue,");sql.setLong("metricValue", stepBusiLimit.getMetricValue()); } if (stepBusiLimit.getFlagPreValue() == 1) {sql.append("PRE_VALUE=:preValue,");sql.setLong("preValue", stepBusiLimit.getPreValue()); } if (stepBusiLimit.getFlagPriority() == 1) {sql.append("PRIORITY=:priority,");sql.setLong("priority", stepBusiLimit.getPriority()); } if (stepBusiLimit.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,"); sql.setString("prodId", stepBusiLimit.getProdId()); } if (stepBusiLimit.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", stepBusiLimit.getRemarks()); } if (stepBusiLimit.getFlagSpecPrptyId() == 1) {sql.append("SPEC_PRPTY_ID=:specPrptyId,"); sql.setString("specPrptyId", stepBusiLimit.getSpecPrptyId()); } if (stepBusiLimit.getFlagSpecPrptyValue() == 1) {sql.append("SPEC_PRPTY_VALUE=:specPrptyValue,"); sql.setString("specPrptyValue", stepBusiLimit.getSpecPrptyValue()); } if (stepBusiLimit.getFlagStepId() == 1) {sql.append("STEP_ID=:stepId,"); sql.setString("stepId", stepBusiLimit.getStepId()); } if (stepBusiLimit.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", stepBusiLimit.getSts()); } if (stepBusiLimit.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", stepBusiLimit.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and STEP_BUSI_LIMIT_ID=:stepBusiLimitId");sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_BUSI_LIMIT(AREA_ID,ASSIGN_DEPT,CHG_SERV_SPEC_ID,DEAL_FLAG,HASTEN_VALUE,LOCAL_NET_ID,METRIC_UNIT,METRIC_VALUE,PRE_VALUE,PRIORITY,PROD_ID,REMARKS,SPEC_PRPTY_ID,SPEC_PRPTY_VALUE,STEP_BUSI_LIMIT_ID,STEP_ID,STS,STS_DATE)");sql.append(" VALUES (:areaId,:assignDept,:chgServSpecId,:dealFlag,:hastenValue,:localNetId,:metricUnit,:metricValue,:preValue,:priority,:prodId,:remarks,:specPrptyId,:specPrptyValue,:stepBusiLimitId,:stepId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) list.get(i);         if (stepBusiLimit== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(stepBusiLimit.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepBusiLimit.getAreaId());    }       if (StringUtil.isBlank(stepBusiLimit.getAssignDept())) {      sql.setNullString("assignDept");     } else {    sql.setString("assignDept", stepBusiLimit.getAssignDept());    }       if (StringUtil.isBlank(stepBusiLimit.getChgServSpecId())) {      sql.setNullString("chgServSpecId");     } else {    sql.setString("chgServSpecId", stepBusiLimit.getChgServSpecId());    }       if (StringUtil.isBlank(stepBusiLimit.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", stepBusiLimit.getDealFlag());    }       if (StringUtil.isBlank(stepBusiLimit.getHastenValue())) {      sql.setNullLong("hastenValue");     } else {    sql.setLong("hastenValue", stepBusiLimit.getHastenValue());    }       if (StringUtil.isBlank(stepBusiLimit.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepBusiLimit.getLocalNetId());    }       if (StringUtil.isBlank(stepBusiLimit.getMetricUnit())) {      sql.setNullLong("metricUnit");     } else {    sql.setLong("metricUnit", stepBusiLimit.getMetricUnit());    }       if (StringUtil.isBlank(stepBusiLimit.getMetricValue())) {      sql.setNullLong("metricValue");     } else {    sql.setLong("metricValue", stepBusiLimit.getMetricValue());    }       if (StringUtil.isBlank(stepBusiLimit.getPreValue())) {      sql.setNullLong("preValue");     } else {    sql.setLong("preValue", stepBusiLimit.getPreValue());    }       if (StringUtil.isBlank(stepBusiLimit.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", stepBusiLimit.getPriority());    }       if (StringUtil.isBlank(stepBusiLimit.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", stepBusiLimit.getProdId());    }       if (StringUtil.isBlank(stepBusiLimit.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepBusiLimit.getRemarks());    }       if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyId())) {      sql.setNullString("specPrptyId");     } else {    sql.setString("specPrptyId", stepBusiLimit.getSpecPrptyId());    }       if (StringUtil.isBlank(stepBusiLimit.getSpecPrptyValue())) {      sql.setNullString("specPrptyValue");     } else {    sql.setString("specPrptyValue", stepBusiLimit.getSpecPrptyValue());    }       if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {      sql.setNullLong("stepBusiLimitId");     } else {    sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());    }       if (StringUtil.isBlank(stepBusiLimit.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepBusiLimit.getStepId());    }       if (StringUtil.isBlank(stepBusiLimit.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepBusiLimit.getSts());    }    if (stepBusiLimit.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", stepBusiLimit.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;    if (StringUtil.isBlank(stepBusiLimit.getStepBusiLimitId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM STEP_BUSI_LIMIT WHERE 1=1  ");sql.append(" and STEP_BUSI_LIMIT_ID=:stepBusiLimitId");sql.setLong("stepBusiLimitId", stepBusiLimit.getStepBusiLimitId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     StepBusiLimitSVO stepBusiLimit=(StepBusiLimitSVO) vo;       }}
