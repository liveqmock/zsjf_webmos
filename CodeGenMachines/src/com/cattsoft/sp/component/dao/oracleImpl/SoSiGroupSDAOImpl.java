package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoSiGroupSDAO;import com.cattsoft.sp.vo.SoSiGroupSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoSiGroupSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoSiGroupSDAOImpl implements ISoSiGroupSDAO{    private static Logger log = Logger.getLogger(SoSiGroupSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;    if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_SI_GROUP(ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_SPEC_ID,GROUP_TYPE_ID,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_ID,PRICE_PLAN_NAME,REMARKS,SI_GROUP_CODE,SI_GROUP_ID,SI_GROUP_NAME,SO_NBR,SO_SI_GROUP_ID,SO_SI_GROUP_NO,STS,STS_DATE,WO_ACTION)");sql.append(" VALUES (:actType,:effDate,:expDate,:groupSpecId,:groupTypeId,:localNetId,:noFlag,:pricePlanId,:pricePlanName,:remarks,:siGroupCode,:siGroupId,:siGroupName,:soNbr,:soSiGroupId,:soSiGroupNo,:sts,:stsDate,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(soSiGroup.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soSiGroup.getActType());    }    if (soSiGroup.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soSiGroup.getEffDate());    }    if (soSiGroup.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soSiGroup.getExpDate());    }       if (StringUtil.isBlank(soSiGroup.getGroupSpecId())) {      sql.setNullLong("groupSpecId");     } else {    sql.setLong("groupSpecId", soSiGroup.getGroupSpecId());    }       if (StringUtil.isBlank(soSiGroup.getGroupTypeId())) {      sql.setNullLong("groupTypeId");     } else {    sql.setLong("groupTypeId", soSiGroup.getGroupTypeId());    }       if (StringUtil.isBlank(soSiGroup.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soSiGroup.getLocalNetId());    }       if (StringUtil.isBlank(soSiGroup.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soSiGroup.getNoFlag());    }       if (StringUtil.isBlank(soSiGroup.getPricePlanId())) {      sql.setNullLong("pricePlanId");     } else {    sql.setLong("pricePlanId", soSiGroup.getPricePlanId());    }       if (StringUtil.isBlank(soSiGroup.getPricePlanName())) {      sql.setNullString("pricePlanName");     } else {    sql.setString("pricePlanName", soSiGroup.getPricePlanName());    }       if (StringUtil.isBlank(soSiGroup.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", soSiGroup.getRemarks());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupCode())) {      sql.setNullString("siGroupCode");     } else {    sql.setString("siGroupCode", soSiGroup.getSiGroupCode());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupId())) {      sql.setNullLong("siGroupId");     } else {    sql.setLong("siGroupId", soSiGroup.getSiGroupId());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupName())) {      sql.setNullString("siGroupName");     } else {    sql.setString("siGroupName", soSiGroup.getSiGroupName());    }       if (StringUtil.isBlank(soSiGroup.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soSiGroup.getSoNbr());    }       if (StringUtil.isBlank(soSiGroup.getSoSiGroupId())) {      sql.setNullLong("soSiGroupId");     } else {    sql.setLong("soSiGroupId", soSiGroup.getSoSiGroupId());    }       if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {      sql.setNullLong("soSiGroupNo");     } else {    sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());    }       if (StringUtil.isBlank(soSiGroup.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soSiGroup.getSts());    }    if (soSiGroup.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soSiGroup.getStsDate());    }       if (StringUtil.isBlank(soSiGroup.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", soSiGroup.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;    if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_SPEC_ID,GROUP_TYPE_ID,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_ID,PRICE_PLAN_NAME,REMARKS,SI_GROUP_CODE,SI_GROUP_ID,SI_GROUP_NAME,SO_NBR,SO_SI_GROUP_ID,SO_SI_GROUP_NO,STS,STS_DATE,WO_ACTION FROM SO_SI_GROUP WHERE 1=1  ");sql.append(" and SO_SI_GROUP_NO=:soSiGroupNo");sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      soSiGroup =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           soSiGroup = new SoSiGroupSVO();           soSiGroup.setActType(rs.getString("ACT_TYPE"));           soSiGroup.setEffDate(rs.getTimestamp("EFF_DATE"));           soSiGroup.setExpDate(rs.getTimestamp("EXP_DATE"));           soSiGroup.setGroupSpecId(rs.getString("GROUP_SPEC_ID"));           soSiGroup.setGroupTypeId(rs.getString("GROUP_TYPE_ID"));           soSiGroup.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soSiGroup.setNoFlag(rs.getString("NO_FLAG"));           soSiGroup.setPricePlanId(rs.getString("PRICE_PLAN_ID"));           soSiGroup.setPricePlanName(rs.getString("PRICE_PLAN_NAME"));           soSiGroup.setRemarks(rs.getString("REMARKS"));           soSiGroup.setSiGroupCode(rs.getString("SI_GROUP_CODE"));           soSiGroup.setSiGroupId(rs.getString("SI_GROUP_ID"));           soSiGroup.setSiGroupName(rs.getString("SI_GROUP_NAME"));           soSiGroup.setSoNbr(rs.getString("SO_NBR"));           soSiGroup.setSoSiGroupId(rs.getString("SO_SI_GROUP_ID"));           soSiGroup.setSoSiGroupNo(rs.getString("SO_SI_GROUP_NO"));           soSiGroup.setSts(rs.getString("STS"));           soSiGroup.setStsDate(rs.getTimestamp("STS_DATE"));           soSiGroup.setWoAction(rs.getString("WO_ACTION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return soSiGroup;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_SPEC_ID,GROUP_TYPE_ID,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_ID,PRICE_PLAN_NAME,REMARKS,SI_GROUP_CODE,SI_GROUP_ID,SI_GROUP_NAME,SO_NBR,SO_SI_GROUP_ID,SO_SI_GROUP_NO,STS,STS_DATE,WO_ACTION FROM SO_SI_GROUP WHERE 1=1 ");     try {if (soSiGroup.getFlagActType() == 1) {      if (StringUtil.isBlank(soSiGroup.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", soSiGroup.getActType());          }   } if (soSiGroup.getFlagEffDate() == 1) {      if (soSiGroup.getEffDate() == null) {             sql.append(" and EFF_DATE is null ");          }      else{             sql.append(" and EFF_DATE=:effDate");             sql.setTimestamp("effDate", soSiGroup.getEffDate());          }   } if (soSiGroup.getFlagExpDate() == 1) {      if (soSiGroup.getExpDate() == null) {             sql.append(" and EXP_DATE is null ");          }      else{             sql.append(" and EXP_DATE=:expDate");             sql.setTimestamp("expDate", soSiGroup.getExpDate());          }   } if (soSiGroup.getFlagGroupSpecId() == 1) {      if (StringUtil.isBlank(soSiGroup.getGroupSpecId())) {             sql.append(" and GROUP_SPEC_ID is null ");          }      else{             sql.append(" and GROUP_SPEC_ID=:groupSpecId");             sql.setLong("groupSpecId", soSiGroup.getGroupSpecId());          }   } if (soSiGroup.getFlagGroupTypeId() == 1) {      if (StringUtil.isBlank(soSiGroup.getGroupTypeId())) {             sql.append(" and GROUP_TYPE_ID is null ");          }      else{             sql.append(" and GROUP_TYPE_ID=:groupTypeId");             sql.setLong("groupTypeId", soSiGroup.getGroupTypeId());          }   } if (soSiGroup.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(soSiGroup.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", soSiGroup.getLocalNetId());          }   } if (soSiGroup.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(soSiGroup.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", soSiGroup.getNoFlag());          }   } if (soSiGroup.getFlagPricePlanId() == 1) {      if (StringUtil.isBlank(soSiGroup.getPricePlanId())) {             sql.append(" and PRICE_PLAN_ID is null ");          }      else{             sql.append(" and PRICE_PLAN_ID=:pricePlanId");             sql.setLong("pricePlanId", soSiGroup.getPricePlanId());          }   } if (soSiGroup.getFlagPricePlanName() == 1) {      if (StringUtil.isBlank(soSiGroup.getPricePlanName())) {             sql.append(" and PRICE_PLAN_NAME is null ");          }      else{             sql.append(" and PRICE_PLAN_NAME=:pricePlanName");             sql.setString("pricePlanName", soSiGroup.getPricePlanName());          }   } if (soSiGroup.getFlagRemarks() == 1) {      if (StringUtil.isBlank(soSiGroup.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", soSiGroup.getRemarks());          }   } if (soSiGroup.getFlagSiGroupCode() == 1) {      if (StringUtil.isBlank(soSiGroup.getSiGroupCode())) {             sql.append(" and SI_GROUP_CODE is null ");          }      else{             sql.append(" and SI_GROUP_CODE=:siGroupCode");             sql.setString("siGroupCode", soSiGroup.getSiGroupCode());          }   } if (soSiGroup.getFlagSiGroupId() == 1) {      if (StringUtil.isBlank(soSiGroup.getSiGroupId())) {             sql.append(" and SI_GROUP_ID is null ");          }      else{             sql.append(" and SI_GROUP_ID=:siGroupId");             sql.setLong("siGroupId", soSiGroup.getSiGroupId());          }   } if (soSiGroup.getFlagSiGroupName() == 1) {      if (StringUtil.isBlank(soSiGroup.getSiGroupName())) {             sql.append(" and SI_GROUP_NAME is null ");          }      else{             sql.append(" and SI_GROUP_NAME=:siGroupName");             sql.setString("siGroupName", soSiGroup.getSiGroupName());          }   } if (soSiGroup.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(soSiGroup.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", soSiGroup.getSoNbr());          }   } if (soSiGroup.getFlagSoSiGroupId() == 1) {      if (StringUtil.isBlank(soSiGroup.getSoSiGroupId())) {             sql.append(" and SO_SI_GROUP_ID is null ");          }      else{             sql.append(" and SO_SI_GROUP_ID=:soSiGroupId");             sql.setLong("soSiGroupId", soSiGroup.getSoSiGroupId());          }   } if (soSiGroup.getFlagSoSiGroupNo() == 1) {      if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {             sql.append(" and SO_SI_GROUP_NO is null ");          }      else{             sql.append(" and SO_SI_GROUP_NO=:soSiGroupNo");             sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());          }   } if (soSiGroup.getFlagSts() == 1) {      if (StringUtil.isBlank(soSiGroup.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", soSiGroup.getSts());          }   } if (soSiGroup.getFlagStsDate() == 1) {      if (soSiGroup.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", soSiGroup.getStsDate());          }   } if (soSiGroup.getFlagWoAction() == 1) {      if (StringUtil.isBlank(soSiGroup.getWoAction())) {             sql.append(" and WO_ACTION is null ");          }      else{             sql.append(" and WO_ACTION=:woAction");             sql.setString("woAction", soSiGroup.getWoAction());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           soSiGroup = new SoSiGroupSVO();           soSiGroup.setActType(rs.getString("ACT_TYPE"));           soSiGroup.setEffDate(rs.getTimestamp("EFF_DATE"));           soSiGroup.setExpDate(rs.getTimestamp("EXP_DATE"));           soSiGroup.setGroupSpecId(rs.getString("GROUP_SPEC_ID"));           soSiGroup.setGroupTypeId(rs.getString("GROUP_TYPE_ID"));           soSiGroup.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soSiGroup.setNoFlag(rs.getString("NO_FLAG"));           soSiGroup.setPricePlanId(rs.getString("PRICE_PLAN_ID"));           soSiGroup.setPricePlanName(rs.getString("PRICE_PLAN_NAME"));           soSiGroup.setRemarks(rs.getString("REMARKS"));           soSiGroup.setSiGroupCode(rs.getString("SI_GROUP_CODE"));           soSiGroup.setSiGroupId(rs.getString("SI_GROUP_ID"));           soSiGroup.setSiGroupName(rs.getString("SI_GROUP_NAME"));           soSiGroup.setSoNbr(rs.getString("SO_NBR"));           soSiGroup.setSoSiGroupId(rs.getString("SO_SI_GROUP_ID"));           soSiGroup.setSoSiGroupNo(rs.getString("SO_SI_GROUP_NO"));           soSiGroup.setSts(rs.getString("STS"));           soSiGroup.setStsDate(rs.getTimestamp("STS_DATE"));           soSiGroup.setWoAction(rs.getString("WO_ACTION"));               res.add(soSiGroup);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;    if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO_SI_GROUP SET ");     try {if (soSiGroup.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", soSiGroup.getActType()); } if (soSiGroup.getFlagEffDate() == 1) {sql.append("EFF_DATE=:effDate,"); sql.setTimestamp("effDate", soSiGroup.getEffDate()); } if (soSiGroup.getFlagExpDate() == 1) {sql.append("EXP_DATE=:expDate,"); sql.setTimestamp("expDate", soSiGroup.getExpDate()); } if (soSiGroup.getFlagGroupSpecId() == 1) {sql.append("GROUP_SPEC_ID=:groupSpecId,");sql.setLong("groupSpecId", soSiGroup.getGroupSpecId()); } if (soSiGroup.getFlagGroupTypeId() == 1) {sql.append("GROUP_TYPE_ID=:groupTypeId,");sql.setLong("groupTypeId", soSiGroup.getGroupTypeId()); } if (soSiGroup.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", soSiGroup.getLocalNetId()); } if (soSiGroup.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", soSiGroup.getNoFlag()); } if (soSiGroup.getFlagPricePlanId() == 1) {sql.append("PRICE_PLAN_ID=:pricePlanId,");sql.setLong("pricePlanId", soSiGroup.getPricePlanId()); } if (soSiGroup.getFlagPricePlanName() == 1) {sql.append("PRICE_PLAN_NAME=:pricePlanName,"); sql.setString("pricePlanName", soSiGroup.getPricePlanName()); } if (soSiGroup.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", soSiGroup.getRemarks()); } if (soSiGroup.getFlagSiGroupCode() == 1) {sql.append("SI_GROUP_CODE=:siGroupCode,"); sql.setString("siGroupCode", soSiGroup.getSiGroupCode()); } if (soSiGroup.getFlagSiGroupId() == 1) {sql.append("SI_GROUP_ID=:siGroupId,");sql.setLong("siGroupId", soSiGroup.getSiGroupId()); } if (soSiGroup.getFlagSiGroupName() == 1) {sql.append("SI_GROUP_NAME=:siGroupName,"); sql.setString("siGroupName", soSiGroup.getSiGroupName()); } if (soSiGroup.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", soSiGroup.getSoNbr()); } if (soSiGroup.getFlagSoSiGroupId() == 1) {sql.append("SO_SI_GROUP_ID=:soSiGroupId,");sql.setLong("soSiGroupId", soSiGroup.getSoSiGroupId()); } if (soSiGroup.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", soSiGroup.getSts()); } if (soSiGroup.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", soSiGroup.getStsDate()); } if (soSiGroup.getFlagWoAction() == 1) {sql.append("WO_ACTION=:woAction,"); sql.setString("woAction", soSiGroup.getWoAction()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and SO_SI_GROUP_NO=:soSiGroupNo");sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_SI_GROUP(ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_SPEC_ID,GROUP_TYPE_ID,LOCAL_NET_ID,NO_FLAG,PRICE_PLAN_ID,PRICE_PLAN_NAME,REMARKS,SI_GROUP_CODE,SI_GROUP_ID,SI_GROUP_NAME,SO_NBR,SO_SI_GROUP_ID,SO_SI_GROUP_NO,STS,STS_DATE,WO_ACTION)");sql.append(" VALUES (:actType,:effDate,:expDate,:groupSpecId,:groupTypeId,:localNetId,:noFlag,:pricePlanId,:pricePlanName,:remarks,:siGroupCode,:siGroupId,:siGroupName,:soNbr,:soSiGroupId,:soSiGroupNo,:sts,:stsDate,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoSiGroupSVO soSiGroup=(SoSiGroupSVO) list.get(i);         if (soSiGroup== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(soSiGroup.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soSiGroup.getActType());    }    if (soSiGroup.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soSiGroup.getEffDate());    }    if (soSiGroup.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soSiGroup.getExpDate());    }       if (StringUtil.isBlank(soSiGroup.getGroupSpecId())) {      sql.setNullLong("groupSpecId");     } else {    sql.setLong("groupSpecId", soSiGroup.getGroupSpecId());    }       if (StringUtil.isBlank(soSiGroup.getGroupTypeId())) {      sql.setNullLong("groupTypeId");     } else {    sql.setLong("groupTypeId", soSiGroup.getGroupTypeId());    }       if (StringUtil.isBlank(soSiGroup.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soSiGroup.getLocalNetId());    }       if (StringUtil.isBlank(soSiGroup.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soSiGroup.getNoFlag());    }       if (StringUtil.isBlank(soSiGroup.getPricePlanId())) {      sql.setNullLong("pricePlanId");     } else {    sql.setLong("pricePlanId", soSiGroup.getPricePlanId());    }       if (StringUtil.isBlank(soSiGroup.getPricePlanName())) {      sql.setNullString("pricePlanName");     } else {    sql.setString("pricePlanName", soSiGroup.getPricePlanName());    }       if (StringUtil.isBlank(soSiGroup.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", soSiGroup.getRemarks());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupCode())) {      sql.setNullString("siGroupCode");     } else {    sql.setString("siGroupCode", soSiGroup.getSiGroupCode());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupId())) {      sql.setNullLong("siGroupId");     } else {    sql.setLong("siGroupId", soSiGroup.getSiGroupId());    }       if (StringUtil.isBlank(soSiGroup.getSiGroupName())) {      sql.setNullString("siGroupName");     } else {    sql.setString("siGroupName", soSiGroup.getSiGroupName());    }       if (StringUtil.isBlank(soSiGroup.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soSiGroup.getSoNbr());    }       if (StringUtil.isBlank(soSiGroup.getSoSiGroupId())) {      sql.setNullLong("soSiGroupId");     } else {    sql.setLong("soSiGroupId", soSiGroup.getSoSiGroupId());    }       if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {      sql.setNullLong("soSiGroupNo");     } else {    sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());    }       if (StringUtil.isBlank(soSiGroup.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soSiGroup.getSts());    }    if (soSiGroup.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soSiGroup.getStsDate());    }       if (StringUtil.isBlank(soSiGroup.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", soSiGroup.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;    if (StringUtil.isBlank(soSiGroup.getSoSiGroupNo())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO_SI_GROUP WHERE 1=1  ");sql.append(" and SO_SI_GROUP_NO=:soSiGroupNo");sql.setLong("soSiGroupNo", soSiGroup.getSoSiGroupNo());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoSiGroupSVO soSiGroup=(SoSiGroupSVO) vo;       }}
