package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.IStepFailReasonSDAO;import com.cattsoft.sp.vo.StepFailReasonSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法StepFailReasonSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class StepFailReasonSDAOImpl implements IStepFailReasonSDAO{    private static Logger log = Logger.getLogger(StepFailReasonSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;    if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_FAIL_REASON(ACTION_ID,AREA_ID,AUDIT_FLAG,FAIL_DO_FLAG,FAIL_REASON_ID,LOCAL_NET_ID,PROD_ID,REMARKS,RES_RELEASE_FLAG,STEP_ID,STEP_REASON_ID,STS,STS_DATE)");sql.append(" VALUES (:actionId,:areaId,:auditFlag,:failDoFlag,:failReasonId,:localNetId,:prodId,:remarks,:resReleaseFlag,:stepId,:stepReasonId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(stepFailReason.getActionId())) {      sql.setNullLong("actionId");     } else {    sql.setLong("actionId", stepFailReason.getActionId());    }       if (StringUtil.isBlank(stepFailReason.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepFailReason.getAreaId());    }       if (StringUtil.isBlank(stepFailReason.getAuditFlag())) {      sql.setNullString("auditFlag");     } else {    sql.setString("auditFlag", stepFailReason.getAuditFlag());    }       if (StringUtil.isBlank(stepFailReason.getFailDoFlag())) {      sql.setNullString("failDoFlag");     } else {    sql.setString("failDoFlag", stepFailReason.getFailDoFlag());    }       if (StringUtil.isBlank(stepFailReason.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", stepFailReason.getFailReasonId());    }       if (StringUtil.isBlank(stepFailReason.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepFailReason.getLocalNetId());    }       if (StringUtil.isBlank(stepFailReason.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", stepFailReason.getProdId());    }       if (StringUtil.isBlank(stepFailReason.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepFailReason.getRemarks());    }       if (StringUtil.isBlank(stepFailReason.getResReleaseFlag())) {      sql.setNullString("resReleaseFlag");     } else {    sql.setString("resReleaseFlag", stepFailReason.getResReleaseFlag());    }       if (StringUtil.isBlank(stepFailReason.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepFailReason.getStepId());    }       if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {      sql.setNullLong("stepReasonId");     } else {    sql.setLong("stepReasonId", stepFailReason.getStepReasonId());    }       if (StringUtil.isBlank(stepFailReason.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepFailReason.getSts());    }    if (stepFailReason.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", stepFailReason.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;    if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACTION_ID,AREA_ID,AUDIT_FLAG,FAIL_DO_FLAG,FAIL_REASON_ID,LOCAL_NET_ID,PROD_ID,REMARKS,RES_RELEASE_FLAG,STEP_ID,STEP_REASON_ID,STS,STS_DATE FROM STEP_FAIL_REASON WHERE 1=1  ");sql.append(" and STEP_REASON_ID=:stepReasonId");sql.setLong("stepReasonId", stepFailReason.getStepReasonId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      stepFailReason =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           stepFailReason = new StepFailReasonSVO();           stepFailReason.setActionId(rs.getString("ACTION_ID"));           stepFailReason.setAreaId(rs.getString("AREA_ID"));           stepFailReason.setAuditFlag(rs.getString("AUDIT_FLAG"));           stepFailReason.setFailDoFlag(rs.getString("FAIL_DO_FLAG"));           stepFailReason.setFailReasonId(rs.getString("FAIL_REASON_ID"));           stepFailReason.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepFailReason.setProdId(rs.getString("PROD_ID"));           stepFailReason.setRemarks(rs.getString("REMARKS"));           stepFailReason.setResReleaseFlag(rs.getString("RES_RELEASE_FLAG"));           stepFailReason.setStepId(rs.getString("STEP_ID"));           stepFailReason.setStepReasonId(rs.getString("STEP_REASON_ID"));           stepFailReason.setSts(rs.getString("STS"));           stepFailReason.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return stepFailReason;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACTION_ID,AREA_ID,AUDIT_FLAG,FAIL_DO_FLAG,FAIL_REASON_ID,LOCAL_NET_ID,PROD_ID,REMARKS,RES_RELEASE_FLAG,STEP_ID,STEP_REASON_ID,STS,STS_DATE FROM STEP_FAIL_REASON WHERE 1=1 ");     try {if (stepFailReason.getFlagActionId() == 1) {      if (StringUtil.isBlank(stepFailReason.getActionId())) {             sql.append(" and ACTION_ID is null ");          }      else{             sql.append(" and ACTION_ID=:actionId");             sql.setLong("actionId", stepFailReason.getActionId());          }   } if (stepFailReason.getFlagAreaId() == 1) {      if (StringUtil.isBlank(stepFailReason.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", stepFailReason.getAreaId());          }   } if (stepFailReason.getFlagAuditFlag() == 1) {      if (StringUtil.isBlank(stepFailReason.getAuditFlag())) {             sql.append(" and AUDIT_FLAG is null ");          }      else{             sql.append(" and AUDIT_FLAG=:auditFlag");             sql.setString("auditFlag", stepFailReason.getAuditFlag());          }   } if (stepFailReason.getFlagFailDoFlag() == 1) {      if (StringUtil.isBlank(stepFailReason.getFailDoFlag())) {             sql.append(" and FAIL_DO_FLAG is null ");          }      else{             sql.append(" and FAIL_DO_FLAG=:failDoFlag");             sql.setString("failDoFlag", stepFailReason.getFailDoFlag());          }   } if (stepFailReason.getFlagFailReasonId() == 1) {      if (StringUtil.isBlank(stepFailReason.getFailReasonId())) {             sql.append(" and FAIL_REASON_ID is null ");          }      else{             sql.append(" and FAIL_REASON_ID=:failReasonId");             sql.setString("failReasonId", stepFailReason.getFailReasonId());          }   } if (stepFailReason.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(stepFailReason.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", stepFailReason.getLocalNetId());          }   } if (stepFailReason.getFlagProdId() == 1) {      if (StringUtil.isBlank(stepFailReason.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", stepFailReason.getProdId());          }   } if (stepFailReason.getFlagRemarks() == 1) {      if (StringUtil.isBlank(stepFailReason.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", stepFailReason.getRemarks());          }   } if (stepFailReason.getFlagResReleaseFlag() == 1) {      if (StringUtil.isBlank(stepFailReason.getResReleaseFlag())) {             sql.append(" and RES_RELEASE_FLAG is null ");          }      else{             sql.append(" and RES_RELEASE_FLAG=:resReleaseFlag");             sql.setString("resReleaseFlag", stepFailReason.getResReleaseFlag());          }   } if (stepFailReason.getFlagStepId() == 1) {      if (StringUtil.isBlank(stepFailReason.getStepId())) {             sql.append(" and STEP_ID is null ");          }      else{             sql.append(" and STEP_ID=:stepId");             sql.setString("stepId", stepFailReason.getStepId());          }   } if (stepFailReason.getFlagStepReasonId() == 1) {      if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {             sql.append(" and STEP_REASON_ID is null ");          }      else{             sql.append(" and STEP_REASON_ID=:stepReasonId");             sql.setLong("stepReasonId", stepFailReason.getStepReasonId());          }   } if (stepFailReason.getFlagSts() == 1) {      if (StringUtil.isBlank(stepFailReason.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", stepFailReason.getSts());          }   } if (stepFailReason.getFlagStsDate() == 1) {      if (stepFailReason.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", stepFailReason.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           stepFailReason = new StepFailReasonSVO();           stepFailReason.setActionId(rs.getString("ACTION_ID"));           stepFailReason.setAreaId(rs.getString("AREA_ID"));           stepFailReason.setAuditFlag(rs.getString("AUDIT_FLAG"));           stepFailReason.setFailDoFlag(rs.getString("FAIL_DO_FLAG"));           stepFailReason.setFailReasonId(rs.getString("FAIL_REASON_ID"));           stepFailReason.setLocalNetId(rs.getString("LOCAL_NET_ID"));           stepFailReason.setProdId(rs.getString("PROD_ID"));           stepFailReason.setRemarks(rs.getString("REMARKS"));           stepFailReason.setResReleaseFlag(rs.getString("RES_RELEASE_FLAG"));           stepFailReason.setStepId(rs.getString("STEP_ID"));           stepFailReason.setStepReasonId(rs.getString("STEP_REASON_ID"));           stepFailReason.setSts(rs.getString("STS"));           stepFailReason.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(stepFailReason);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;    if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE STEP_FAIL_REASON SET ");     try {if (stepFailReason.getFlagActionId() == 1) {sql.append("ACTION_ID=:actionId,");sql.setLong("actionId", stepFailReason.getActionId()); } if (stepFailReason.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", stepFailReason.getAreaId()); } if (stepFailReason.getFlagAuditFlag() == 1) {sql.append("AUDIT_FLAG=:auditFlag,"); sql.setString("auditFlag", stepFailReason.getAuditFlag()); } if (stepFailReason.getFlagFailDoFlag() == 1) {sql.append("FAIL_DO_FLAG=:failDoFlag,"); sql.setString("failDoFlag", stepFailReason.getFailDoFlag()); } if (stepFailReason.getFlagFailReasonId() == 1) {sql.append("FAIL_REASON_ID=:failReasonId,"); sql.setString("failReasonId", stepFailReason.getFailReasonId()); } if (stepFailReason.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", stepFailReason.getLocalNetId()); } if (stepFailReason.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", stepFailReason.getProdId()); } if (stepFailReason.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", stepFailReason.getRemarks()); } if (stepFailReason.getFlagResReleaseFlag() == 1) {sql.append("RES_RELEASE_FLAG=:resReleaseFlag,"); sql.setString("resReleaseFlag", stepFailReason.getResReleaseFlag()); } if (stepFailReason.getFlagStepId() == 1) {sql.append("STEP_ID=:stepId,"); sql.setString("stepId", stepFailReason.getStepId()); } if (stepFailReason.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", stepFailReason.getSts()); } if (stepFailReason.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", stepFailReason.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and STEP_REASON_ID=:stepReasonId");sql.setLong("stepReasonId", stepFailReason.getStepReasonId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO STEP_FAIL_REASON(ACTION_ID,AREA_ID,AUDIT_FLAG,FAIL_DO_FLAG,FAIL_REASON_ID,LOCAL_NET_ID,PROD_ID,REMARKS,RES_RELEASE_FLAG,STEP_ID,STEP_REASON_ID,STS,STS_DATE)");sql.append(" VALUES (:actionId,:areaId,:auditFlag,:failDoFlag,:failReasonId,:localNetId,:prodId,:remarks,:resReleaseFlag,:stepId,:stepReasonId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       StepFailReasonSVO stepFailReason=(StepFailReasonSVO) list.get(i);         if (stepFailReason== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(stepFailReason.getActionId())) {      sql.setNullLong("actionId");     } else {    sql.setLong("actionId", stepFailReason.getActionId());    }       if (StringUtil.isBlank(stepFailReason.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", stepFailReason.getAreaId());    }       if (StringUtil.isBlank(stepFailReason.getAuditFlag())) {      sql.setNullString("auditFlag");     } else {    sql.setString("auditFlag", stepFailReason.getAuditFlag());    }       if (StringUtil.isBlank(stepFailReason.getFailDoFlag())) {      sql.setNullString("failDoFlag");     } else {    sql.setString("failDoFlag", stepFailReason.getFailDoFlag());    }       if (StringUtil.isBlank(stepFailReason.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", stepFailReason.getFailReasonId());    }       if (StringUtil.isBlank(stepFailReason.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", stepFailReason.getLocalNetId());    }       if (StringUtil.isBlank(stepFailReason.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", stepFailReason.getProdId());    }       if (StringUtil.isBlank(stepFailReason.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", stepFailReason.getRemarks());    }       if (StringUtil.isBlank(stepFailReason.getResReleaseFlag())) {      sql.setNullString("resReleaseFlag");     } else {    sql.setString("resReleaseFlag", stepFailReason.getResReleaseFlag());    }       if (StringUtil.isBlank(stepFailReason.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", stepFailReason.getStepId());    }       if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {      sql.setNullLong("stepReasonId");     } else {    sql.setLong("stepReasonId", stepFailReason.getStepReasonId());    }       if (StringUtil.isBlank(stepFailReason.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", stepFailReason.getSts());    }    if (stepFailReason.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", stepFailReason.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;    if (StringUtil.isBlank(stepFailReason.getStepReasonId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM STEP_FAIL_REASON WHERE 1=1  ");sql.append(" and STEP_REASON_ID=:stepReasonId");sql.setLong("stepReasonId", stepFailReason.getStepReasonId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     StepFailReasonSVO stepFailReason=(StepFailReasonSVO) vo;       }}
