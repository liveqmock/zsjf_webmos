package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ITempFeeSoSubProdSDAO;import com.cattsoft.sp.vo.TempFeeSoSubProdSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TempFeeSoSubProdSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TempFeeSoSubProdSDAOImpl implements ITempFeeSoSubProdSDAO{    private static Logger log = Logger.getLogger(TempFeeSoSubProdSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;    if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_SUB_PROD(ACT_TYPE,COMPL_DATE,COMPL_FLAG,END_DATE,FAIL_REASON_ID,IS_SELF,LOCAL_NET_ID,MAN_SI_ID,NET_QUITITY_ID,NO_FLAG,PRE_PAY,PROD_ID,REMARKS,SERV_INST_ID,SO_NBR,START_DATE,STS,STS_DATE,TEMP_FEE_SO_SUB_PROD_ID,WO_ACTION)");sql.append(" VALUES (:actType,:complDate,:complFlag,:endDate,:failReasonId,:isSelf,:localNetId,:manSiId,:netQuitityId,:noFlag,:prePay,:prodId,:remarks,:servInstId,:soNbr,:startDate,:sts,:stsDate,:tempFeeSoSubProdId,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tempFeeSoSubProd.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoSubProd.getActType());    }    if (tempFeeSoSubProd.getComplDate() == null) {      sql.setNullDate("complDate");     } else {    sql.setTimestamp("complDate", tempFeeSoSubProd.getComplDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getComplFlag())) {      sql.setNullString("complFlag");     } else {    sql.setString("complFlag", tempFeeSoSubProd.getComplFlag());    }    if (tempFeeSoSubProd.getEndDate() == null) {      sql.setNullDate("endDate");     } else {    sql.setTimestamp("endDate", tempFeeSoSubProd.getEndDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", tempFeeSoSubProd.getFailReasonId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getIsSelf())) {      sql.setNullString("isSelf");     } else {    sql.setString("isSelf", tempFeeSoSubProd.getIsSelf());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoSubProd.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getManSiId())) {      sql.setNullLong("manSiId");     } else {    sql.setLong("manSiId", tempFeeSoSubProd.getManSiId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getNetQuitityId())) {      sql.setNullLong("netQuitityId");     } else {    sql.setLong("netQuitityId", tempFeeSoSubProd.getNetQuitityId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoSubProd.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getPrePay())) {      sql.setNullLong("prePay");     } else {    sql.setLong("prePay", tempFeeSoSubProd.getPrePay());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", tempFeeSoSubProd.getProdId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tempFeeSoSubProd.getRemarks());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", tempFeeSoSubProd.getServInstId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoSubProd.getSoNbr());    }    if (tempFeeSoSubProd.getStartDate() == null) {      sql.setNullDate("startDate");     } else {    sql.setTimestamp("startDate", tempFeeSoSubProd.getStartDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoSubProd.getSts());    }    if (tempFeeSoSubProd.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoSubProd.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {      sql.setNullLong("tempFeeSoSubProdId");     } else {    sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoSubProd.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;    if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACT_TYPE,COMPL_DATE,COMPL_FLAG,END_DATE,FAIL_REASON_ID,IS_SELF,LOCAL_NET_ID,MAN_SI_ID,NET_QUITITY_ID,NO_FLAG,PRE_PAY,PROD_ID,REMARKS,SERV_INST_ID,SO_NBR,START_DATE,STS,STS_DATE,TEMP_FEE_SO_SUB_PROD_ID,WO_ACTION FROM TEMP_FEE_SO_SUB_PROD WHERE 1=1  ");sql.append(" and TEMP_FEE_SO_SUB_PROD_ID=:tempFeeSoSubProdId");sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tempFeeSoSubProd =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tempFeeSoSubProd = new TempFeeSoSubProdSVO();           tempFeeSoSubProd.setActType(rs.getString("ACT_TYPE"));           tempFeeSoSubProd.setComplDate(rs.getTimestamp("COMPL_DATE"));           tempFeeSoSubProd.setComplFlag(rs.getString("COMPL_FLAG"));           tempFeeSoSubProd.setEndDate(rs.getTimestamp("END_DATE"));           tempFeeSoSubProd.setFailReasonId(rs.getString("FAIL_REASON_ID"));           tempFeeSoSubProd.setIsSelf(rs.getString("IS_SELF"));           tempFeeSoSubProd.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoSubProd.setManSiId(rs.getString("MAN_SI_ID"));           tempFeeSoSubProd.setNetQuitityId(rs.getString("NET_QUITITY_ID"));           tempFeeSoSubProd.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoSubProd.setPrePay(rs.getString("PRE_PAY"));           tempFeeSoSubProd.setProdId(rs.getString("PROD_ID"));           tempFeeSoSubProd.setRemarks(rs.getString("REMARKS"));           tempFeeSoSubProd.setServInstId(rs.getString("SERV_INST_ID"));           tempFeeSoSubProd.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoSubProd.setStartDate(rs.getTimestamp("START_DATE"));           tempFeeSoSubProd.setSts(rs.getString("STS"));           tempFeeSoSubProd.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoSubProd.setTempFeeSoSubProdId(rs.getString("TEMP_FEE_SO_SUB_PROD_ID"));           tempFeeSoSubProd.setWoAction(rs.getString("WO_ACTION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tempFeeSoSubProd;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,COMPL_DATE,COMPL_FLAG,END_DATE,FAIL_REASON_ID,IS_SELF,LOCAL_NET_ID,MAN_SI_ID,NET_QUITITY_ID,NO_FLAG,PRE_PAY,PROD_ID,REMARKS,SERV_INST_ID,SO_NBR,START_DATE,STS,STS_DATE,TEMP_FEE_SO_SUB_PROD_ID,WO_ACTION FROM TEMP_FEE_SO_SUB_PROD WHERE 1=1 ");     try {if (tempFeeSoSubProd.getFlagActType() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", tempFeeSoSubProd.getActType());          }   } if (tempFeeSoSubProd.getFlagComplDate() == 1) {      if (tempFeeSoSubProd.getComplDate() == null) {             sql.append(" and COMPL_DATE is null ");          }      else{             sql.append(" and COMPL_DATE=:complDate");             sql.setTimestamp("complDate", tempFeeSoSubProd.getComplDate());          }   } if (tempFeeSoSubProd.getFlagComplFlag() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getComplFlag())) {             sql.append(" and COMPL_FLAG is null ");          }      else{             sql.append(" and COMPL_FLAG=:complFlag");             sql.setString("complFlag", tempFeeSoSubProd.getComplFlag());          }   } if (tempFeeSoSubProd.getFlagEndDate() == 1) {      if (tempFeeSoSubProd.getEndDate() == null) {             sql.append(" and END_DATE is null ");          }      else{             sql.append(" and END_DATE=:endDate");             sql.setTimestamp("endDate", tempFeeSoSubProd.getEndDate());          }   } if (tempFeeSoSubProd.getFlagFailReasonId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getFailReasonId())) {             sql.append(" and FAIL_REASON_ID is null ");          }      else{             sql.append(" and FAIL_REASON_ID=:failReasonId");             sql.setString("failReasonId", tempFeeSoSubProd.getFailReasonId());          }   } if (tempFeeSoSubProd.getFlagIsSelf() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getIsSelf())) {             sql.append(" and IS_SELF is null ");          }      else{             sql.append(" and IS_SELF=:isSelf");             sql.setString("isSelf", tempFeeSoSubProd.getIsSelf());          }   } if (tempFeeSoSubProd.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", tempFeeSoSubProd.getLocalNetId());          }   } if (tempFeeSoSubProd.getFlagManSiId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getManSiId())) {             sql.append(" and MAN_SI_ID is null ");          }      else{             sql.append(" and MAN_SI_ID=:manSiId");             sql.setLong("manSiId", tempFeeSoSubProd.getManSiId());          }   } if (tempFeeSoSubProd.getFlagNetQuitityId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getNetQuitityId())) {             sql.append(" and NET_QUITITY_ID is null ");          }      else{             sql.append(" and NET_QUITITY_ID=:netQuitityId");             sql.setLong("netQuitityId", tempFeeSoSubProd.getNetQuitityId());          }   } if (tempFeeSoSubProd.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", tempFeeSoSubProd.getNoFlag());          }   } if (tempFeeSoSubProd.getFlagPrePay() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getPrePay())) {             sql.append(" and PRE_PAY is null ");          }      else{             sql.append(" and PRE_PAY=:prePay");             sql.setLong("prePay", tempFeeSoSubProd.getPrePay());          }   } if (tempFeeSoSubProd.getFlagProdId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", tempFeeSoSubProd.getProdId());          }   } if (tempFeeSoSubProd.getFlagRemarks() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", tempFeeSoSubProd.getRemarks());          }   } if (tempFeeSoSubProd.getFlagServInstId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", tempFeeSoSubProd.getServInstId());          }   } if (tempFeeSoSubProd.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", tempFeeSoSubProd.getSoNbr());          }   } if (tempFeeSoSubProd.getFlagStartDate() == 1) {      if (tempFeeSoSubProd.getStartDate() == null) {             sql.append(" and START_DATE is null ");          }      else{             sql.append(" and START_DATE=:startDate");             sql.setTimestamp("startDate", tempFeeSoSubProd.getStartDate());          }   } if (tempFeeSoSubProd.getFlagSts() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tempFeeSoSubProd.getSts());          }   } if (tempFeeSoSubProd.getFlagStsDate() == 1) {      if (tempFeeSoSubProd.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", tempFeeSoSubProd.getStsDate());          }   } if (tempFeeSoSubProd.getFlagTempFeeSoSubProdId() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {             sql.append(" and TEMP_FEE_SO_SUB_PROD_ID is null ");          }      else{             sql.append(" and TEMP_FEE_SO_SUB_PROD_ID=:tempFeeSoSubProdId");             sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());          }   } if (tempFeeSoSubProd.getFlagWoAction() == 1) {      if (StringUtil.isBlank(tempFeeSoSubProd.getWoAction())) {             sql.append(" and WO_ACTION is null ");          }      else{             sql.append(" and WO_ACTION=:woAction");             sql.setString("woAction", tempFeeSoSubProd.getWoAction());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tempFeeSoSubProd = new TempFeeSoSubProdSVO();           tempFeeSoSubProd.setActType(rs.getString("ACT_TYPE"));           tempFeeSoSubProd.setComplDate(rs.getTimestamp("COMPL_DATE"));           tempFeeSoSubProd.setComplFlag(rs.getString("COMPL_FLAG"));           tempFeeSoSubProd.setEndDate(rs.getTimestamp("END_DATE"));           tempFeeSoSubProd.setFailReasonId(rs.getString("FAIL_REASON_ID"));           tempFeeSoSubProd.setIsSelf(rs.getString("IS_SELF"));           tempFeeSoSubProd.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoSubProd.setManSiId(rs.getString("MAN_SI_ID"));           tempFeeSoSubProd.setNetQuitityId(rs.getString("NET_QUITITY_ID"));           tempFeeSoSubProd.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoSubProd.setPrePay(rs.getString("PRE_PAY"));           tempFeeSoSubProd.setProdId(rs.getString("PROD_ID"));           tempFeeSoSubProd.setRemarks(rs.getString("REMARKS"));           tempFeeSoSubProd.setServInstId(rs.getString("SERV_INST_ID"));           tempFeeSoSubProd.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoSubProd.setStartDate(rs.getTimestamp("START_DATE"));           tempFeeSoSubProd.setSts(rs.getString("STS"));           tempFeeSoSubProd.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoSubProd.setTempFeeSoSubProdId(rs.getString("TEMP_FEE_SO_SUB_PROD_ID"));           tempFeeSoSubProd.setWoAction(rs.getString("WO_ACTION"));               res.add(tempFeeSoSubProd);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;    if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TEMP_FEE_SO_SUB_PROD SET ");     try {if (tempFeeSoSubProd.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", tempFeeSoSubProd.getActType()); } if (tempFeeSoSubProd.getFlagComplDate() == 1) {sql.append("COMPL_DATE=:complDate,"); sql.setTimestamp("complDate", tempFeeSoSubProd.getComplDate()); } if (tempFeeSoSubProd.getFlagComplFlag() == 1) {sql.append("COMPL_FLAG=:complFlag,"); sql.setString("complFlag", tempFeeSoSubProd.getComplFlag()); } if (tempFeeSoSubProd.getFlagEndDate() == 1) {sql.append("END_DATE=:endDate,"); sql.setTimestamp("endDate", tempFeeSoSubProd.getEndDate()); } if (tempFeeSoSubProd.getFlagFailReasonId() == 1) {sql.append("FAIL_REASON_ID=:failReasonId,"); sql.setString("failReasonId", tempFeeSoSubProd.getFailReasonId()); } if (tempFeeSoSubProd.getFlagIsSelf() == 1) {sql.append("IS_SELF=:isSelf,"); sql.setString("isSelf", tempFeeSoSubProd.getIsSelf()); } if (tempFeeSoSubProd.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", tempFeeSoSubProd.getLocalNetId()); } if (tempFeeSoSubProd.getFlagManSiId() == 1) {sql.append("MAN_SI_ID=:manSiId,");sql.setLong("manSiId", tempFeeSoSubProd.getManSiId()); } if (tempFeeSoSubProd.getFlagNetQuitityId() == 1) {sql.append("NET_QUITITY_ID=:netQuitityId,");sql.setLong("netQuitityId", tempFeeSoSubProd.getNetQuitityId()); } if (tempFeeSoSubProd.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", tempFeeSoSubProd.getNoFlag()); } if (tempFeeSoSubProd.getFlagPrePay() == 1) {sql.append("PRE_PAY=:prePay,");sql.setLong("prePay", tempFeeSoSubProd.getPrePay()); } if (tempFeeSoSubProd.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", tempFeeSoSubProd.getProdId()); } if (tempFeeSoSubProd.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", tempFeeSoSubProd.getRemarks()); } if (tempFeeSoSubProd.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", tempFeeSoSubProd.getServInstId()); } if (tempFeeSoSubProd.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", tempFeeSoSubProd.getSoNbr()); } if (tempFeeSoSubProd.getFlagStartDate() == 1) {sql.append("START_DATE=:startDate,"); sql.setTimestamp("startDate", tempFeeSoSubProd.getStartDate()); } if (tempFeeSoSubProd.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tempFeeSoSubProd.getSts()); } if (tempFeeSoSubProd.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", tempFeeSoSubProd.getStsDate()); } if (tempFeeSoSubProd.getFlagWoAction() == 1) {sql.append("WO_ACTION=:woAction,"); sql.setString("woAction", tempFeeSoSubProd.getWoAction()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and TEMP_FEE_SO_SUB_PROD_ID=:tempFeeSoSubProdId");sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_SUB_PROD(ACT_TYPE,COMPL_DATE,COMPL_FLAG,END_DATE,FAIL_REASON_ID,IS_SELF,LOCAL_NET_ID,MAN_SI_ID,NET_QUITITY_ID,NO_FLAG,PRE_PAY,PROD_ID,REMARKS,SERV_INST_ID,SO_NBR,START_DATE,STS,STS_DATE,TEMP_FEE_SO_SUB_PROD_ID,WO_ACTION)");sql.append(" VALUES (:actType,:complDate,:complFlag,:endDate,:failReasonId,:isSelf,:localNetId,:manSiId,:netQuitityId,:noFlag,:prePay,:prodId,:remarks,:servInstId,:soNbr,:startDate,:sts,:stsDate,:tempFeeSoSubProdId,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) list.get(i);         if (tempFeeSoSubProd== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(tempFeeSoSubProd.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoSubProd.getActType());    }    if (tempFeeSoSubProd.getComplDate() == null) {      sql.setNullDate("complDate");     } else {    sql.setTimestamp("complDate", tempFeeSoSubProd.getComplDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getComplFlag())) {      sql.setNullString("complFlag");     } else {    sql.setString("complFlag", tempFeeSoSubProd.getComplFlag());    }    if (tempFeeSoSubProd.getEndDate() == null) {      sql.setNullDate("endDate");     } else {    sql.setTimestamp("endDate", tempFeeSoSubProd.getEndDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", tempFeeSoSubProd.getFailReasonId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getIsSelf())) {      sql.setNullString("isSelf");     } else {    sql.setString("isSelf", tempFeeSoSubProd.getIsSelf());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoSubProd.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getManSiId())) {      sql.setNullLong("manSiId");     } else {    sql.setLong("manSiId", tempFeeSoSubProd.getManSiId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getNetQuitityId())) {      sql.setNullLong("netQuitityId");     } else {    sql.setLong("netQuitityId", tempFeeSoSubProd.getNetQuitityId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoSubProd.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getPrePay())) {      sql.setNullLong("prePay");     } else {    sql.setLong("prePay", tempFeeSoSubProd.getPrePay());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", tempFeeSoSubProd.getProdId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tempFeeSoSubProd.getRemarks());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", tempFeeSoSubProd.getServInstId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoSubProd.getSoNbr());    }    if (tempFeeSoSubProd.getStartDate() == null) {      sql.setNullDate("startDate");     } else {    sql.setTimestamp("startDate", tempFeeSoSubProd.getStartDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoSubProd.getSts());    }    if (tempFeeSoSubProd.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoSubProd.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {      sql.setNullLong("tempFeeSoSubProdId");     } else {    sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());    }       if (StringUtil.isBlank(tempFeeSoSubProd.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoSubProd.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;    if (StringUtil.isBlank(tempFeeSoSubProd.getTempFeeSoSubProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TEMP_FEE_SO_SUB_PROD WHERE 1=1  ");sql.append(" and TEMP_FEE_SO_SUB_PROD_ID=:tempFeeSoSubProdId");sql.setLong("tempFeeSoSubProdId", tempFeeSoSubProd.getTempFeeSoSubProdId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TempFeeSoSubProdSVO tempFeeSoSubProd=(TempFeeSoSubProdSVO) vo;       }}
