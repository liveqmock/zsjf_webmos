package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ITempFeeSoAccNbrSDAO;import com.cattsoft.sp.vo.TempFeeSoAccNbrSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TempFeeSoAccNbrSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TempFeeSoAccNbrSDAOImpl implements ITempFeeSoAccNbrSDAO{    private static Logger log = Logger.getLogger(TempFeeSoAccNbrSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_ACC_NBR(ACC_NBR,ACT_TYPE,ASSIGN_NBR_TYPE,DIST_NBR,LINE_NBR,LOCAL_NET_ID,NBR_CLASS,NO_FLAG,NXX_NBR,PHY_ACC_NBR,PHY_DIST_NBR,PHY_LINE_NBR,PHY_NXX_NBR,SECOND_NBR,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_ACC_NBR_ID,VN_ID,VN_NAME,WO_ACTION)");sql.append(" VALUES (:accNbr,:actType,:assignNbrType,:distNbr,:lineNbr,:localNetId,:nbrClass,:noFlag,:nxxNbr,:phyAccNbr,:phyDistNbr,:phyLineNbr,:phyNxxNbr,:secondNbr,:soNbr,:sts,:stsDate,:tempFeeSoAccNbrId,:vnId,:vnName,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tempFeeSoAccNbr.getAccNbr())) {      sql.setNullString("accNbr");     } else {    sql.setString("accNbr", tempFeeSoAccNbr.getAccNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoAccNbr.getActType());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getAssignNbrType())) {      sql.setNullLong("assignNbrType");     } else {    sql.setLong("assignNbrType", tempFeeSoAccNbr.getAssignNbrType());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getDistNbr())) {      sql.setNullString("distNbr");     } else {    sql.setString("distNbr", tempFeeSoAccNbr.getDistNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getLineNbr())) {      sql.setNullString("lineNbr");     } else {    sql.setString("lineNbr", tempFeeSoAccNbr.getLineNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoAccNbr.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNbrClass())) {      sql.setNullString("nbrClass");     } else {    sql.setString("nbrClass", tempFeeSoAccNbr.getNbrClass());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoAccNbr.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNxxNbr())) {      sql.setNullString("nxxNbr");     } else {    sql.setString("nxxNbr", tempFeeSoAccNbr.getNxxNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyAccNbr())) {      sql.setNullString("phyAccNbr");     } else {    sql.setString("phyAccNbr", tempFeeSoAccNbr.getPhyAccNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyDistNbr())) {      sql.setNullString("phyDistNbr");     } else {    sql.setString("phyDistNbr", tempFeeSoAccNbr.getPhyDistNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyLineNbr())) {      sql.setNullString("phyLineNbr");     } else {    sql.setString("phyLineNbr", tempFeeSoAccNbr.getPhyLineNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyNxxNbr())) {      sql.setNullString("phyNxxNbr");     } else {    sql.setString("phyNxxNbr", tempFeeSoAccNbr.getPhyNxxNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSecondNbr())) {      sql.setNullString("secondNbr");     } else {    sql.setString("secondNbr", tempFeeSoAccNbr.getSecondNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoAccNbr.getSoNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoAccNbr.getSts());    }    if (tempFeeSoAccNbr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoAccNbr.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getTempFeeSoAccNbrId())) {      sql.setNullLong("tempFeeSoAccNbrId");     } else {    sql.setLong("tempFeeSoAccNbrId", tempFeeSoAccNbr.getTempFeeSoAccNbrId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getVnId())) {      sql.setNullLong("vnId");     } else {    sql.setLong("vnId", tempFeeSoAccNbr.getVnId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getVnName())) {      sql.setNullString("vnName");     } else {    sql.setString("vnName", tempFeeSoAccNbr.getVnName());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoAccNbr.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;       Sql sql = new Sql("SELECT ACC_NBR,ACT_TYPE,ASSIGN_NBR_TYPE,DIST_NBR,LINE_NBR,LOCAL_NET_ID,NBR_CLASS,NO_FLAG,NXX_NBR,PHY_ACC_NBR,PHY_DIST_NBR,PHY_LINE_NBR,PHY_NXX_NBR,SECOND_NBR,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_ACC_NBR_ID,VN_ID,VN_NAME,WO_ACTION FROM TEMP_FEE_SO_ACC_NBR WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tempFeeSoAccNbr =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tempFeeSoAccNbr = new TempFeeSoAccNbrSVO();           tempFeeSoAccNbr.setAccNbr(rs.getString("ACC_NBR"));           tempFeeSoAccNbr.setActType(rs.getString("ACT_TYPE"));           tempFeeSoAccNbr.setAssignNbrType(rs.getString("ASSIGN_NBR_TYPE"));           tempFeeSoAccNbr.setDistNbr(rs.getString("DIST_NBR"));           tempFeeSoAccNbr.setLineNbr(rs.getString("LINE_NBR"));           tempFeeSoAccNbr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoAccNbr.setNbrClass(rs.getString("NBR_CLASS"));           tempFeeSoAccNbr.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoAccNbr.setNxxNbr(rs.getString("NXX_NBR"));           tempFeeSoAccNbr.setPhyAccNbr(rs.getString("PHY_ACC_NBR"));           tempFeeSoAccNbr.setPhyDistNbr(rs.getString("PHY_DIST_NBR"));           tempFeeSoAccNbr.setPhyLineNbr(rs.getString("PHY_LINE_NBR"));           tempFeeSoAccNbr.setPhyNxxNbr(rs.getString("PHY_NXX_NBR"));           tempFeeSoAccNbr.setSecondNbr(rs.getString("SECOND_NBR"));           tempFeeSoAccNbr.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoAccNbr.setSts(rs.getString("STS"));           tempFeeSoAccNbr.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoAccNbr.setTempFeeSoAccNbrId(rs.getString("TEMP_FEE_SO_ACC_NBR_ID"));           tempFeeSoAccNbr.setVnId(rs.getString("VN_ID"));           tempFeeSoAccNbr.setVnName(rs.getString("VN_NAME"));           tempFeeSoAccNbr.setWoAction(rs.getString("WO_ACTION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tempFeeSoAccNbr;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACC_NBR,ACT_TYPE,ASSIGN_NBR_TYPE,DIST_NBR,LINE_NBR,LOCAL_NET_ID,NBR_CLASS,NO_FLAG,NXX_NBR,PHY_ACC_NBR,PHY_DIST_NBR,PHY_LINE_NBR,PHY_NXX_NBR,SECOND_NBR,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_ACC_NBR_ID,VN_ID,VN_NAME,WO_ACTION FROM TEMP_FEE_SO_ACC_NBR WHERE 1=1 ");     try {if (tempFeeSoAccNbr.getFlagAccNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getAccNbr())) {             sql.append(" and ACC_NBR is null ");          }      else{             sql.append(" and ACC_NBR=:accNbr");             sql.setString("accNbr", tempFeeSoAccNbr.getAccNbr());          }   } if (tempFeeSoAccNbr.getFlagActType() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", tempFeeSoAccNbr.getActType());          }   } if (tempFeeSoAccNbr.getFlagAssignNbrType() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getAssignNbrType())) {             sql.append(" and ASSIGN_NBR_TYPE is null ");          }      else{             sql.append(" and ASSIGN_NBR_TYPE=:assignNbrType");             sql.setLong("assignNbrType", tempFeeSoAccNbr.getAssignNbrType());          }   } if (tempFeeSoAccNbr.getFlagDistNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getDistNbr())) {             sql.append(" and DIST_NBR is null ");          }      else{             sql.append(" and DIST_NBR=:distNbr");             sql.setString("distNbr", tempFeeSoAccNbr.getDistNbr());          }   } if (tempFeeSoAccNbr.getFlagLineNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getLineNbr())) {             sql.append(" and LINE_NBR is null ");          }      else{             sql.append(" and LINE_NBR=:lineNbr");             sql.setString("lineNbr", tempFeeSoAccNbr.getLineNbr());          }   } if (tempFeeSoAccNbr.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", tempFeeSoAccNbr.getLocalNetId());          }   } if (tempFeeSoAccNbr.getFlagNbrClass() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getNbrClass())) {             sql.append(" and NBR_CLASS is null ");          }      else{             sql.append(" and NBR_CLASS=:nbrClass");             sql.setString("nbrClass", tempFeeSoAccNbr.getNbrClass());          }   } if (tempFeeSoAccNbr.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", tempFeeSoAccNbr.getNoFlag());          }   } if (tempFeeSoAccNbr.getFlagNxxNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getNxxNbr())) {             sql.append(" and NXX_NBR is null ");          }      else{             sql.append(" and NXX_NBR=:nxxNbr");             sql.setString("nxxNbr", tempFeeSoAccNbr.getNxxNbr());          }   } if (tempFeeSoAccNbr.getFlagPhyAccNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyAccNbr())) {             sql.append(" and PHY_ACC_NBR is null ");          }      else{             sql.append(" and PHY_ACC_NBR=:phyAccNbr");             sql.setString("phyAccNbr", tempFeeSoAccNbr.getPhyAccNbr());          }   } if (tempFeeSoAccNbr.getFlagPhyDistNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyDistNbr())) {             sql.append(" and PHY_DIST_NBR is null ");          }      else{             sql.append(" and PHY_DIST_NBR=:phyDistNbr");             sql.setString("phyDistNbr", tempFeeSoAccNbr.getPhyDistNbr());          }   } if (tempFeeSoAccNbr.getFlagPhyLineNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyLineNbr())) {             sql.append(" and PHY_LINE_NBR is null ");          }      else{             sql.append(" and PHY_LINE_NBR=:phyLineNbr");             sql.setString("phyLineNbr", tempFeeSoAccNbr.getPhyLineNbr());          }   } if (tempFeeSoAccNbr.getFlagPhyNxxNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyNxxNbr())) {             sql.append(" and PHY_NXX_NBR is null ");          }      else{             sql.append(" and PHY_NXX_NBR=:phyNxxNbr");             sql.setString("phyNxxNbr", tempFeeSoAccNbr.getPhyNxxNbr());          }   } if (tempFeeSoAccNbr.getFlagSecondNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getSecondNbr())) {             sql.append(" and SECOND_NBR is null ");          }      else{             sql.append(" and SECOND_NBR=:secondNbr");             sql.setString("secondNbr", tempFeeSoAccNbr.getSecondNbr());          }   } if (tempFeeSoAccNbr.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", tempFeeSoAccNbr.getSoNbr());          }   } if (tempFeeSoAccNbr.getFlagSts() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tempFeeSoAccNbr.getSts());          }   } if (tempFeeSoAccNbr.getFlagStsDate() == 1) {      if (tempFeeSoAccNbr.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", tempFeeSoAccNbr.getStsDate());          }   } if (tempFeeSoAccNbr.getFlagTempFeeSoAccNbrId() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getTempFeeSoAccNbrId())) {             sql.append(" and TEMP_FEE_SO_ACC_NBR_ID is null ");          }      else{             sql.append(" and TEMP_FEE_SO_ACC_NBR_ID=:tempFeeSoAccNbrId");             sql.setLong("tempFeeSoAccNbrId", tempFeeSoAccNbr.getTempFeeSoAccNbrId());          }   } if (tempFeeSoAccNbr.getFlagVnId() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getVnId())) {             sql.append(" and VN_ID is null ");          }      else{             sql.append(" and VN_ID=:vnId");             sql.setLong("vnId", tempFeeSoAccNbr.getVnId());          }   } if (tempFeeSoAccNbr.getFlagVnName() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getVnName())) {             sql.append(" and VN_NAME is null ");          }      else{             sql.append(" and VN_NAME=:vnName");             sql.setString("vnName", tempFeeSoAccNbr.getVnName());          }   } if (tempFeeSoAccNbr.getFlagWoAction() == 1) {      if (StringUtil.isBlank(tempFeeSoAccNbr.getWoAction())) {             sql.append(" and WO_ACTION is null ");          }      else{             sql.append(" and WO_ACTION=:woAction");             sql.setString("woAction", tempFeeSoAccNbr.getWoAction());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tempFeeSoAccNbr = new TempFeeSoAccNbrSVO();           tempFeeSoAccNbr.setAccNbr(rs.getString("ACC_NBR"));           tempFeeSoAccNbr.setActType(rs.getString("ACT_TYPE"));           tempFeeSoAccNbr.setAssignNbrType(rs.getString("ASSIGN_NBR_TYPE"));           tempFeeSoAccNbr.setDistNbr(rs.getString("DIST_NBR"));           tempFeeSoAccNbr.setLineNbr(rs.getString("LINE_NBR"));           tempFeeSoAccNbr.setLocalNetId(rs.getString("LOCAL_NET_ID"));           tempFeeSoAccNbr.setNbrClass(rs.getString("NBR_CLASS"));           tempFeeSoAccNbr.setNoFlag(rs.getString("NO_FLAG"));           tempFeeSoAccNbr.setNxxNbr(rs.getString("NXX_NBR"));           tempFeeSoAccNbr.setPhyAccNbr(rs.getString("PHY_ACC_NBR"));           tempFeeSoAccNbr.setPhyDistNbr(rs.getString("PHY_DIST_NBR"));           tempFeeSoAccNbr.setPhyLineNbr(rs.getString("PHY_LINE_NBR"));           tempFeeSoAccNbr.setPhyNxxNbr(rs.getString("PHY_NXX_NBR"));           tempFeeSoAccNbr.setSecondNbr(rs.getString("SECOND_NBR"));           tempFeeSoAccNbr.setSoNbr(rs.getString("SO_NBR"));           tempFeeSoAccNbr.setSts(rs.getString("STS"));           tempFeeSoAccNbr.setStsDate(rs.getTimestamp("STS_DATE"));           tempFeeSoAccNbr.setTempFeeSoAccNbrId(rs.getString("TEMP_FEE_SO_ACC_NBR_ID"));           tempFeeSoAccNbr.setVnId(rs.getString("VN_ID"));           tempFeeSoAccNbr.setVnName(rs.getString("VN_NAME"));           tempFeeSoAccNbr.setWoAction(rs.getString("WO_ACTION"));               res.add(tempFeeSoAccNbr);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TEMP_FEE_SO_ACC_NBR SET ");     try {if (tempFeeSoAccNbr.getFlagAccNbr() == 1) {sql.append("ACC_NBR=:accNbr,"); sql.setString("accNbr", tempFeeSoAccNbr.getAccNbr()); } if (tempFeeSoAccNbr.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", tempFeeSoAccNbr.getActType()); } if (tempFeeSoAccNbr.getFlagAssignNbrType() == 1) {sql.append("ASSIGN_NBR_TYPE=:assignNbrType,");sql.setLong("assignNbrType", tempFeeSoAccNbr.getAssignNbrType()); } if (tempFeeSoAccNbr.getFlagDistNbr() == 1) {sql.append("DIST_NBR=:distNbr,"); sql.setString("distNbr", tempFeeSoAccNbr.getDistNbr()); } if (tempFeeSoAccNbr.getFlagLineNbr() == 1) {sql.append("LINE_NBR=:lineNbr,"); sql.setString("lineNbr", tempFeeSoAccNbr.getLineNbr()); } if (tempFeeSoAccNbr.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", tempFeeSoAccNbr.getLocalNetId()); } if (tempFeeSoAccNbr.getFlagNbrClass() == 1) {sql.append("NBR_CLASS=:nbrClass,"); sql.setString("nbrClass", tempFeeSoAccNbr.getNbrClass()); } if (tempFeeSoAccNbr.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", tempFeeSoAccNbr.getNoFlag()); } if (tempFeeSoAccNbr.getFlagNxxNbr() == 1) {sql.append("NXX_NBR=:nxxNbr,"); sql.setString("nxxNbr", tempFeeSoAccNbr.getNxxNbr()); } if (tempFeeSoAccNbr.getFlagPhyAccNbr() == 1) {sql.append("PHY_ACC_NBR=:phyAccNbr,"); sql.setString("phyAccNbr", tempFeeSoAccNbr.getPhyAccNbr()); } if (tempFeeSoAccNbr.getFlagPhyDistNbr() == 1) {sql.append("PHY_DIST_NBR=:phyDistNbr,"); sql.setString("phyDistNbr", tempFeeSoAccNbr.getPhyDistNbr()); } if (tempFeeSoAccNbr.getFlagPhyLineNbr() == 1) {sql.append("PHY_LINE_NBR=:phyLineNbr,"); sql.setString("phyLineNbr", tempFeeSoAccNbr.getPhyLineNbr()); } if (tempFeeSoAccNbr.getFlagPhyNxxNbr() == 1) {sql.append("PHY_NXX_NBR=:phyNxxNbr,"); sql.setString("phyNxxNbr", tempFeeSoAccNbr.getPhyNxxNbr()); } if (tempFeeSoAccNbr.getFlagSecondNbr() == 1) {sql.append("SECOND_NBR=:secondNbr,"); sql.setString("secondNbr", tempFeeSoAccNbr.getSecondNbr()); } if (tempFeeSoAccNbr.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", tempFeeSoAccNbr.getSoNbr()); } if (tempFeeSoAccNbr.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tempFeeSoAccNbr.getSts()); } if (tempFeeSoAccNbr.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", tempFeeSoAccNbr.getStsDate()); } if (tempFeeSoAccNbr.getFlagTempFeeSoAccNbrId() == 1) {sql.append("TEMP_FEE_SO_ACC_NBR_ID=:tempFeeSoAccNbrId,");sql.setLong("tempFeeSoAccNbrId", tempFeeSoAccNbr.getTempFeeSoAccNbrId()); } if (tempFeeSoAccNbr.getFlagVnId() == 1) {sql.append("VN_ID=:vnId,");sql.setLong("vnId", tempFeeSoAccNbr.getVnId()); } if (tempFeeSoAccNbr.getFlagVnName() == 1) {sql.append("VN_NAME=:vnName,"); sql.setString("vnName", tempFeeSoAccNbr.getVnName()); } if (tempFeeSoAccNbr.getFlagWoAction() == 1) {sql.append("WO_ACTION=:woAction,"); sql.setString("woAction", tempFeeSoAccNbr.getWoAction()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TEMP_FEE_SO_ACC_NBR(ACC_NBR,ACT_TYPE,ASSIGN_NBR_TYPE,DIST_NBR,LINE_NBR,LOCAL_NET_ID,NBR_CLASS,NO_FLAG,NXX_NBR,PHY_ACC_NBR,PHY_DIST_NBR,PHY_LINE_NBR,PHY_NXX_NBR,SECOND_NBR,SO_NBR,STS,STS_DATE,TEMP_FEE_SO_ACC_NBR_ID,VN_ID,VN_NAME,WO_ACTION)");sql.append(" VALUES (:accNbr,:actType,:assignNbrType,:distNbr,:lineNbr,:localNetId,:nbrClass,:noFlag,:nxxNbr,:phyAccNbr,:phyDistNbr,:phyLineNbr,:phyNxxNbr,:secondNbr,:soNbr,:sts,:stsDate,:tempFeeSoAccNbrId,:vnId,:vnName,:woAction)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) list.get(i);         if (tempFeeSoAccNbr== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tempFeeSoAccNbr.getAccNbr())) {      sql.setNullString("accNbr");     } else {    sql.setString("accNbr", tempFeeSoAccNbr.getAccNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", tempFeeSoAccNbr.getActType());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getAssignNbrType())) {      sql.setNullLong("assignNbrType");     } else {    sql.setLong("assignNbrType", tempFeeSoAccNbr.getAssignNbrType());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getDistNbr())) {      sql.setNullString("distNbr");     } else {    sql.setString("distNbr", tempFeeSoAccNbr.getDistNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getLineNbr())) {      sql.setNullString("lineNbr");     } else {    sql.setString("lineNbr", tempFeeSoAccNbr.getLineNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", tempFeeSoAccNbr.getLocalNetId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNbrClass())) {      sql.setNullString("nbrClass");     } else {    sql.setString("nbrClass", tempFeeSoAccNbr.getNbrClass());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", tempFeeSoAccNbr.getNoFlag());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getNxxNbr())) {      sql.setNullString("nxxNbr");     } else {    sql.setString("nxxNbr", tempFeeSoAccNbr.getNxxNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyAccNbr())) {      sql.setNullString("phyAccNbr");     } else {    sql.setString("phyAccNbr", tempFeeSoAccNbr.getPhyAccNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyDistNbr())) {      sql.setNullString("phyDistNbr");     } else {    sql.setString("phyDistNbr", tempFeeSoAccNbr.getPhyDistNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyLineNbr())) {      sql.setNullString("phyLineNbr");     } else {    sql.setString("phyLineNbr", tempFeeSoAccNbr.getPhyLineNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getPhyNxxNbr())) {      sql.setNullString("phyNxxNbr");     } else {    sql.setString("phyNxxNbr", tempFeeSoAccNbr.getPhyNxxNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSecondNbr())) {      sql.setNullString("secondNbr");     } else {    sql.setString("secondNbr", tempFeeSoAccNbr.getSecondNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", tempFeeSoAccNbr.getSoNbr());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tempFeeSoAccNbr.getSts());    }    if (tempFeeSoAccNbr.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tempFeeSoAccNbr.getStsDate());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getTempFeeSoAccNbrId())) {      sql.setNullLong("tempFeeSoAccNbrId");     } else {    sql.setLong("tempFeeSoAccNbrId", tempFeeSoAccNbr.getTempFeeSoAccNbrId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getVnId())) {      sql.setNullLong("vnId");     } else {    sql.setLong("vnId", tempFeeSoAccNbr.getVnId());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getVnName())) {      sql.setNullString("vnName");     } else {    sql.setString("vnName", tempFeeSoAccNbr.getVnName());    }       if (StringUtil.isBlank(tempFeeSoAccNbr.getWoAction())) {      sql.setNullString("woAction");     } else {    sql.setString("woAction", tempFeeSoAccNbr.getWoAction());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TEMP_FEE_SO_ACC_NBR WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TempFeeSoAccNbrSVO tempFeeSoAccNbr=(TempFeeSoAccNbrSVO) vo;       }}
