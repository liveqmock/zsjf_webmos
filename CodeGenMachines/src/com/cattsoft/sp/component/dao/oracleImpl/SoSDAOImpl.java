package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoSDAO;import com.cattsoft.sp.vo.SoSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoSDAOImpl implements ISoSDAO{    private static Logger log = Logger.getLogger(SoSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSVO so=(SoSVO) vo;    if (StringUtil.isBlank(so.getSoNbr())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(so.getSoSeq())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO(ACCT_NBR,ALARM_DATE,APPL_DATE,ARC_DEAL_COUNT,ARC_MSG,AREA_ID,BILL_TYPE,BOOK_FLAG,BUSINESS_ID,CHG_SERV_SPEC_ID,COLLAB_STS,COMPL_DATE,CONTACT_INFO,CONTACT_NAME,CONTACT_RESULT,CO_NBR,CREATE_DATE,CSO_NBR,CUTOVER_ID,DEAL_FLAG,DEV_CONTACT_INFO,DEV_DEPT_ID,DEV_PARTY_NAME,DEV_PARTY_ROLE_ID,DEV_PARTY_ROLE_TYPE_ID,EXT_SO_NBR,EXT_WO_NBR,FAIL_REASON_ID,FROM_PROD_ID,FROM_SERV_INST_ID,GROUP_FLAG,HASTEN_FLAG,LOCAL_NET_ID,MS_PLAN_NAME,MS_PLAN_TARGET_ID,MS_TASK_ID,MS_TASK_NAME,MS_TASK_PRJ_ID,MS_TASK_PRJ_NAME,NO_FLAG,N_SO_NBR,OLD_SO_NBR,ORI_SO_NBR,OVERTIME_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PAY_MAN_NAME,PAY_MAN_TELE_NBR,PAY_STS,PRESENT_FLAG,PRE_ALARM_DATE,PRIORITY,PROCESS_ID,PROC_INST_ID,PROD_ID,REAL_TIME_FLAG,REASON_ID,REASON_INFO,RELA_EXT_WO_NBR,RELA_SO_NBR,REMARKS,REQ_COMP_DATE,RES_SYSTEM,SERV_DEPT_ID,SERV_INST_ID,SO_BATCH_ID,SO_CAT,SO_LOCK_DATE,SO_LOCK_STS,SO_METH,SO_NBR,SO_SEQ,SO_STAFF_ID,SO_STAFF_NAME,SO_STS,SO_STS_DATE,SO_TEMPLATE_ID,SO_TYPE,SO_WORK_AREA_ID,SO_WORK_AREA_NAME,SPECIAL_FLAG,STS,STS_DATE,TEMP_FLAG,TRADE_ID,TRADE_NAME)");sql.append(" VALUES (:acctNbr,:alarmDate,:applDate,:arcDealCount,:arcMsg,:areaId,:billType,:bookFlag,:businessId,:chgServSpecId,:collabSts,:complDate,:contactInfo,:contactName,:contactResult,:coNbr,:createDate,:csoNbr,:cutoverId,:dealFlag,:devContactInfo,:devDeptId,:devPartyName,:devPartyRoleId,:devPartyRoleTypeId,:extSoNbr,:extWoNbr,:failReasonId,:fromProdId,:fromServInstId,:groupFlag,:hastenFlag,:localNetId,:msPlanName,:msPlanTargetId,:msTaskId,:msTaskName,:msTaskPrjId,:msTaskPrjName,:noFlag,:nSoNbr,:oldSoNbr,:oriSoNbr,:overtimeId,:partyRoleId,:partyRoleTypeId,:payManName,:payManTeleNbr,:paySts,:presentFlag,:preAlarmDate,:priority,:processId,:procInstId,:prodId,:realTimeFlag,:reasonId,:reasonInfo,:relaExtWoNbr,:relaSoNbr,:remarks,:reqCompDate,:resSystem,:servDeptId,:servInstId,:soBatchId,:soCat,:soLockDate,:soLockSts,:soMeth,:soNbr,:soSeq,:soStaffId,:soStaffName,:soSts,:soStsDate,:soTemplateId,:soType,:soWorkAreaId,:soWorkAreaName,:specialFlag,:sts,:stsDate,:tempFlag,:tradeId,:tradeName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(so.getAcctNbr())) {      sql.setNullLong("acctNbr");     } else {    sql.setLong("acctNbr", so.getAcctNbr());    }    if (so.getAlarmDate() == null) {      sql.setNullDate("alarmDate");     } else {    sql.setTimestamp("alarmDate", so.getAlarmDate());    }    if (so.getApplDate() == null) {      sql.setNullDate("applDate");     } else {    sql.setTimestamp("applDate", so.getApplDate());    }       if (StringUtil.isBlank(so.getArcDealCount())) {      sql.setNullLong("arcDealCount");     } else {    sql.setLong("arcDealCount", so.getArcDealCount());    }       if (StringUtil.isBlank(so.getArcMsg())) {      sql.setNullString("arcMsg");     } else {    sql.setString("arcMsg", so.getArcMsg());    }       if (StringUtil.isBlank(so.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", so.getAreaId());    }       if (StringUtil.isBlank(so.getBillType())) {      sql.setNullString("billType");     } else {    sql.setString("billType", so.getBillType());    }       if (StringUtil.isBlank(so.getBookFlag())) {      sql.setNullString("bookFlag");     } else {    sql.setString("bookFlag", so.getBookFlag());    }       if (StringUtil.isBlank(so.getBusinessId())) {      sql.setNullLong("businessId");     } else {    sql.setLong("businessId", so.getBusinessId());    }       if (StringUtil.isBlank(so.getChgServSpecId())) {      sql.setNullString("chgServSpecId");     } else {    sql.setString("chgServSpecId", so.getChgServSpecId());    }       if (StringUtil.isBlank(so.getCollabSts())) {      sql.setNullString("collabSts");     } else {    sql.setString("collabSts", so.getCollabSts());    }    if (so.getComplDate() == null) {      sql.setNullDate("complDate");     } else {    sql.setTimestamp("complDate", so.getComplDate());    }       if (StringUtil.isBlank(so.getContactInfo())) {      sql.setNullString("contactInfo");     } else {    sql.setString("contactInfo", so.getContactInfo());    }       if (StringUtil.isBlank(so.getContactName())) {      sql.setNullString("contactName");     } else {    sql.setString("contactName", so.getContactName());    }       if (StringUtil.isBlank(so.getContactResult())) {      sql.setNullString("contactResult");     } else {    sql.setString("contactResult", so.getContactResult());    }       if (StringUtil.isBlank(so.getCoNbr())) {      sql.setNullString("coNbr");     } else {    sql.setString("coNbr", so.getCoNbr());    }    if (so.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", so.getCreateDate());    }       if (StringUtil.isBlank(so.getCsoNbr())) {      sql.setNullString("csoNbr");     } else {    sql.setString("csoNbr", so.getCsoNbr());    }       if (StringUtil.isBlank(so.getCutoverId())) {      sql.setNullLong("cutoverId");     } else {    sql.setLong("cutoverId", so.getCutoverId());    }       if (StringUtil.isBlank(so.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", so.getDealFlag());    }       if (StringUtil.isBlank(so.getDevContactInfo())) {      sql.setNullString("devContactInfo");     } else {    sql.setString("devContactInfo", so.getDevContactInfo());    }       if (StringUtil.isBlank(so.getDevDeptId())) {      sql.setNullString("devDeptId");     } else {    sql.setString("devDeptId", so.getDevDeptId());    }       if (StringUtil.isBlank(so.getDevPartyName())) {      sql.setNullString("devPartyName");     } else {    sql.setString("devPartyName", so.getDevPartyName());    }       if (StringUtil.isBlank(so.getDevPartyRoleId())) {      sql.setNullString("devPartyRoleId");     } else {    sql.setString("devPartyRoleId", so.getDevPartyRoleId());    }       if (StringUtil.isBlank(so.getDevPartyRoleTypeId())) {      sql.setNullLong("devPartyRoleTypeId");     } else {    sql.setLong("devPartyRoleTypeId", so.getDevPartyRoleTypeId());    }       if (StringUtil.isBlank(so.getExtSoNbr())) {      sql.setNullString("extSoNbr");     } else {    sql.setString("extSoNbr", so.getExtSoNbr());    }       if (StringUtil.isBlank(so.getExtWoNbr())) {      sql.setNullLong("extWoNbr");     } else {    sql.setLong("extWoNbr", so.getExtWoNbr());    }       if (StringUtil.isBlank(so.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", so.getFailReasonId());    }       if (StringUtil.isBlank(so.getFromProdId())) {      sql.setNullString("fromProdId");     } else {    sql.setString("fromProdId", so.getFromProdId());    }       if (StringUtil.isBlank(so.getFromServInstId())) {      sql.setNullLong("fromServInstId");     } else {    sql.setLong("fromServInstId", so.getFromServInstId());    }       if (StringUtil.isBlank(so.getGroupFlag())) {      sql.setNullString("groupFlag");     } else {    sql.setString("groupFlag", so.getGroupFlag());    }       if (StringUtil.isBlank(so.getHastenFlag())) {      sql.setNullString("hastenFlag");     } else {    sql.setString("hastenFlag", so.getHastenFlag());    }       if (StringUtil.isBlank(so.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", so.getLocalNetId());    }       if (StringUtil.isBlank(so.getMsPlanName())) {      sql.setNullString("msPlanName");     } else {    sql.setString("msPlanName", so.getMsPlanName());    }       if (StringUtil.isBlank(so.getMsPlanTargetId())) {      sql.setNullLong("msPlanTargetId");     } else {    sql.setLong("msPlanTargetId", so.getMsPlanTargetId());    }       if (StringUtil.isBlank(so.getMsTaskId())) {      sql.setNullLong("msTaskId");     } else {    sql.setLong("msTaskId", so.getMsTaskId());    }       if (StringUtil.isBlank(so.getMsTaskName())) {      sql.setNullString("msTaskName");     } else {    sql.setString("msTaskName", so.getMsTaskName());    }       if (StringUtil.isBlank(so.getMsTaskPrjId())) {      sql.setNullLong("msTaskPrjId");     } else {    sql.setLong("msTaskPrjId", so.getMsTaskPrjId());    }       if (StringUtil.isBlank(so.getMsTaskPrjName())) {      sql.setNullString("msTaskPrjName");     } else {    sql.setString("msTaskPrjName", so.getMsTaskPrjName());    }       if (StringUtil.isBlank(so.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", so.getNoFlag());    }       if (StringUtil.isBlank(so.getNSoNbr())) {      sql.setNullString("nSoNbr");     } else {    sql.setString("nSoNbr", so.getNSoNbr());    }       if (StringUtil.isBlank(so.getOldSoNbr())) {      sql.setNullString("oldSoNbr");     } else {    sql.setString("oldSoNbr", so.getOldSoNbr());    }       if (StringUtil.isBlank(so.getOriSoNbr())) {      sql.setNullString("oriSoNbr");     } else {    sql.setString("oriSoNbr", so.getOriSoNbr());    }       if (StringUtil.isBlank(so.getOvertimeId())) {      sql.setNullString("overtimeId");     } else {    sql.setString("overtimeId", so.getOvertimeId());    }       if (StringUtil.isBlank(so.getPartyRoleId())) {      sql.setNullString("partyRoleId");     } else {    sql.setString("partyRoleId", so.getPartyRoleId());    }       if (StringUtil.isBlank(so.getPartyRoleTypeId())) {      sql.setNullLong("partyRoleTypeId");     } else {    sql.setLong("partyRoleTypeId", so.getPartyRoleTypeId());    }       if (StringUtil.isBlank(so.getPayManName())) {      sql.setNullString("payManName");     } else {    sql.setString("payManName", so.getPayManName());    }       if (StringUtil.isBlank(so.getPayManTeleNbr())) {      sql.setNullString("payManTeleNbr");     } else {    sql.setString("payManTeleNbr", so.getPayManTeleNbr());    }       if (StringUtil.isBlank(so.getPaySts())) {      sql.setNullString("paySts");     } else {    sql.setString("paySts", so.getPaySts());    }       if (StringUtil.isBlank(so.getPresentFlag())) {      sql.setNullString("presentFlag");     } else {    sql.setString("presentFlag", so.getPresentFlag());    }    if (so.getPreAlarmDate() == null) {      sql.setNullDate("preAlarmDate");     } else {    sql.setTimestamp("preAlarmDate", so.getPreAlarmDate());    }       if (StringUtil.isBlank(so.getPriority())) {      sql.setNullString("priority");     } else {    sql.setString("priority", so.getPriority());    }       if (StringUtil.isBlank(so.getProcessId())) {      sql.setNullLong("processId");     } else {    sql.setLong("processId", so.getProcessId());    }       if (StringUtil.isBlank(so.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", so.getProcInstId());    }       if (StringUtil.isBlank(so.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", so.getProdId());    }       if (StringUtil.isBlank(so.getRealTimeFlag())) {      sql.setNullString("realTimeFlag");     } else {    sql.setString("realTimeFlag", so.getRealTimeFlag());    }       if (StringUtil.isBlank(so.getReasonId())) {      sql.setNullLong("reasonId");     } else {    sql.setLong("reasonId", so.getReasonId());    }       if (StringUtil.isBlank(so.getReasonInfo())) {      sql.setNullString("reasonInfo");     } else {    sql.setString("reasonInfo", so.getReasonInfo());    }       if (StringUtil.isBlank(so.getRelaExtWoNbr())) {      sql.setNullLong("relaExtWoNbr");     } else {    sql.setLong("relaExtWoNbr", so.getRelaExtWoNbr());    }       if (StringUtil.isBlank(so.getRelaSoNbr())) {      sql.setNullString("relaSoNbr");     } else {    sql.setString("relaSoNbr", so.getRelaSoNbr());    }       if (StringUtil.isBlank(so.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", so.getRemarks());    }    if (so.getReqCompDate() == null) {      sql.setNullDate("reqCompDate");     } else {    sql.setTimestamp("reqCompDate", so.getReqCompDate());    }       if (StringUtil.isBlank(so.getResSystem())) {      sql.setNullString("resSystem");     } else {    sql.setString("resSystem", so.getResSystem());    }       if (StringUtil.isBlank(so.getServDeptId())) {      sql.setNullLong("servDeptId");     } else {    sql.setLong("servDeptId", so.getServDeptId());    }       if (StringUtil.isBlank(so.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", so.getServInstId());    }       if (StringUtil.isBlank(so.getSoBatchId())) {      sql.setNullLong("soBatchId");     } else {    sql.setLong("soBatchId", so.getSoBatchId());    }       if (StringUtil.isBlank(so.getSoCat())) {      sql.setNullString("soCat");     } else {    sql.setString("soCat", so.getSoCat());    }    if (so.getSoLockDate() == null) {      sql.setNullDate("soLockDate");     } else {    sql.setTimestamp("soLockDate", so.getSoLockDate());    }       if (StringUtil.isBlank(so.getSoLockSts())) {      sql.setNullString("soLockSts");     } else {    sql.setString("soLockSts", so.getSoLockSts());    }       if (StringUtil.isBlank(so.getSoMeth())) {      sql.setNullString("soMeth");     } else {    sql.setString("soMeth", so.getSoMeth());    }       if (StringUtil.isBlank(so.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", so.getSoNbr());    }       if (StringUtil.isBlank(so.getSoSeq())) {      sql.setNullLong("soSeq");     } else {    sql.setLong("soSeq", so.getSoSeq());    }       if (StringUtil.isBlank(so.getSoStaffId())) {      sql.setNullString("soStaffId");     } else {    sql.setString("soStaffId", so.getSoStaffId());    }       if (StringUtil.isBlank(so.getSoStaffName())) {      sql.setNullString("soStaffName");     } else {    sql.setString("soStaffName", so.getSoStaffName());    }       if (StringUtil.isBlank(so.getSoSts())) {      sql.setNullString("soSts");     } else {    sql.setString("soSts", so.getSoSts());    }    if (so.getSoStsDate() == null) {      sql.setNullDate("soStsDate");     } else {    sql.setTimestamp("soStsDate", so.getSoStsDate());    }       if (StringUtil.isBlank(so.getSoTemplateId())) {      sql.setNullString("soTemplateId");     } else {    sql.setString("soTemplateId", so.getSoTemplateId());    }       if (StringUtil.isBlank(so.getSoType())) {      sql.setNullString("soType");     } else {    sql.setString("soType", so.getSoType());    }       if (StringUtil.isBlank(so.getSoWorkAreaId())) {      sql.setNullString("soWorkAreaId");     } else {    sql.setString("soWorkAreaId", so.getSoWorkAreaId());    }       if (StringUtil.isBlank(so.getSoWorkAreaName())) {      sql.setNullString("soWorkAreaName");     } else {    sql.setString("soWorkAreaName", so.getSoWorkAreaName());    }       if (StringUtil.isBlank(so.getSpecialFlag())) {      sql.setNullString("specialFlag");     } else {    sql.setString("specialFlag", so.getSpecialFlag());    }       if (StringUtil.isBlank(so.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", so.getSts());    }    if (so.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", so.getStsDate());    }       if (StringUtil.isBlank(so.getTempFlag())) {      sql.setNullString("tempFlag");     } else {    sql.setString("tempFlag", so.getTempFlag());    }       if (StringUtil.isBlank(so.getTradeId())) {      sql.setNullString("tradeId");     } else {    sql.setString("tradeId", so.getTradeId());    }       if (StringUtil.isBlank(so.getTradeName())) {      sql.setNullString("tradeName");     } else {    sql.setString("tradeName", so.getTradeName());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSVO so=(SoSVO) vo;    if (StringUtil.isBlank(so.getSoNbr())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(so.getSoSeq())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACCT_NBR,ALARM_DATE,APPL_DATE,ARC_DEAL_COUNT,ARC_MSG,AREA_ID,BILL_TYPE,BOOK_FLAG,BUSINESS_ID,CHG_SERV_SPEC_ID,COLLAB_STS,COMPL_DATE,CONTACT_INFO,CONTACT_NAME,CONTACT_RESULT,CO_NBR,CREATE_DATE,CSO_NBR,CUTOVER_ID,DEAL_FLAG,DEV_CONTACT_INFO,DEV_DEPT_ID,DEV_PARTY_NAME,DEV_PARTY_ROLE_ID,DEV_PARTY_ROLE_TYPE_ID,EXT_SO_NBR,EXT_WO_NBR,FAIL_REASON_ID,FROM_PROD_ID,FROM_SERV_INST_ID,GROUP_FLAG,HASTEN_FLAG,LOCAL_NET_ID,MS_PLAN_NAME,MS_PLAN_TARGET_ID,MS_TASK_ID,MS_TASK_NAME,MS_TASK_PRJ_ID,MS_TASK_PRJ_NAME,NO_FLAG,N_SO_NBR,OLD_SO_NBR,ORI_SO_NBR,OVERTIME_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PAY_MAN_NAME,PAY_MAN_TELE_NBR,PAY_STS,PRESENT_FLAG,PRE_ALARM_DATE,PRIORITY,PROCESS_ID,PROC_INST_ID,PROD_ID,REAL_TIME_FLAG,REASON_ID,REASON_INFO,RELA_EXT_WO_NBR,RELA_SO_NBR,REMARKS,REQ_COMP_DATE,RES_SYSTEM,SERV_DEPT_ID,SERV_INST_ID,SO_BATCH_ID,SO_CAT,SO_LOCK_DATE,SO_LOCK_STS,SO_METH,SO_NBR,SO_SEQ,SO_STAFF_ID,SO_STAFF_NAME,SO_STS,SO_STS_DATE,SO_TEMPLATE_ID,SO_TYPE,SO_WORK_AREA_ID,SO_WORK_AREA_NAME,SPECIAL_FLAG,STS,STS_DATE,TEMP_FLAG,TRADE_ID,TRADE_NAME FROM SO WHERE 1=1  ");sql.append(" and SO_NBR=:soNbr");sql.setString("soNbr", so.getSoNbr()); sql.append(" and SO_SEQ=:soSeq");sql.setLong("soSeq", so.getSoSeq());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      so =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           so = new SoSVO();           so.setAcctNbr(rs.getString("ACCT_NBR"));           so.setAlarmDate(rs.getTimestamp("ALARM_DATE"));           so.setApplDate(rs.getTimestamp("APPL_DATE"));           so.setArcDealCount(rs.getString("ARC_DEAL_COUNT"));           so.setArcMsg(rs.getString("ARC_MSG"));           so.setAreaId(rs.getString("AREA_ID"));           so.setBillType(rs.getString("BILL_TYPE"));           so.setBookFlag(rs.getString("BOOK_FLAG"));           so.setBusinessId(rs.getString("BUSINESS_ID"));           so.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           so.setCollabSts(rs.getString("COLLAB_STS"));           so.setComplDate(rs.getTimestamp("COMPL_DATE"));           so.setContactInfo(rs.getString("CONTACT_INFO"));           so.setContactName(rs.getString("CONTACT_NAME"));           so.setContactResult(rs.getString("CONTACT_RESULT"));           so.setCoNbr(rs.getString("CO_NBR"));           so.setCreateDate(rs.getTimestamp("CREATE_DATE"));           so.setCsoNbr(rs.getString("CSO_NBR"));           so.setCutoverId(rs.getString("CUTOVER_ID"));           so.setDealFlag(rs.getString("DEAL_FLAG"));           so.setDevContactInfo(rs.getString("DEV_CONTACT_INFO"));           so.setDevDeptId(rs.getString("DEV_DEPT_ID"));           so.setDevPartyName(rs.getString("DEV_PARTY_NAME"));           so.setDevPartyRoleId(rs.getString("DEV_PARTY_ROLE_ID"));           so.setDevPartyRoleTypeId(rs.getString("DEV_PARTY_ROLE_TYPE_ID"));           so.setExtSoNbr(rs.getString("EXT_SO_NBR"));           so.setExtWoNbr(rs.getString("EXT_WO_NBR"));           so.setFailReasonId(rs.getString("FAIL_REASON_ID"));           so.setFromProdId(rs.getString("FROM_PROD_ID"));           so.setFromServInstId(rs.getString("FROM_SERV_INST_ID"));           so.setGroupFlag(rs.getString("GROUP_FLAG"));           so.setHastenFlag(rs.getString("HASTEN_FLAG"));           so.setLocalNetId(rs.getString("LOCAL_NET_ID"));           so.setMsPlanName(rs.getString("MS_PLAN_NAME"));           so.setMsPlanTargetId(rs.getString("MS_PLAN_TARGET_ID"));           so.setMsTaskId(rs.getString("MS_TASK_ID"));           so.setMsTaskName(rs.getString("MS_TASK_NAME"));           so.setMsTaskPrjId(rs.getString("MS_TASK_PRJ_ID"));           so.setMsTaskPrjName(rs.getString("MS_TASK_PRJ_NAME"));           so.setNoFlag(rs.getString("NO_FLAG"));           so.setNSoNbr(rs.getString("N_SO_NBR"));           so.setOldSoNbr(rs.getString("OLD_SO_NBR"));           so.setOriSoNbr(rs.getString("ORI_SO_NBR"));           so.setOvertimeId(rs.getString("OVERTIME_ID"));           so.setPartyRoleId(rs.getString("PARTY_ROLE_ID"));           so.setPartyRoleTypeId(rs.getString("PARTY_ROLE_TYPE_ID"));           so.setPayManName(rs.getString("PAY_MAN_NAME"));           so.setPayManTeleNbr(rs.getString("PAY_MAN_TELE_NBR"));           so.setPaySts(rs.getString("PAY_STS"));           so.setPresentFlag(rs.getString("PRESENT_FLAG"));           so.setPreAlarmDate(rs.getTimestamp("PRE_ALARM_DATE"));           so.setPriority(rs.getString("PRIORITY"));           so.setProcessId(rs.getString("PROCESS_ID"));           so.setProcInstId(rs.getString("PROC_INST_ID"));           so.setProdId(rs.getString("PROD_ID"));           so.setRealTimeFlag(rs.getString("REAL_TIME_FLAG"));           so.setReasonId(rs.getString("REASON_ID"));           so.setReasonInfo(rs.getString("REASON_INFO"));           so.setRelaExtWoNbr(rs.getString("RELA_EXT_WO_NBR"));           so.setRelaSoNbr(rs.getString("RELA_SO_NBR"));           so.setRemarks(rs.getString("REMARKS"));           so.setReqCompDate(rs.getTimestamp("REQ_COMP_DATE"));           so.setResSystem(rs.getString("RES_SYSTEM"));           so.setServDeptId(rs.getString("SERV_DEPT_ID"));           so.setServInstId(rs.getString("SERV_INST_ID"));           so.setSoBatchId(rs.getString("SO_BATCH_ID"));           so.setSoCat(rs.getString("SO_CAT"));           so.setSoLockDate(rs.getTimestamp("SO_LOCK_DATE"));           so.setSoLockSts(rs.getString("SO_LOCK_STS"));           so.setSoMeth(rs.getString("SO_METH"));           so.setSoNbr(rs.getString("SO_NBR"));           so.setSoSeq(rs.getString("SO_SEQ"));           so.setSoStaffId(rs.getString("SO_STAFF_ID"));           so.setSoStaffName(rs.getString("SO_STAFF_NAME"));           so.setSoSts(rs.getString("SO_STS"));           so.setSoStsDate(rs.getTimestamp("SO_STS_DATE"));           so.setSoTemplateId(rs.getString("SO_TEMPLATE_ID"));           so.setSoType(rs.getString("SO_TYPE"));           so.setSoWorkAreaId(rs.getString("SO_WORK_AREA_ID"));           so.setSoWorkAreaName(rs.getString("SO_WORK_AREA_NAME"));           so.setSpecialFlag(rs.getString("SPECIAL_FLAG"));           so.setSts(rs.getString("STS"));           so.setStsDate(rs.getTimestamp("STS_DATE"));           so.setTempFlag(rs.getString("TEMP_FLAG"));           so.setTradeId(rs.getString("TRADE_ID"));           so.setTradeName(rs.getString("TRADE_NAME"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return so;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoSVO so=(SoSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACCT_NBR,ALARM_DATE,APPL_DATE,ARC_DEAL_COUNT,ARC_MSG,AREA_ID,BILL_TYPE,BOOK_FLAG,BUSINESS_ID,CHG_SERV_SPEC_ID,COLLAB_STS,COMPL_DATE,CONTACT_INFO,CONTACT_NAME,CONTACT_RESULT,CO_NBR,CREATE_DATE,CSO_NBR,CUTOVER_ID,DEAL_FLAG,DEV_CONTACT_INFO,DEV_DEPT_ID,DEV_PARTY_NAME,DEV_PARTY_ROLE_ID,DEV_PARTY_ROLE_TYPE_ID,EXT_SO_NBR,EXT_WO_NBR,FAIL_REASON_ID,FROM_PROD_ID,FROM_SERV_INST_ID,GROUP_FLAG,HASTEN_FLAG,LOCAL_NET_ID,MS_PLAN_NAME,MS_PLAN_TARGET_ID,MS_TASK_ID,MS_TASK_NAME,MS_TASK_PRJ_ID,MS_TASK_PRJ_NAME,NO_FLAG,N_SO_NBR,OLD_SO_NBR,ORI_SO_NBR,OVERTIME_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PAY_MAN_NAME,PAY_MAN_TELE_NBR,PAY_STS,PRESENT_FLAG,PRE_ALARM_DATE,PRIORITY,PROCESS_ID,PROC_INST_ID,PROD_ID,REAL_TIME_FLAG,REASON_ID,REASON_INFO,RELA_EXT_WO_NBR,RELA_SO_NBR,REMARKS,REQ_COMP_DATE,RES_SYSTEM,SERV_DEPT_ID,SERV_INST_ID,SO_BATCH_ID,SO_CAT,SO_LOCK_DATE,SO_LOCK_STS,SO_METH,SO_NBR,SO_SEQ,SO_STAFF_ID,SO_STAFF_NAME,SO_STS,SO_STS_DATE,SO_TEMPLATE_ID,SO_TYPE,SO_WORK_AREA_ID,SO_WORK_AREA_NAME,SPECIAL_FLAG,STS,STS_DATE,TEMP_FLAG,TRADE_ID,TRADE_NAME FROM SO WHERE 1=1 ");     try {if (so.getFlagAcctNbr() == 1) {      if (StringUtil.isBlank(so.getAcctNbr())) {             sql.append(" and ACCT_NBR is null ");          }      else{             sql.append(" and ACCT_NBR=:acctNbr");             sql.setLong("acctNbr", so.getAcctNbr());          }   } if (so.getFlagAlarmDate() == 1) {      if (so.getAlarmDate() == null) {             sql.append(" and ALARM_DATE is null ");          }      else{             sql.append(" and ALARM_DATE=:alarmDate");             sql.setTimestamp("alarmDate", so.getAlarmDate());          }   } if (so.getFlagApplDate() == 1) {      if (so.getApplDate() == null) {             sql.append(" and APPL_DATE is null ");          }      else{             sql.append(" and APPL_DATE=:applDate");             sql.setTimestamp("applDate", so.getApplDate());          }   } if (so.getFlagArcDealCount() == 1) {      if (StringUtil.isBlank(so.getArcDealCount())) {             sql.append(" and ARC_DEAL_COUNT is null ");          }      else{             sql.append(" and ARC_DEAL_COUNT=:arcDealCount");             sql.setLong("arcDealCount", so.getArcDealCount());          }   } if (so.getFlagArcMsg() == 1) {      if (StringUtil.isBlank(so.getArcMsg())) {             sql.append(" and ARC_MSG is null ");          }      else{             sql.append(" and ARC_MSG=:arcMsg");             sql.setString("arcMsg", so.getArcMsg());          }   } if (so.getFlagAreaId() == 1) {      if (StringUtil.isBlank(so.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", so.getAreaId());          }   } if (so.getFlagBillType() == 1) {      if (StringUtil.isBlank(so.getBillType())) {             sql.append(" and BILL_TYPE is null ");          }      else{             sql.append(" and BILL_TYPE=:billType");             sql.setString("billType", so.getBillType());          }   } if (so.getFlagBookFlag() == 1) {      if (StringUtil.isBlank(so.getBookFlag())) {             sql.append(" and BOOK_FLAG is null ");          }      else{             sql.append(" and BOOK_FLAG=:bookFlag");             sql.setString("bookFlag", so.getBookFlag());          }   } if (so.getFlagBusinessId() == 1) {      if (StringUtil.isBlank(so.getBusinessId())) {             sql.append(" and BUSINESS_ID is null ");          }      else{             sql.append(" and BUSINESS_ID=:businessId");             sql.setLong("businessId", so.getBusinessId());          }   } if (so.getFlagChgServSpecId() == 1) {      if (StringUtil.isBlank(so.getChgServSpecId())) {             sql.append(" and CHG_SERV_SPEC_ID is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_ID=:chgServSpecId");             sql.setString("chgServSpecId", so.getChgServSpecId());          }   } if (so.getFlagCollabSts() == 1) {      if (StringUtil.isBlank(so.getCollabSts())) {             sql.append(" and COLLAB_STS is null ");          }      else{             sql.append(" and COLLAB_STS=:collabSts");             sql.setString("collabSts", so.getCollabSts());          }   } if (so.getFlagComplDate() == 1) {      if (so.getComplDate() == null) {             sql.append(" and COMPL_DATE is null ");          }      else{             sql.append(" and COMPL_DATE=:complDate");             sql.setTimestamp("complDate", so.getComplDate());          }   } if (so.getFlagContactInfo() == 1) {      if (StringUtil.isBlank(so.getContactInfo())) {             sql.append(" and CONTACT_INFO is null ");          }      else{             sql.append(" and CONTACT_INFO=:contactInfo");             sql.setString("contactInfo", so.getContactInfo());          }   } if (so.getFlagContactName() == 1) {      if (StringUtil.isBlank(so.getContactName())) {             sql.append(" and CONTACT_NAME is null ");          }      else{             sql.append(" and CONTACT_NAME=:contactName");             sql.setString("contactName", so.getContactName());          }   } if (so.getFlagContactResult() == 1) {      if (StringUtil.isBlank(so.getContactResult())) {             sql.append(" and CONTACT_RESULT is null ");          }      else{             sql.append(" and CONTACT_RESULT=:contactResult");             sql.setString("contactResult", so.getContactResult());          }   } if (so.getFlagCoNbr() == 1) {      if (StringUtil.isBlank(so.getCoNbr())) {             sql.append(" and CO_NBR is null ");          }      else{             sql.append(" and CO_NBR=:coNbr");             sql.setString("coNbr", so.getCoNbr());          }   } if (so.getFlagCreateDate() == 1) {      if (so.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", so.getCreateDate());          }   } if (so.getFlagCsoNbr() == 1) {      if (StringUtil.isBlank(so.getCsoNbr())) {             sql.append(" and CSO_NBR is null ");          }      else{             sql.append(" and CSO_NBR=:csoNbr");             sql.setString("csoNbr", so.getCsoNbr());          }   } if (so.getFlagCutoverId() == 1) {      if (StringUtil.isBlank(so.getCutoverId())) {             sql.append(" and CUTOVER_ID is null ");          }      else{             sql.append(" and CUTOVER_ID=:cutoverId");             sql.setLong("cutoverId", so.getCutoverId());          }   } if (so.getFlagDealFlag() == 1) {      if (StringUtil.isBlank(so.getDealFlag())) {             sql.append(" and DEAL_FLAG is null ");          }      else{             sql.append(" and DEAL_FLAG=:dealFlag");             sql.setString("dealFlag", so.getDealFlag());          }   } if (so.getFlagDevContactInfo() == 1) {      if (StringUtil.isBlank(so.getDevContactInfo())) {             sql.append(" and DEV_CONTACT_INFO is null ");          }      else{             sql.append(" and DEV_CONTACT_INFO=:devContactInfo");             sql.setString("devContactInfo", so.getDevContactInfo());          }   } if (so.getFlagDevDeptId() == 1) {      if (StringUtil.isBlank(so.getDevDeptId())) {             sql.append(" and DEV_DEPT_ID is null ");          }      else{             sql.append(" and DEV_DEPT_ID=:devDeptId");             sql.setString("devDeptId", so.getDevDeptId());          }   } if (so.getFlagDevPartyName() == 1) {      if (StringUtil.isBlank(so.getDevPartyName())) {             sql.append(" and DEV_PARTY_NAME is null ");          }      else{             sql.append(" and DEV_PARTY_NAME=:devPartyName");             sql.setString("devPartyName", so.getDevPartyName());          }   } if (so.getFlagDevPartyRoleId() == 1) {      if (StringUtil.isBlank(so.getDevPartyRoleId())) {             sql.append(" and DEV_PARTY_ROLE_ID is null ");          }      else{             sql.append(" and DEV_PARTY_ROLE_ID=:devPartyRoleId");             sql.setString("devPartyRoleId", so.getDevPartyRoleId());          }   } if (so.getFlagDevPartyRoleTypeId() == 1) {      if (StringUtil.isBlank(so.getDevPartyRoleTypeId())) {             sql.append(" and DEV_PARTY_ROLE_TYPE_ID is null ");          }      else{             sql.append(" and DEV_PARTY_ROLE_TYPE_ID=:devPartyRoleTypeId");             sql.setLong("devPartyRoleTypeId", so.getDevPartyRoleTypeId());          }   } if (so.getFlagExtSoNbr() == 1) {      if (StringUtil.isBlank(so.getExtSoNbr())) {             sql.append(" and EXT_SO_NBR is null ");          }      else{             sql.append(" and EXT_SO_NBR=:extSoNbr");             sql.setString("extSoNbr", so.getExtSoNbr());          }   } if (so.getFlagExtWoNbr() == 1) {      if (StringUtil.isBlank(so.getExtWoNbr())) {             sql.append(" and EXT_WO_NBR is null ");          }      else{             sql.append(" and EXT_WO_NBR=:extWoNbr");             sql.setLong("extWoNbr", so.getExtWoNbr());          }   } if (so.getFlagFailReasonId() == 1) {      if (StringUtil.isBlank(so.getFailReasonId())) {             sql.append(" and FAIL_REASON_ID is null ");          }      else{             sql.append(" and FAIL_REASON_ID=:failReasonId");             sql.setString("failReasonId", so.getFailReasonId());          }   } if (so.getFlagFromProdId() == 1) {      if (StringUtil.isBlank(so.getFromProdId())) {             sql.append(" and FROM_PROD_ID is null ");          }      else{             sql.append(" and FROM_PROD_ID=:fromProdId");             sql.setString("fromProdId", so.getFromProdId());          }   } if (so.getFlagFromServInstId() == 1) {      if (StringUtil.isBlank(so.getFromServInstId())) {             sql.append(" and FROM_SERV_INST_ID is null ");          }      else{             sql.append(" and FROM_SERV_INST_ID=:fromServInstId");             sql.setLong("fromServInstId", so.getFromServInstId());          }   } if (so.getFlagGroupFlag() == 1) {      if (StringUtil.isBlank(so.getGroupFlag())) {             sql.append(" and GROUP_FLAG is null ");          }      else{             sql.append(" and GROUP_FLAG=:groupFlag");             sql.setString("groupFlag", so.getGroupFlag());          }   } if (so.getFlagHastenFlag() == 1) {      if (StringUtil.isBlank(so.getHastenFlag())) {             sql.append(" and HASTEN_FLAG is null ");          }      else{             sql.append(" and HASTEN_FLAG=:hastenFlag");             sql.setString("hastenFlag", so.getHastenFlag());          }   } if (so.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(so.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", so.getLocalNetId());          }   } if (so.getFlagMsPlanName() == 1) {      if (StringUtil.isBlank(so.getMsPlanName())) {             sql.append(" and MS_PLAN_NAME is null ");          }      else{             sql.append(" and MS_PLAN_NAME=:msPlanName");             sql.setString("msPlanName", so.getMsPlanName());          }   } if (so.getFlagMsPlanTargetId() == 1) {      if (StringUtil.isBlank(so.getMsPlanTargetId())) {             sql.append(" and MS_PLAN_TARGET_ID is null ");          }      else{             sql.append(" and MS_PLAN_TARGET_ID=:msPlanTargetId");             sql.setLong("msPlanTargetId", so.getMsPlanTargetId());          }   } if (so.getFlagMsTaskId() == 1) {      if (StringUtil.isBlank(so.getMsTaskId())) {             sql.append(" and MS_TASK_ID is null ");          }      else{             sql.append(" and MS_TASK_ID=:msTaskId");             sql.setLong("msTaskId", so.getMsTaskId());          }   } if (so.getFlagMsTaskName() == 1) {      if (StringUtil.isBlank(so.getMsTaskName())) {             sql.append(" and MS_TASK_NAME is null ");          }      else{             sql.append(" and MS_TASK_NAME=:msTaskName");             sql.setString("msTaskName", so.getMsTaskName());          }   } if (so.getFlagMsTaskPrjId() == 1) {      if (StringUtil.isBlank(so.getMsTaskPrjId())) {             sql.append(" and MS_TASK_PRJ_ID is null ");          }      else{             sql.append(" and MS_TASK_PRJ_ID=:msTaskPrjId");             sql.setLong("msTaskPrjId", so.getMsTaskPrjId());          }   } if (so.getFlagMsTaskPrjName() == 1) {      if (StringUtil.isBlank(so.getMsTaskPrjName())) {             sql.append(" and MS_TASK_PRJ_NAME is null ");          }      else{             sql.append(" and MS_TASK_PRJ_NAME=:msTaskPrjName");             sql.setString("msTaskPrjName", so.getMsTaskPrjName());          }   } if (so.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(so.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", so.getNoFlag());          }   } if (so.getFlagNSoNbr() == 1) {      if (StringUtil.isBlank(so.getNSoNbr())) {             sql.append(" and N_SO_NBR is null ");          }      else{             sql.append(" and N_SO_NBR=:nSoNbr");             sql.setString("nSoNbr", so.getNSoNbr());          }   } if (so.getFlagOldSoNbr() == 1) {      if (StringUtil.isBlank(so.getOldSoNbr())) {             sql.append(" and OLD_SO_NBR is null ");          }      else{             sql.append(" and OLD_SO_NBR=:oldSoNbr");             sql.setString("oldSoNbr", so.getOldSoNbr());          }   } if (so.getFlagOriSoNbr() == 1) {      if (StringUtil.isBlank(so.getOriSoNbr())) {             sql.append(" and ORI_SO_NBR is null ");          }      else{             sql.append(" and ORI_SO_NBR=:oriSoNbr");             sql.setString("oriSoNbr", so.getOriSoNbr());          }   } if (so.getFlagOvertimeId() == 1) {      if (StringUtil.isBlank(so.getOvertimeId())) {             sql.append(" and OVERTIME_ID is null ");          }      else{             sql.append(" and OVERTIME_ID=:overtimeId");             sql.setString("overtimeId", so.getOvertimeId());          }   } if (so.getFlagPartyRoleId() == 1) {      if (StringUtil.isBlank(so.getPartyRoleId())) {             sql.append(" and PARTY_ROLE_ID is null ");          }      else{             sql.append(" and PARTY_ROLE_ID=:partyRoleId");             sql.setString("partyRoleId", so.getPartyRoleId());          }   } if (so.getFlagPartyRoleTypeId() == 1) {      if (StringUtil.isBlank(so.getPartyRoleTypeId())) {             sql.append(" and PARTY_ROLE_TYPE_ID is null ");          }      else{             sql.append(" and PARTY_ROLE_TYPE_ID=:partyRoleTypeId");             sql.setLong("partyRoleTypeId", so.getPartyRoleTypeId());          }   } if (so.getFlagPayManName() == 1) {      if (StringUtil.isBlank(so.getPayManName())) {             sql.append(" and PAY_MAN_NAME is null ");          }      else{             sql.append(" and PAY_MAN_NAME=:payManName");             sql.setString("payManName", so.getPayManName());          }   } if (so.getFlagPayManTeleNbr() == 1) {      if (StringUtil.isBlank(so.getPayManTeleNbr())) {             sql.append(" and PAY_MAN_TELE_NBR is null ");          }      else{             sql.append(" and PAY_MAN_TELE_NBR=:payManTeleNbr");             sql.setString("payManTeleNbr", so.getPayManTeleNbr());          }   } if (so.getFlagPaySts() == 1) {      if (StringUtil.isBlank(so.getPaySts())) {             sql.append(" and PAY_STS is null ");          }      else{             sql.append(" and PAY_STS=:paySts");             sql.setString("paySts", so.getPaySts());          }   } if (so.getFlagPresentFlag() == 1) {      if (StringUtil.isBlank(so.getPresentFlag())) {             sql.append(" and PRESENT_FLAG is null ");          }      else{             sql.append(" and PRESENT_FLAG=:presentFlag");             sql.setString("presentFlag", so.getPresentFlag());          }   } if (so.getFlagPreAlarmDate() == 1) {      if (so.getPreAlarmDate() == null) {             sql.append(" and PRE_ALARM_DATE is null ");          }      else{             sql.append(" and PRE_ALARM_DATE=:preAlarmDate");             sql.setTimestamp("preAlarmDate", so.getPreAlarmDate());          }   } if (so.getFlagPriority() == 1) {      if (StringUtil.isBlank(so.getPriority())) {             sql.append(" and PRIORITY is null ");          }      else{             sql.append(" and PRIORITY=:priority");             sql.setString("priority", so.getPriority());          }   } if (so.getFlagProcessId() == 1) {      if (StringUtil.isBlank(so.getProcessId())) {             sql.append(" and PROCESS_ID is null ");          }      else{             sql.append(" and PROCESS_ID=:processId");             sql.setLong("processId", so.getProcessId());          }   } if (so.getFlagProcInstId() == 1) {      if (StringUtil.isBlank(so.getProcInstId())) {             sql.append(" and PROC_INST_ID is null ");          }      else{             sql.append(" and PROC_INST_ID=:procInstId");             sql.setLong("procInstId", so.getProcInstId());          }   } if (so.getFlagProdId() == 1) {      if (StringUtil.isBlank(so.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setString("prodId", so.getProdId());          }   } if (so.getFlagRealTimeFlag() == 1) {      if (StringUtil.isBlank(so.getRealTimeFlag())) {             sql.append(" and REAL_TIME_FLAG is null ");          }      else{             sql.append(" and REAL_TIME_FLAG=:realTimeFlag");             sql.setString("realTimeFlag", so.getRealTimeFlag());          }   } if (so.getFlagReasonId() == 1) {      if (StringUtil.isBlank(so.getReasonId())) {             sql.append(" and REASON_ID is null ");          }      else{             sql.append(" and REASON_ID=:reasonId");             sql.setLong("reasonId", so.getReasonId());          }   } if (so.getFlagReasonInfo() == 1) {      if (StringUtil.isBlank(so.getReasonInfo())) {             sql.append(" and REASON_INFO is null ");          }      else{             sql.append(" and REASON_INFO=:reasonInfo");             sql.setString("reasonInfo", so.getReasonInfo());          }   } if (so.getFlagRelaExtWoNbr() == 1) {      if (StringUtil.isBlank(so.getRelaExtWoNbr())) {             sql.append(" and RELA_EXT_WO_NBR is null ");          }      else{             sql.append(" and RELA_EXT_WO_NBR=:relaExtWoNbr");             sql.setLong("relaExtWoNbr", so.getRelaExtWoNbr());          }   } if (so.getFlagRelaSoNbr() == 1) {      if (StringUtil.isBlank(so.getRelaSoNbr())) {             sql.append(" and RELA_SO_NBR is null ");          }      else{             sql.append(" and RELA_SO_NBR=:relaSoNbr");             sql.setString("relaSoNbr", so.getRelaSoNbr());          }   } if (so.getFlagRemarks() == 1) {      if (StringUtil.isBlank(so.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", so.getRemarks());          }   } if (so.getFlagReqCompDate() == 1) {      if (so.getReqCompDate() == null) {             sql.append(" and REQ_COMP_DATE is null ");          }      else{             sql.append(" and REQ_COMP_DATE=:reqCompDate");             sql.setTimestamp("reqCompDate", so.getReqCompDate());          }   } if (so.getFlagResSystem() == 1) {      if (StringUtil.isBlank(so.getResSystem())) {             sql.append(" and RES_SYSTEM is null ");          }      else{             sql.append(" and RES_SYSTEM=:resSystem");             sql.setString("resSystem", so.getResSystem());          }   } if (so.getFlagServDeptId() == 1) {      if (StringUtil.isBlank(so.getServDeptId())) {             sql.append(" and SERV_DEPT_ID is null ");          }      else{             sql.append(" and SERV_DEPT_ID=:servDeptId");             sql.setLong("servDeptId", so.getServDeptId());          }   } if (so.getFlagServInstId() == 1) {      if (StringUtil.isBlank(so.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", so.getServInstId());          }   } if (so.getFlagSoBatchId() == 1) {      if (StringUtil.isBlank(so.getSoBatchId())) {             sql.append(" and SO_BATCH_ID is null ");          }      else{             sql.append(" and SO_BATCH_ID=:soBatchId");             sql.setLong("soBatchId", so.getSoBatchId());          }   } if (so.getFlagSoCat() == 1) {      if (StringUtil.isBlank(so.getSoCat())) {             sql.append(" and SO_CAT is null ");          }      else{             sql.append(" and SO_CAT=:soCat");             sql.setString("soCat", so.getSoCat());          }   } if (so.getFlagSoLockDate() == 1) {      if (so.getSoLockDate() == null) {             sql.append(" and SO_LOCK_DATE is null ");          }      else{             sql.append(" and SO_LOCK_DATE=:soLockDate");             sql.setTimestamp("soLockDate", so.getSoLockDate());          }   } if (so.getFlagSoLockSts() == 1) {      if (StringUtil.isBlank(so.getSoLockSts())) {             sql.append(" and SO_LOCK_STS is null ");          }      else{             sql.append(" and SO_LOCK_STS=:soLockSts");             sql.setString("soLockSts", so.getSoLockSts());          }   } if (so.getFlagSoMeth() == 1) {      if (StringUtil.isBlank(so.getSoMeth())) {             sql.append(" and SO_METH is null ");          }      else{             sql.append(" and SO_METH=:soMeth");             sql.setString("soMeth", so.getSoMeth());          }   } if (so.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(so.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", so.getSoNbr());          }   } if (so.getFlagSoSeq() == 1) {      if (StringUtil.isBlank(so.getSoSeq())) {             sql.append(" and SO_SEQ is null ");          }      else{             sql.append(" and SO_SEQ=:soSeq");             sql.setLong("soSeq", so.getSoSeq());          }   } if (so.getFlagSoStaffId() == 1) {      if (StringUtil.isBlank(so.getSoStaffId())) {             sql.append(" and SO_STAFF_ID is null ");          }      else{             sql.append(" and SO_STAFF_ID=:soStaffId");             sql.setString("soStaffId", so.getSoStaffId());          }   } if (so.getFlagSoStaffName() == 1) {      if (StringUtil.isBlank(so.getSoStaffName())) {             sql.append(" and SO_STAFF_NAME is null ");          }      else{             sql.append(" and SO_STAFF_NAME=:soStaffName");             sql.setString("soStaffName", so.getSoStaffName());          }   } if (so.getFlagSoSts() == 1) {      if (StringUtil.isBlank(so.getSoSts())) {             sql.append(" and SO_STS is null ");          }      else{             sql.append(" and SO_STS=:soSts");             sql.setString("soSts", so.getSoSts());          }   } if (so.getFlagSoStsDate() == 1) {      if (so.getSoStsDate() == null) {             sql.append(" and SO_STS_DATE is null ");          }      else{             sql.append(" and SO_STS_DATE=:soStsDate");             sql.setTimestamp("soStsDate", so.getSoStsDate());          }   } if (so.getFlagSoTemplateId() == 1) {      if (StringUtil.isBlank(so.getSoTemplateId())) {             sql.append(" and SO_TEMPLATE_ID is null ");          }      else{             sql.append(" and SO_TEMPLATE_ID=:soTemplateId");             sql.setString("soTemplateId", so.getSoTemplateId());          }   } if (so.getFlagSoType() == 1) {      if (StringUtil.isBlank(so.getSoType())) {             sql.append(" and SO_TYPE is null ");          }      else{             sql.append(" and SO_TYPE=:soType");             sql.setString("soType", so.getSoType());          }   } if (so.getFlagSoWorkAreaId() == 1) {      if (StringUtil.isBlank(so.getSoWorkAreaId())) {             sql.append(" and SO_WORK_AREA_ID is null ");          }      else{             sql.append(" and SO_WORK_AREA_ID=:soWorkAreaId");             sql.setString("soWorkAreaId", so.getSoWorkAreaId());          }   } if (so.getFlagSoWorkAreaName() == 1) {      if (StringUtil.isBlank(so.getSoWorkAreaName())) {             sql.append(" and SO_WORK_AREA_NAME is null ");          }      else{             sql.append(" and SO_WORK_AREA_NAME=:soWorkAreaName");             sql.setString("soWorkAreaName", so.getSoWorkAreaName());          }   } if (so.getFlagSpecialFlag() == 1) {      if (StringUtil.isBlank(so.getSpecialFlag())) {             sql.append(" and SPECIAL_FLAG is null ");          }      else{             sql.append(" and SPECIAL_FLAG=:specialFlag");             sql.setString("specialFlag", so.getSpecialFlag());          }   } if (so.getFlagSts() == 1) {      if (StringUtil.isBlank(so.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", so.getSts());          }   } if (so.getFlagStsDate() == 1) {      if (so.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", so.getStsDate());          }   } if (so.getFlagTempFlag() == 1) {      if (StringUtil.isBlank(so.getTempFlag())) {             sql.append(" and TEMP_FLAG is null ");          }      else{             sql.append(" and TEMP_FLAG=:tempFlag");             sql.setString("tempFlag", so.getTempFlag());          }   } if (so.getFlagTradeId() == 1) {      if (StringUtil.isBlank(so.getTradeId())) {             sql.append(" and TRADE_ID is null ");          }      else{             sql.append(" and TRADE_ID=:tradeId");             sql.setString("tradeId", so.getTradeId());          }   } if (so.getFlagTradeName() == 1) {      if (StringUtil.isBlank(so.getTradeName())) {             sql.append(" and TRADE_NAME is null ");          }      else{             sql.append(" and TRADE_NAME=:tradeName");             sql.setString("tradeName", so.getTradeName());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           so = new SoSVO();           so.setAcctNbr(rs.getString("ACCT_NBR"));           so.setAlarmDate(rs.getTimestamp("ALARM_DATE"));           so.setApplDate(rs.getTimestamp("APPL_DATE"));           so.setArcDealCount(rs.getString("ARC_DEAL_COUNT"));           so.setArcMsg(rs.getString("ARC_MSG"));           so.setAreaId(rs.getString("AREA_ID"));           so.setBillType(rs.getString("BILL_TYPE"));           so.setBookFlag(rs.getString("BOOK_FLAG"));           so.setBusinessId(rs.getString("BUSINESS_ID"));           so.setChgServSpecId(rs.getString("CHG_SERV_SPEC_ID"));           so.setCollabSts(rs.getString("COLLAB_STS"));           so.setComplDate(rs.getTimestamp("COMPL_DATE"));           so.setContactInfo(rs.getString("CONTACT_INFO"));           so.setContactName(rs.getString("CONTACT_NAME"));           so.setContactResult(rs.getString("CONTACT_RESULT"));           so.setCoNbr(rs.getString("CO_NBR"));           so.setCreateDate(rs.getTimestamp("CREATE_DATE"));           so.setCsoNbr(rs.getString("CSO_NBR"));           so.setCutoverId(rs.getString("CUTOVER_ID"));           so.setDealFlag(rs.getString("DEAL_FLAG"));           so.setDevContactInfo(rs.getString("DEV_CONTACT_INFO"));           so.setDevDeptId(rs.getString("DEV_DEPT_ID"));           so.setDevPartyName(rs.getString("DEV_PARTY_NAME"));           so.setDevPartyRoleId(rs.getString("DEV_PARTY_ROLE_ID"));           so.setDevPartyRoleTypeId(rs.getString("DEV_PARTY_ROLE_TYPE_ID"));           so.setExtSoNbr(rs.getString("EXT_SO_NBR"));           so.setExtWoNbr(rs.getString("EXT_WO_NBR"));           so.setFailReasonId(rs.getString("FAIL_REASON_ID"));           so.setFromProdId(rs.getString("FROM_PROD_ID"));           so.setFromServInstId(rs.getString("FROM_SERV_INST_ID"));           so.setGroupFlag(rs.getString("GROUP_FLAG"));           so.setHastenFlag(rs.getString("HASTEN_FLAG"));           so.setLocalNetId(rs.getString("LOCAL_NET_ID"));           so.setMsPlanName(rs.getString("MS_PLAN_NAME"));           so.setMsPlanTargetId(rs.getString("MS_PLAN_TARGET_ID"));           so.setMsTaskId(rs.getString("MS_TASK_ID"));           so.setMsTaskName(rs.getString("MS_TASK_NAME"));           so.setMsTaskPrjId(rs.getString("MS_TASK_PRJ_ID"));           so.setMsTaskPrjName(rs.getString("MS_TASK_PRJ_NAME"));           so.setNoFlag(rs.getString("NO_FLAG"));           so.setNSoNbr(rs.getString("N_SO_NBR"));           so.setOldSoNbr(rs.getString("OLD_SO_NBR"));           so.setOriSoNbr(rs.getString("ORI_SO_NBR"));           so.setOvertimeId(rs.getString("OVERTIME_ID"));           so.setPartyRoleId(rs.getString("PARTY_ROLE_ID"));           so.setPartyRoleTypeId(rs.getString("PARTY_ROLE_TYPE_ID"));           so.setPayManName(rs.getString("PAY_MAN_NAME"));           so.setPayManTeleNbr(rs.getString("PAY_MAN_TELE_NBR"));           so.setPaySts(rs.getString("PAY_STS"));           so.setPresentFlag(rs.getString("PRESENT_FLAG"));           so.setPreAlarmDate(rs.getTimestamp("PRE_ALARM_DATE"));           so.setPriority(rs.getString("PRIORITY"));           so.setProcessId(rs.getString("PROCESS_ID"));           so.setProcInstId(rs.getString("PROC_INST_ID"));           so.setProdId(rs.getString("PROD_ID"));           so.setRealTimeFlag(rs.getString("REAL_TIME_FLAG"));           so.setReasonId(rs.getString("REASON_ID"));           so.setReasonInfo(rs.getString("REASON_INFO"));           so.setRelaExtWoNbr(rs.getString("RELA_EXT_WO_NBR"));           so.setRelaSoNbr(rs.getString("RELA_SO_NBR"));           so.setRemarks(rs.getString("REMARKS"));           so.setReqCompDate(rs.getTimestamp("REQ_COMP_DATE"));           so.setResSystem(rs.getString("RES_SYSTEM"));           so.setServDeptId(rs.getString("SERV_DEPT_ID"));           so.setServInstId(rs.getString("SERV_INST_ID"));           so.setSoBatchId(rs.getString("SO_BATCH_ID"));           so.setSoCat(rs.getString("SO_CAT"));           so.setSoLockDate(rs.getTimestamp("SO_LOCK_DATE"));           so.setSoLockSts(rs.getString("SO_LOCK_STS"));           so.setSoMeth(rs.getString("SO_METH"));           so.setSoNbr(rs.getString("SO_NBR"));           so.setSoSeq(rs.getString("SO_SEQ"));           so.setSoStaffId(rs.getString("SO_STAFF_ID"));           so.setSoStaffName(rs.getString("SO_STAFF_NAME"));           so.setSoSts(rs.getString("SO_STS"));           so.setSoStsDate(rs.getTimestamp("SO_STS_DATE"));           so.setSoTemplateId(rs.getString("SO_TEMPLATE_ID"));           so.setSoType(rs.getString("SO_TYPE"));           so.setSoWorkAreaId(rs.getString("SO_WORK_AREA_ID"));           so.setSoWorkAreaName(rs.getString("SO_WORK_AREA_NAME"));           so.setSpecialFlag(rs.getString("SPECIAL_FLAG"));           so.setSts(rs.getString("STS"));           so.setStsDate(rs.getTimestamp("STS_DATE"));           so.setTempFlag(rs.getString("TEMP_FLAG"));           so.setTradeId(rs.getString("TRADE_ID"));           so.setTradeName(rs.getString("TRADE_NAME"));               res.add(so);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoSVO so=(SoSVO) vo;    if (StringUtil.isBlank(so.getSoNbr())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(so.getSoSeq())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO SET ");     try {if (so.getFlagAcctNbr() == 1) {sql.append("ACCT_NBR=:acctNbr,");sql.setLong("acctNbr", so.getAcctNbr()); } if (so.getFlagAlarmDate() == 1) {sql.append("ALARM_DATE=:alarmDate,"); sql.setTimestamp("alarmDate", so.getAlarmDate()); } if (so.getFlagApplDate() == 1) {sql.append("APPL_DATE=:applDate,"); sql.setTimestamp("applDate", so.getApplDate()); } if (so.getFlagArcDealCount() == 1) {sql.append("ARC_DEAL_COUNT=:arcDealCount,");sql.setLong("arcDealCount", so.getArcDealCount()); } if (so.getFlagArcMsg() == 1) {sql.append("ARC_MSG=:arcMsg,"); sql.setString("arcMsg", so.getArcMsg()); } if (so.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", so.getAreaId()); } if (so.getFlagBillType() == 1) {sql.append("BILL_TYPE=:billType,"); sql.setString("billType", so.getBillType()); } if (so.getFlagBookFlag() == 1) {sql.append("BOOK_FLAG=:bookFlag,"); sql.setString("bookFlag", so.getBookFlag()); } if (so.getFlagBusinessId() == 1) {sql.append("BUSINESS_ID=:businessId,");sql.setLong("businessId", so.getBusinessId()); } if (so.getFlagChgServSpecId() == 1) {sql.append("CHG_SERV_SPEC_ID=:chgServSpecId,"); sql.setString("chgServSpecId", so.getChgServSpecId()); } if (so.getFlagCollabSts() == 1) {sql.append("COLLAB_STS=:collabSts,"); sql.setString("collabSts", so.getCollabSts()); } if (so.getFlagComplDate() == 1) {sql.append("COMPL_DATE=:complDate,"); sql.setTimestamp("complDate", so.getComplDate()); } if (so.getFlagContactInfo() == 1) {sql.append("CONTACT_INFO=:contactInfo,"); sql.setString("contactInfo", so.getContactInfo()); } if (so.getFlagContactName() == 1) {sql.append("CONTACT_NAME=:contactName,"); sql.setString("contactName", so.getContactName()); } if (so.getFlagContactResult() == 1) {sql.append("CONTACT_RESULT=:contactResult,"); sql.setString("contactResult", so.getContactResult()); } if (so.getFlagCoNbr() == 1) {sql.append("CO_NBR=:coNbr,"); sql.setString("coNbr", so.getCoNbr()); } if (so.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", so.getCreateDate()); } if (so.getFlagCsoNbr() == 1) {sql.append("CSO_NBR=:csoNbr,"); sql.setString("csoNbr", so.getCsoNbr()); } if (so.getFlagCutoverId() == 1) {sql.append("CUTOVER_ID=:cutoverId,");sql.setLong("cutoverId", so.getCutoverId()); } if (so.getFlagDealFlag() == 1) {sql.append("DEAL_FLAG=:dealFlag,"); sql.setString("dealFlag", so.getDealFlag()); } if (so.getFlagDevContactInfo() == 1) {sql.append("DEV_CONTACT_INFO=:devContactInfo,"); sql.setString("devContactInfo", so.getDevContactInfo()); } if (so.getFlagDevDeptId() == 1) {sql.append("DEV_DEPT_ID=:devDeptId,"); sql.setString("devDeptId", so.getDevDeptId()); } if (so.getFlagDevPartyName() == 1) {sql.append("DEV_PARTY_NAME=:devPartyName,"); sql.setString("devPartyName", so.getDevPartyName()); } if (so.getFlagDevPartyRoleId() == 1) {sql.append("DEV_PARTY_ROLE_ID=:devPartyRoleId,"); sql.setString("devPartyRoleId", so.getDevPartyRoleId()); } if (so.getFlagDevPartyRoleTypeId() == 1) {sql.append("DEV_PARTY_ROLE_TYPE_ID=:devPartyRoleTypeId,");sql.setLong("devPartyRoleTypeId", so.getDevPartyRoleTypeId()); } if (so.getFlagExtSoNbr() == 1) {sql.append("EXT_SO_NBR=:extSoNbr,"); sql.setString("extSoNbr", so.getExtSoNbr()); } if (so.getFlagExtWoNbr() == 1) {sql.append("EXT_WO_NBR=:extWoNbr,");sql.setLong("extWoNbr", so.getExtWoNbr()); } if (so.getFlagFailReasonId() == 1) {sql.append("FAIL_REASON_ID=:failReasonId,"); sql.setString("failReasonId", so.getFailReasonId()); } if (so.getFlagFromProdId() == 1) {sql.append("FROM_PROD_ID=:fromProdId,"); sql.setString("fromProdId", so.getFromProdId()); } if (so.getFlagFromServInstId() == 1) {sql.append("FROM_SERV_INST_ID=:fromServInstId,");sql.setLong("fromServInstId", so.getFromServInstId()); } if (so.getFlagGroupFlag() == 1) {sql.append("GROUP_FLAG=:groupFlag,"); sql.setString("groupFlag", so.getGroupFlag()); } if (so.getFlagHastenFlag() == 1) {sql.append("HASTEN_FLAG=:hastenFlag,"); sql.setString("hastenFlag", so.getHastenFlag()); } if (so.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", so.getLocalNetId()); } if (so.getFlagMsPlanName() == 1) {sql.append("MS_PLAN_NAME=:msPlanName,"); sql.setString("msPlanName", so.getMsPlanName()); } if (so.getFlagMsPlanTargetId() == 1) {sql.append("MS_PLAN_TARGET_ID=:msPlanTargetId,");sql.setLong("msPlanTargetId", so.getMsPlanTargetId()); } if (so.getFlagMsTaskId() == 1) {sql.append("MS_TASK_ID=:msTaskId,");sql.setLong("msTaskId", so.getMsTaskId()); } if (so.getFlagMsTaskName() == 1) {sql.append("MS_TASK_NAME=:msTaskName,"); sql.setString("msTaskName", so.getMsTaskName()); } if (so.getFlagMsTaskPrjId() == 1) {sql.append("MS_TASK_PRJ_ID=:msTaskPrjId,");sql.setLong("msTaskPrjId", so.getMsTaskPrjId()); } if (so.getFlagMsTaskPrjName() == 1) {sql.append("MS_TASK_PRJ_NAME=:msTaskPrjName,"); sql.setString("msTaskPrjName", so.getMsTaskPrjName()); } if (so.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", so.getNoFlag()); } if (so.getFlagNSoNbr() == 1) {sql.append("N_SO_NBR=:nSoNbr,"); sql.setString("nSoNbr", so.getNSoNbr()); } if (so.getFlagOldSoNbr() == 1) {sql.append("OLD_SO_NBR=:oldSoNbr,"); sql.setString("oldSoNbr", so.getOldSoNbr()); } if (so.getFlagOriSoNbr() == 1) {sql.append("ORI_SO_NBR=:oriSoNbr,"); sql.setString("oriSoNbr", so.getOriSoNbr()); } if (so.getFlagOvertimeId() == 1) {sql.append("OVERTIME_ID=:overtimeId,"); sql.setString("overtimeId", so.getOvertimeId()); } if (so.getFlagPartyRoleId() == 1) {sql.append("PARTY_ROLE_ID=:partyRoleId,"); sql.setString("partyRoleId", so.getPartyRoleId()); } if (so.getFlagPartyRoleTypeId() == 1) {sql.append("PARTY_ROLE_TYPE_ID=:partyRoleTypeId,");sql.setLong("partyRoleTypeId", so.getPartyRoleTypeId()); } if (so.getFlagPayManName() == 1) {sql.append("PAY_MAN_NAME=:payManName,"); sql.setString("payManName", so.getPayManName()); } if (so.getFlagPayManTeleNbr() == 1) {sql.append("PAY_MAN_TELE_NBR=:payManTeleNbr,"); sql.setString("payManTeleNbr", so.getPayManTeleNbr()); } if (so.getFlagPaySts() == 1) {sql.append("PAY_STS=:paySts,"); sql.setString("paySts", so.getPaySts()); } if (so.getFlagPresentFlag() == 1) {sql.append("PRESENT_FLAG=:presentFlag,"); sql.setString("presentFlag", so.getPresentFlag()); } if (so.getFlagPreAlarmDate() == 1) {sql.append("PRE_ALARM_DATE=:preAlarmDate,"); sql.setTimestamp("preAlarmDate", so.getPreAlarmDate()); } if (so.getFlagPriority() == 1) {sql.append("PRIORITY=:priority,"); sql.setString("priority", so.getPriority()); } if (so.getFlagProcessId() == 1) {sql.append("PROCESS_ID=:processId,");sql.setLong("processId", so.getProcessId()); } if (so.getFlagProcInstId() == 1) {sql.append("PROC_INST_ID=:procInstId,");sql.setLong("procInstId", so.getProcInstId()); } if (so.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,"); sql.setString("prodId", so.getProdId()); } if (so.getFlagRealTimeFlag() == 1) {sql.append("REAL_TIME_FLAG=:realTimeFlag,"); sql.setString("realTimeFlag", so.getRealTimeFlag()); } if (so.getFlagReasonId() == 1) {sql.append("REASON_ID=:reasonId,");sql.setLong("reasonId", so.getReasonId()); } if (so.getFlagReasonInfo() == 1) {sql.append("REASON_INFO=:reasonInfo,"); sql.setString("reasonInfo", so.getReasonInfo()); } if (so.getFlagRelaExtWoNbr() == 1) {sql.append("RELA_EXT_WO_NBR=:relaExtWoNbr,");sql.setLong("relaExtWoNbr", so.getRelaExtWoNbr()); } if (so.getFlagRelaSoNbr() == 1) {sql.append("RELA_SO_NBR=:relaSoNbr,"); sql.setString("relaSoNbr", so.getRelaSoNbr()); } if (so.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", so.getRemarks()); } if (so.getFlagReqCompDate() == 1) {sql.append("REQ_COMP_DATE=:reqCompDate,"); sql.setTimestamp("reqCompDate", so.getReqCompDate()); } if (so.getFlagResSystem() == 1) {sql.append("RES_SYSTEM=:resSystem,"); sql.setString("resSystem", so.getResSystem()); } if (so.getFlagServDeptId() == 1) {sql.append("SERV_DEPT_ID=:servDeptId,");sql.setLong("servDeptId", so.getServDeptId()); } if (so.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", so.getServInstId()); } if (so.getFlagSoBatchId() == 1) {sql.append("SO_BATCH_ID=:soBatchId,");sql.setLong("soBatchId", so.getSoBatchId()); } if (so.getFlagSoCat() == 1) {sql.append("SO_CAT=:soCat,"); sql.setString("soCat", so.getSoCat()); } if (so.getFlagSoLockDate() == 1) {sql.append("SO_LOCK_DATE=:soLockDate,"); sql.setTimestamp("soLockDate", so.getSoLockDate()); } if (so.getFlagSoLockSts() == 1) {sql.append("SO_LOCK_STS=:soLockSts,"); sql.setString("soLockSts", so.getSoLockSts()); } if (so.getFlagSoMeth() == 1) {sql.append("SO_METH=:soMeth,"); sql.setString("soMeth", so.getSoMeth()); } if (so.getFlagSoStaffId() == 1) {sql.append("SO_STAFF_ID=:soStaffId,"); sql.setString("soStaffId", so.getSoStaffId()); } if (so.getFlagSoStaffName() == 1) {sql.append("SO_STAFF_NAME=:soStaffName,"); sql.setString("soStaffName", so.getSoStaffName()); } if (so.getFlagSoSts() == 1) {sql.append("SO_STS=:soSts,"); sql.setString("soSts", so.getSoSts()); } if (so.getFlagSoStsDate() == 1) {sql.append("SO_STS_DATE=:soStsDate,"); sql.setTimestamp("soStsDate", so.getSoStsDate()); } if (so.getFlagSoTemplateId() == 1) {sql.append("SO_TEMPLATE_ID=:soTemplateId,"); sql.setString("soTemplateId", so.getSoTemplateId()); } if (so.getFlagSoType() == 1) {sql.append("SO_TYPE=:soType,"); sql.setString("soType", so.getSoType()); } if (so.getFlagSoWorkAreaId() == 1) {sql.append("SO_WORK_AREA_ID=:soWorkAreaId,"); sql.setString("soWorkAreaId", so.getSoWorkAreaId()); } if (so.getFlagSoWorkAreaName() == 1) {sql.append("SO_WORK_AREA_NAME=:soWorkAreaName,"); sql.setString("soWorkAreaName", so.getSoWorkAreaName()); } if (so.getFlagSpecialFlag() == 1) {sql.append("SPECIAL_FLAG=:specialFlag,"); sql.setString("specialFlag", so.getSpecialFlag()); } if (so.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", so.getSts()); } if (so.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", so.getStsDate()); } if (so.getFlagTempFlag() == 1) {sql.append("TEMP_FLAG=:tempFlag,"); sql.setString("tempFlag", so.getTempFlag()); } if (so.getFlagTradeId() == 1) {sql.append("TRADE_ID=:tradeId,"); sql.setString("tradeId", so.getTradeId()); } if (so.getFlagTradeName() == 1) {sql.append("TRADE_NAME=:tradeName,"); sql.setString("tradeName", so.getTradeName()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and SO_NBR=:soNbr");sql.setString("soNbr", so.getSoNbr()); sql.append(" and SO_SEQ=:soSeq");sql.setLong("soSeq", so.getSoSeq());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO(ACCT_NBR,ALARM_DATE,APPL_DATE,ARC_DEAL_COUNT,ARC_MSG,AREA_ID,BILL_TYPE,BOOK_FLAG,BUSINESS_ID,CHG_SERV_SPEC_ID,COLLAB_STS,COMPL_DATE,CONTACT_INFO,CONTACT_NAME,CONTACT_RESULT,CO_NBR,CREATE_DATE,CSO_NBR,CUTOVER_ID,DEAL_FLAG,DEV_CONTACT_INFO,DEV_DEPT_ID,DEV_PARTY_NAME,DEV_PARTY_ROLE_ID,DEV_PARTY_ROLE_TYPE_ID,EXT_SO_NBR,EXT_WO_NBR,FAIL_REASON_ID,FROM_PROD_ID,FROM_SERV_INST_ID,GROUP_FLAG,HASTEN_FLAG,LOCAL_NET_ID,MS_PLAN_NAME,MS_PLAN_TARGET_ID,MS_TASK_ID,MS_TASK_NAME,MS_TASK_PRJ_ID,MS_TASK_PRJ_NAME,NO_FLAG,N_SO_NBR,OLD_SO_NBR,ORI_SO_NBR,OVERTIME_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PAY_MAN_NAME,PAY_MAN_TELE_NBR,PAY_STS,PRESENT_FLAG,PRE_ALARM_DATE,PRIORITY,PROCESS_ID,PROC_INST_ID,PROD_ID,REAL_TIME_FLAG,REASON_ID,REASON_INFO,RELA_EXT_WO_NBR,RELA_SO_NBR,REMARKS,REQ_COMP_DATE,RES_SYSTEM,SERV_DEPT_ID,SERV_INST_ID,SO_BATCH_ID,SO_CAT,SO_LOCK_DATE,SO_LOCK_STS,SO_METH,SO_NBR,SO_SEQ,SO_STAFF_ID,SO_STAFF_NAME,SO_STS,SO_STS_DATE,SO_TEMPLATE_ID,SO_TYPE,SO_WORK_AREA_ID,SO_WORK_AREA_NAME,SPECIAL_FLAG,STS,STS_DATE,TEMP_FLAG,TRADE_ID,TRADE_NAME)");sql.append(" VALUES (:acctNbr,:alarmDate,:applDate,:arcDealCount,:arcMsg,:areaId,:billType,:bookFlag,:businessId,:chgServSpecId,:collabSts,:complDate,:contactInfo,:contactName,:contactResult,:coNbr,:createDate,:csoNbr,:cutoverId,:dealFlag,:devContactInfo,:devDeptId,:devPartyName,:devPartyRoleId,:devPartyRoleTypeId,:extSoNbr,:extWoNbr,:failReasonId,:fromProdId,:fromServInstId,:groupFlag,:hastenFlag,:localNetId,:msPlanName,:msPlanTargetId,:msTaskId,:msTaskName,:msTaskPrjId,:msTaskPrjName,:noFlag,:nSoNbr,:oldSoNbr,:oriSoNbr,:overtimeId,:partyRoleId,:partyRoleTypeId,:payManName,:payManTeleNbr,:paySts,:presentFlag,:preAlarmDate,:priority,:processId,:procInstId,:prodId,:realTimeFlag,:reasonId,:reasonInfo,:relaExtWoNbr,:relaSoNbr,:remarks,:reqCompDate,:resSystem,:servDeptId,:servInstId,:soBatchId,:soCat,:soLockDate,:soLockSts,:soMeth,:soNbr,:soSeq,:soStaffId,:soStaffName,:soSts,:soStsDate,:soTemplateId,:soType,:soWorkAreaId,:soWorkAreaName,:specialFlag,:sts,:stsDate,:tempFlag,:tradeId,:tradeName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoSVO so=(SoSVO) list.get(i);         if (so== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(so.getSoNbr())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(so.getSoSeq())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(so.getAcctNbr())) {      sql.setNullLong("acctNbr");     } else {    sql.setLong("acctNbr", so.getAcctNbr());    }    if (so.getAlarmDate() == null) {      sql.setNullDate("alarmDate");     } else {    sql.setTimestamp("alarmDate", so.getAlarmDate());    }    if (so.getApplDate() == null) {      sql.setNullDate("applDate");     } else {    sql.setTimestamp("applDate", so.getApplDate());    }       if (StringUtil.isBlank(so.getArcDealCount())) {      sql.setNullLong("arcDealCount");     } else {    sql.setLong("arcDealCount", so.getArcDealCount());    }       if (StringUtil.isBlank(so.getArcMsg())) {      sql.setNullString("arcMsg");     } else {    sql.setString("arcMsg", so.getArcMsg());    }       if (StringUtil.isBlank(so.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", so.getAreaId());    }       if (StringUtil.isBlank(so.getBillType())) {      sql.setNullString("billType");     } else {    sql.setString("billType", so.getBillType());    }       if (StringUtil.isBlank(so.getBookFlag())) {      sql.setNullString("bookFlag");     } else {    sql.setString("bookFlag", so.getBookFlag());    }       if (StringUtil.isBlank(so.getBusinessId())) {      sql.setNullLong("businessId");     } else {    sql.setLong("businessId", so.getBusinessId());    }       if (StringUtil.isBlank(so.getChgServSpecId())) {      sql.setNullString("chgServSpecId");     } else {    sql.setString("chgServSpecId", so.getChgServSpecId());    }       if (StringUtil.isBlank(so.getCollabSts())) {      sql.setNullString("collabSts");     } else {    sql.setString("collabSts", so.getCollabSts());    }    if (so.getComplDate() == null) {      sql.setNullDate("complDate");     } else {    sql.setTimestamp("complDate", so.getComplDate());    }       if (StringUtil.isBlank(so.getContactInfo())) {      sql.setNullString("contactInfo");     } else {    sql.setString("contactInfo", so.getContactInfo());    }       if (StringUtil.isBlank(so.getContactName())) {      sql.setNullString("contactName");     } else {    sql.setString("contactName", so.getContactName());    }       if (StringUtil.isBlank(so.getContactResult())) {      sql.setNullString("contactResult");     } else {    sql.setString("contactResult", so.getContactResult());    }       if (StringUtil.isBlank(so.getCoNbr())) {      sql.setNullString("coNbr");     } else {    sql.setString("coNbr", so.getCoNbr());    }    if (so.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", so.getCreateDate());    }       if (StringUtil.isBlank(so.getCsoNbr())) {      sql.setNullString("csoNbr");     } else {    sql.setString("csoNbr", so.getCsoNbr());    }       if (StringUtil.isBlank(so.getCutoverId())) {      sql.setNullLong("cutoverId");     } else {    sql.setLong("cutoverId", so.getCutoverId());    }       if (StringUtil.isBlank(so.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", so.getDealFlag());    }       if (StringUtil.isBlank(so.getDevContactInfo())) {      sql.setNullString("devContactInfo");     } else {    sql.setString("devContactInfo", so.getDevContactInfo());    }       if (StringUtil.isBlank(so.getDevDeptId())) {      sql.setNullString("devDeptId");     } else {    sql.setString("devDeptId", so.getDevDeptId());    }       if (StringUtil.isBlank(so.getDevPartyName())) {      sql.setNullString("devPartyName");     } else {    sql.setString("devPartyName", so.getDevPartyName());    }       if (StringUtil.isBlank(so.getDevPartyRoleId())) {      sql.setNullString("devPartyRoleId");     } else {    sql.setString("devPartyRoleId", so.getDevPartyRoleId());    }       if (StringUtil.isBlank(so.getDevPartyRoleTypeId())) {      sql.setNullLong("devPartyRoleTypeId");     } else {    sql.setLong("devPartyRoleTypeId", so.getDevPartyRoleTypeId());    }       if (StringUtil.isBlank(so.getExtSoNbr())) {      sql.setNullString("extSoNbr");     } else {    sql.setString("extSoNbr", so.getExtSoNbr());    }       if (StringUtil.isBlank(so.getExtWoNbr())) {      sql.setNullLong("extWoNbr");     } else {    sql.setLong("extWoNbr", so.getExtWoNbr());    }       if (StringUtil.isBlank(so.getFailReasonId())) {      sql.setNullString("failReasonId");     } else {    sql.setString("failReasonId", so.getFailReasonId());    }       if (StringUtil.isBlank(so.getFromProdId())) {      sql.setNullString("fromProdId");     } else {    sql.setString("fromProdId", so.getFromProdId());    }       if (StringUtil.isBlank(so.getFromServInstId())) {      sql.setNullLong("fromServInstId");     } else {    sql.setLong("fromServInstId", so.getFromServInstId());    }       if (StringUtil.isBlank(so.getGroupFlag())) {      sql.setNullString("groupFlag");     } else {    sql.setString("groupFlag", so.getGroupFlag());    }       if (StringUtil.isBlank(so.getHastenFlag())) {      sql.setNullString("hastenFlag");     } else {    sql.setString("hastenFlag", so.getHastenFlag());    }       if (StringUtil.isBlank(so.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", so.getLocalNetId());    }       if (StringUtil.isBlank(so.getMsPlanName())) {      sql.setNullString("msPlanName");     } else {    sql.setString("msPlanName", so.getMsPlanName());    }       if (StringUtil.isBlank(so.getMsPlanTargetId())) {      sql.setNullLong("msPlanTargetId");     } else {    sql.setLong("msPlanTargetId", so.getMsPlanTargetId());    }       if (StringUtil.isBlank(so.getMsTaskId())) {      sql.setNullLong("msTaskId");     } else {    sql.setLong("msTaskId", so.getMsTaskId());    }       if (StringUtil.isBlank(so.getMsTaskName())) {      sql.setNullString("msTaskName");     } else {    sql.setString("msTaskName", so.getMsTaskName());    }       if (StringUtil.isBlank(so.getMsTaskPrjId())) {      sql.setNullLong("msTaskPrjId");     } else {    sql.setLong("msTaskPrjId", so.getMsTaskPrjId());    }       if (StringUtil.isBlank(so.getMsTaskPrjName())) {      sql.setNullString("msTaskPrjName");     } else {    sql.setString("msTaskPrjName", so.getMsTaskPrjName());    }       if (StringUtil.isBlank(so.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", so.getNoFlag());    }       if (StringUtil.isBlank(so.getNSoNbr())) {      sql.setNullString("nSoNbr");     } else {    sql.setString("nSoNbr", so.getNSoNbr());    }       if (StringUtil.isBlank(so.getOldSoNbr())) {      sql.setNullString("oldSoNbr");     } else {    sql.setString("oldSoNbr", so.getOldSoNbr());    }       if (StringUtil.isBlank(so.getOriSoNbr())) {      sql.setNullString("oriSoNbr");     } else {    sql.setString("oriSoNbr", so.getOriSoNbr());    }       if (StringUtil.isBlank(so.getOvertimeId())) {      sql.setNullString("overtimeId");     } else {    sql.setString("overtimeId", so.getOvertimeId());    }       if (StringUtil.isBlank(so.getPartyRoleId())) {      sql.setNullString("partyRoleId");     } else {    sql.setString("partyRoleId", so.getPartyRoleId());    }       if (StringUtil.isBlank(so.getPartyRoleTypeId())) {      sql.setNullLong("partyRoleTypeId");     } else {    sql.setLong("partyRoleTypeId", so.getPartyRoleTypeId());    }       if (StringUtil.isBlank(so.getPayManName())) {      sql.setNullString("payManName");     } else {    sql.setString("payManName", so.getPayManName());    }       if (StringUtil.isBlank(so.getPayManTeleNbr())) {      sql.setNullString("payManTeleNbr");     } else {    sql.setString("payManTeleNbr", so.getPayManTeleNbr());    }       if (StringUtil.isBlank(so.getPaySts())) {      sql.setNullString("paySts");     } else {    sql.setString("paySts", so.getPaySts());    }       if (StringUtil.isBlank(so.getPresentFlag())) {      sql.setNullString("presentFlag");     } else {    sql.setString("presentFlag", so.getPresentFlag());    }    if (so.getPreAlarmDate() == null) {      sql.setNullDate("preAlarmDate");     } else {    sql.setTimestamp("preAlarmDate", so.getPreAlarmDate());    }       if (StringUtil.isBlank(so.getPriority())) {      sql.setNullString("priority");     } else {    sql.setString("priority", so.getPriority());    }       if (StringUtil.isBlank(so.getProcessId())) {      sql.setNullLong("processId");     } else {    sql.setLong("processId", so.getProcessId());    }       if (StringUtil.isBlank(so.getProcInstId())) {      sql.setNullLong("procInstId");     } else {    sql.setLong("procInstId", so.getProcInstId());    }       if (StringUtil.isBlank(so.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", so.getProdId());    }       if (StringUtil.isBlank(so.getRealTimeFlag())) {      sql.setNullString("realTimeFlag");     } else {    sql.setString("realTimeFlag", so.getRealTimeFlag());    }       if (StringUtil.isBlank(so.getReasonId())) {      sql.setNullLong("reasonId");     } else {    sql.setLong("reasonId", so.getReasonId());    }       if (StringUtil.isBlank(so.getReasonInfo())) {      sql.setNullString("reasonInfo");     } else {    sql.setString("reasonInfo", so.getReasonInfo());    }       if (StringUtil.isBlank(so.getRelaExtWoNbr())) {      sql.setNullLong("relaExtWoNbr");     } else {    sql.setLong("relaExtWoNbr", so.getRelaExtWoNbr());    }       if (StringUtil.isBlank(so.getRelaSoNbr())) {      sql.setNullString("relaSoNbr");     } else {    sql.setString("relaSoNbr", so.getRelaSoNbr());    }       if (StringUtil.isBlank(so.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", so.getRemarks());    }    if (so.getReqCompDate() == null) {      sql.setNullDate("reqCompDate");     } else {    sql.setTimestamp("reqCompDate", so.getReqCompDate());    }       if (StringUtil.isBlank(so.getResSystem())) {      sql.setNullString("resSystem");     } else {    sql.setString("resSystem", so.getResSystem());    }       if (StringUtil.isBlank(so.getServDeptId())) {      sql.setNullLong("servDeptId");     } else {    sql.setLong("servDeptId", so.getServDeptId());    }       if (StringUtil.isBlank(so.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", so.getServInstId());    }       if (StringUtil.isBlank(so.getSoBatchId())) {      sql.setNullLong("soBatchId");     } else {    sql.setLong("soBatchId", so.getSoBatchId());    }       if (StringUtil.isBlank(so.getSoCat())) {      sql.setNullString("soCat");     } else {    sql.setString("soCat", so.getSoCat());    }    if (so.getSoLockDate() == null) {      sql.setNullDate("soLockDate");     } else {    sql.setTimestamp("soLockDate", so.getSoLockDate());    }       if (StringUtil.isBlank(so.getSoLockSts())) {      sql.setNullString("soLockSts");     } else {    sql.setString("soLockSts", so.getSoLockSts());    }       if (StringUtil.isBlank(so.getSoMeth())) {      sql.setNullString("soMeth");     } else {    sql.setString("soMeth", so.getSoMeth());    }       if (StringUtil.isBlank(so.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", so.getSoNbr());    }       if (StringUtil.isBlank(so.getSoSeq())) {      sql.setNullLong("soSeq");     } else {    sql.setLong("soSeq", so.getSoSeq());    }       if (StringUtil.isBlank(so.getSoStaffId())) {      sql.setNullString("soStaffId");     } else {    sql.setString("soStaffId", so.getSoStaffId());    }       if (StringUtil.isBlank(so.getSoStaffName())) {      sql.setNullString("soStaffName");     } else {    sql.setString("soStaffName", so.getSoStaffName());    }       if (StringUtil.isBlank(so.getSoSts())) {      sql.setNullString("soSts");     } else {    sql.setString("soSts", so.getSoSts());    }    if (so.getSoStsDate() == null) {      sql.setNullDate("soStsDate");     } else {    sql.setTimestamp("soStsDate", so.getSoStsDate());    }       if (StringUtil.isBlank(so.getSoTemplateId())) {      sql.setNullString("soTemplateId");     } else {    sql.setString("soTemplateId", so.getSoTemplateId());    }       if (StringUtil.isBlank(so.getSoType())) {      sql.setNullString("soType");     } else {    sql.setString("soType", so.getSoType());    }       if (StringUtil.isBlank(so.getSoWorkAreaId())) {      sql.setNullString("soWorkAreaId");     } else {    sql.setString("soWorkAreaId", so.getSoWorkAreaId());    }       if (StringUtil.isBlank(so.getSoWorkAreaName())) {      sql.setNullString("soWorkAreaName");     } else {    sql.setString("soWorkAreaName", so.getSoWorkAreaName());    }       if (StringUtil.isBlank(so.getSpecialFlag())) {      sql.setNullString("specialFlag");     } else {    sql.setString("specialFlag", so.getSpecialFlag());    }       if (StringUtil.isBlank(so.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", so.getSts());    }    if (so.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", so.getStsDate());    }       if (StringUtil.isBlank(so.getTempFlag())) {      sql.setNullString("tempFlag");     } else {    sql.setString("tempFlag", so.getTempFlag());    }       if (StringUtil.isBlank(so.getTradeId())) {      sql.setNullString("tradeId");     } else {    sql.setString("tradeId", so.getTradeId());    }       if (StringUtil.isBlank(so.getTradeName())) {      sql.setNullString("tradeName");     } else {    sql.setString("tradeName", so.getTradeName());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoSVO so=(SoSVO) vo;    if (StringUtil.isBlank(so.getSoNbr())) {       throw new AppException("100002", "缺少对象的主键！");      }    if (StringUtil.isBlank(so.getSoSeq())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO WHERE 1=1  ");sql.append(" and SO_NBR=:soNbr");sql.setString("soNbr", so.getSoNbr()); sql.append(" and SO_SEQ=:soSeq");sql.setLong("soSeq", so.getSoSeq());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoSVO so=(SoSVO) vo;       }}
