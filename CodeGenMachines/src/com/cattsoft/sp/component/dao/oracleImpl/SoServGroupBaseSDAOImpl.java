package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sp.component.dao.ISoServGroupBaseSDAO;import com.cattsoft.sp.vo.SoServGroupBaseSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SoServGroupBaseSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SoServGroupBaseSDAOImpl implements ISoServGroupBaseSDAO{    private static Logger log = Logger.getLogger(SoServGroupBaseSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_SERV_GROUP_BASE(ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_NAME,GROUP_NBR,GROUP_TYPE,INTERVAL_GROUP_NUM,LOCAL_NET_ID,MAX_MEMBER,MAX_PAY,NO_FLAG,SERV_INST_ID,SO_NBR,SO_SERV_GROUP_BASE_ID,STS,STS_DATE)");sql.append(" VALUES (:actType,:effDate,:expDate,:groupName,:groupNbr,:groupType,:intervalGroupNum,:localNetId,:maxMember,:maxPay,:noFlag,:servInstId,:soNbr,:soServGroupBaseId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(soServGroupBase.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soServGroupBase.getActType());    }    if (soServGroupBase.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soServGroupBase.getEffDate());    }    if (soServGroupBase.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soServGroupBase.getExpDate());    }       if (StringUtil.isBlank(soServGroupBase.getGroupName())) {      sql.setNullString("groupName");     } else {    sql.setString("groupName", soServGroupBase.getGroupName());    }       if (StringUtil.isBlank(soServGroupBase.getGroupNbr())) {      sql.setNullString("groupNbr");     } else {    sql.setString("groupNbr", soServGroupBase.getGroupNbr());    }       if (StringUtil.isBlank(soServGroupBase.getGroupType())) {      sql.setNullString("groupType");     } else {    sql.setString("groupType", soServGroupBase.getGroupType());    }       if (StringUtil.isBlank(soServGroupBase.getIntervalGroupNum())) {      sql.setNullLong("intervalGroupNum");     } else {    sql.setLong("intervalGroupNum", soServGroupBase.getIntervalGroupNum());    }       if (StringUtil.isBlank(soServGroupBase.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soServGroupBase.getLocalNetId());    }       if (StringUtil.isBlank(soServGroupBase.getMaxMember())) {      sql.setNullLong("maxMember");     } else {    sql.setLong("maxMember", soServGroupBase.getMaxMember());    }       if (StringUtil.isBlank(soServGroupBase.getMaxPay())) {      sql.setNullLong("maxPay");     } else {    sql.setLong("maxPay", soServGroupBase.getMaxPay());    }       if (StringUtil.isBlank(soServGroupBase.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soServGroupBase.getNoFlag());    }       if (StringUtil.isBlank(soServGroupBase.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soServGroupBase.getServInstId());    }       if (StringUtil.isBlank(soServGroupBase.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soServGroupBase.getSoNbr());    }       if (StringUtil.isBlank(soServGroupBase.getSoServGroupBaseId())) {      sql.setNullLong("soServGroupBaseId");     } else {    sql.setLong("soServGroupBaseId", soServGroupBase.getSoServGroupBaseId());    }       if (StringUtil.isBlank(soServGroupBase.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soServGroupBase.getSts());    }    if (soServGroupBase.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soServGroupBase.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;       Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_NAME,GROUP_NBR,GROUP_TYPE,INTERVAL_GROUP_NUM,LOCAL_NET_ID,MAX_MEMBER,MAX_PAY,NO_FLAG,SERV_INST_ID,SO_NBR,SO_SERV_GROUP_BASE_ID,STS,STS_DATE FROM SO_SERV_GROUP_BASE WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      soServGroupBase =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           soServGroupBase = new SoServGroupBaseSVO();           soServGroupBase.setActType(rs.getString("ACT_TYPE"));           soServGroupBase.setEffDate(rs.getTimestamp("EFF_DATE"));           soServGroupBase.setExpDate(rs.getTimestamp("EXP_DATE"));           soServGroupBase.setGroupName(rs.getString("GROUP_NAME"));           soServGroupBase.setGroupNbr(rs.getString("GROUP_NBR"));           soServGroupBase.setGroupType(rs.getString("GROUP_TYPE"));           soServGroupBase.setIntervalGroupNum(rs.getString("INTERVAL_GROUP_NUM"));           soServGroupBase.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soServGroupBase.setMaxMember(rs.getString("MAX_MEMBER"));           soServGroupBase.setMaxPay(rs.getString("MAX_PAY"));           soServGroupBase.setNoFlag(rs.getString("NO_FLAG"));           soServGroupBase.setServInstId(rs.getString("SERV_INST_ID"));           soServGroupBase.setSoNbr(rs.getString("SO_NBR"));           soServGroupBase.setSoServGroupBaseId(rs.getString("SO_SERV_GROUP_BASE_ID"));           soServGroupBase.setSts(rs.getString("STS"));           soServGroupBase.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return soServGroupBase;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_NAME,GROUP_NBR,GROUP_TYPE,INTERVAL_GROUP_NUM,LOCAL_NET_ID,MAX_MEMBER,MAX_PAY,NO_FLAG,SERV_INST_ID,SO_NBR,SO_SERV_GROUP_BASE_ID,STS,STS_DATE FROM SO_SERV_GROUP_BASE WHERE 1=1 ");     try {if (soServGroupBase.getFlagActType() == 1) {      if (StringUtil.isBlank(soServGroupBase.getActType())) {             sql.append(" and ACT_TYPE is null ");          }      else{             sql.append(" and ACT_TYPE=:actType");             sql.setString("actType", soServGroupBase.getActType());          }   } if (soServGroupBase.getFlagEffDate() == 1) {      if (soServGroupBase.getEffDate() == null) {             sql.append(" and EFF_DATE is null ");          }      else{             sql.append(" and EFF_DATE=:effDate");             sql.setTimestamp("effDate", soServGroupBase.getEffDate());          }   } if (soServGroupBase.getFlagExpDate() == 1) {      if (soServGroupBase.getExpDate() == null) {             sql.append(" and EXP_DATE is null ");          }      else{             sql.append(" and EXP_DATE=:expDate");             sql.setTimestamp("expDate", soServGroupBase.getExpDate());          }   } if (soServGroupBase.getFlagGroupName() == 1) {      if (StringUtil.isBlank(soServGroupBase.getGroupName())) {             sql.append(" and GROUP_NAME is null ");          }      else{             sql.append(" and GROUP_NAME=:groupName");             sql.setString("groupName", soServGroupBase.getGroupName());          }   } if (soServGroupBase.getFlagGroupNbr() == 1) {      if (StringUtil.isBlank(soServGroupBase.getGroupNbr())) {             sql.append(" and GROUP_NBR is null ");          }      else{             sql.append(" and GROUP_NBR=:groupNbr");             sql.setString("groupNbr", soServGroupBase.getGroupNbr());          }   } if (soServGroupBase.getFlagGroupType() == 1) {      if (StringUtil.isBlank(soServGroupBase.getGroupType())) {             sql.append(" and GROUP_TYPE is null ");          }      else{             sql.append(" and GROUP_TYPE=:groupType");             sql.setString("groupType", soServGroupBase.getGroupType());          }   } if (soServGroupBase.getFlagIntervalGroupNum() == 1) {      if (StringUtil.isBlank(soServGroupBase.getIntervalGroupNum())) {             sql.append(" and INTERVAL_GROUP_NUM is null ");          }      else{             sql.append(" and INTERVAL_GROUP_NUM=:intervalGroupNum");             sql.setLong("intervalGroupNum", soServGroupBase.getIntervalGroupNum());          }   } if (soServGroupBase.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(soServGroupBase.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", soServGroupBase.getLocalNetId());          }   } if (soServGroupBase.getFlagMaxMember() == 1) {      if (StringUtil.isBlank(soServGroupBase.getMaxMember())) {             sql.append(" and MAX_MEMBER is null ");          }      else{             sql.append(" and MAX_MEMBER=:maxMember");             sql.setLong("maxMember", soServGroupBase.getMaxMember());          }   } if (soServGroupBase.getFlagMaxPay() == 1) {      if (StringUtil.isBlank(soServGroupBase.getMaxPay())) {             sql.append(" and MAX_PAY is null ");          }      else{             sql.append(" and MAX_PAY=:maxPay");             sql.setLong("maxPay", soServGroupBase.getMaxPay());          }   } if (soServGroupBase.getFlagNoFlag() == 1) {      if (StringUtil.isBlank(soServGroupBase.getNoFlag())) {             sql.append(" and NO_FLAG is null ");          }      else{             sql.append(" and NO_FLAG=:noFlag");             sql.setString("noFlag", soServGroupBase.getNoFlag());          }   } if (soServGroupBase.getFlagServInstId() == 1) {      if (StringUtil.isBlank(soServGroupBase.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", soServGroupBase.getServInstId());          }   } if (soServGroupBase.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(soServGroupBase.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", soServGroupBase.getSoNbr());          }   } if (soServGroupBase.getFlagSoServGroupBaseId() == 1) {      if (StringUtil.isBlank(soServGroupBase.getSoServGroupBaseId())) {             sql.append(" and SO_SERV_GROUP_BASE_ID is null ");          }      else{             sql.append(" and SO_SERV_GROUP_BASE_ID=:soServGroupBaseId");             sql.setLong("soServGroupBaseId", soServGroupBase.getSoServGroupBaseId());          }   } if (soServGroupBase.getFlagSts() == 1) {      if (StringUtil.isBlank(soServGroupBase.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", soServGroupBase.getSts());          }   } if (soServGroupBase.getFlagStsDate() == 1) {      if (soServGroupBase.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", soServGroupBase.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           soServGroupBase = new SoServGroupBaseSVO();           soServGroupBase.setActType(rs.getString("ACT_TYPE"));           soServGroupBase.setEffDate(rs.getTimestamp("EFF_DATE"));           soServGroupBase.setExpDate(rs.getTimestamp("EXP_DATE"));           soServGroupBase.setGroupName(rs.getString("GROUP_NAME"));           soServGroupBase.setGroupNbr(rs.getString("GROUP_NBR"));           soServGroupBase.setGroupType(rs.getString("GROUP_TYPE"));           soServGroupBase.setIntervalGroupNum(rs.getString("INTERVAL_GROUP_NUM"));           soServGroupBase.setLocalNetId(rs.getString("LOCAL_NET_ID"));           soServGroupBase.setMaxMember(rs.getString("MAX_MEMBER"));           soServGroupBase.setMaxPay(rs.getString("MAX_PAY"));           soServGroupBase.setNoFlag(rs.getString("NO_FLAG"));           soServGroupBase.setServInstId(rs.getString("SERV_INST_ID"));           soServGroupBase.setSoNbr(rs.getString("SO_NBR"));           soServGroupBase.setSoServGroupBaseId(rs.getString("SO_SERV_GROUP_BASE_ID"));           soServGroupBase.setSts(rs.getString("STS"));           soServGroupBase.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(soServGroupBase);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SO_SERV_GROUP_BASE SET ");     try {if (soServGroupBase.getFlagActType() == 1) {sql.append("ACT_TYPE=:actType,"); sql.setString("actType", soServGroupBase.getActType()); } if (soServGroupBase.getFlagEffDate() == 1) {sql.append("EFF_DATE=:effDate,"); sql.setTimestamp("effDate", soServGroupBase.getEffDate()); } if (soServGroupBase.getFlagExpDate() == 1) {sql.append("EXP_DATE=:expDate,"); sql.setTimestamp("expDate", soServGroupBase.getExpDate()); } if (soServGroupBase.getFlagGroupName() == 1) {sql.append("GROUP_NAME=:groupName,"); sql.setString("groupName", soServGroupBase.getGroupName()); } if (soServGroupBase.getFlagGroupNbr() == 1) {sql.append("GROUP_NBR=:groupNbr,"); sql.setString("groupNbr", soServGroupBase.getGroupNbr()); } if (soServGroupBase.getFlagGroupType() == 1) {sql.append("GROUP_TYPE=:groupType,"); sql.setString("groupType", soServGroupBase.getGroupType()); } if (soServGroupBase.getFlagIntervalGroupNum() == 1) {sql.append("INTERVAL_GROUP_NUM=:intervalGroupNum,");sql.setLong("intervalGroupNum", soServGroupBase.getIntervalGroupNum()); } if (soServGroupBase.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", soServGroupBase.getLocalNetId()); } if (soServGroupBase.getFlagMaxMember() == 1) {sql.append("MAX_MEMBER=:maxMember,");sql.setLong("maxMember", soServGroupBase.getMaxMember()); } if (soServGroupBase.getFlagMaxPay() == 1) {sql.append("MAX_PAY=:maxPay,");sql.setLong("maxPay", soServGroupBase.getMaxPay()); } if (soServGroupBase.getFlagNoFlag() == 1) {sql.append("NO_FLAG=:noFlag,"); sql.setString("noFlag", soServGroupBase.getNoFlag()); } if (soServGroupBase.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", soServGroupBase.getServInstId()); } if (soServGroupBase.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", soServGroupBase.getSoNbr()); } if (soServGroupBase.getFlagSoServGroupBaseId() == 1) {sql.append("SO_SERV_GROUP_BASE_ID=:soServGroupBaseId,");sql.setLong("soServGroupBaseId", soServGroupBase.getSoServGroupBaseId()); } if (soServGroupBase.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", soServGroupBase.getSts()); } if (soServGroupBase.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", soServGroupBase.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SO_SERV_GROUP_BASE(ACT_TYPE,EFF_DATE,EXP_DATE,GROUP_NAME,GROUP_NBR,GROUP_TYPE,INTERVAL_GROUP_NUM,LOCAL_NET_ID,MAX_MEMBER,MAX_PAY,NO_FLAG,SERV_INST_ID,SO_NBR,SO_SERV_GROUP_BASE_ID,STS,STS_DATE)");sql.append(" VALUES (:actType,:effDate,:expDate,:groupName,:groupNbr,:groupType,:intervalGroupNum,:localNetId,:maxMember,:maxPay,:noFlag,:servInstId,:soNbr,:soServGroupBaseId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) list.get(i);         if (soServGroupBase== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(soServGroupBase.getActType())) {      sql.setNullString("actType");     } else {    sql.setString("actType", soServGroupBase.getActType());    }    if (soServGroupBase.getEffDate() == null) {      sql.setNullDate("effDate");     } else {    sql.setTimestamp("effDate", soServGroupBase.getEffDate());    }    if (soServGroupBase.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", soServGroupBase.getExpDate());    }       if (StringUtil.isBlank(soServGroupBase.getGroupName())) {      sql.setNullString("groupName");     } else {    sql.setString("groupName", soServGroupBase.getGroupName());    }       if (StringUtil.isBlank(soServGroupBase.getGroupNbr())) {      sql.setNullString("groupNbr");     } else {    sql.setString("groupNbr", soServGroupBase.getGroupNbr());    }       if (StringUtil.isBlank(soServGroupBase.getGroupType())) {      sql.setNullString("groupType");     } else {    sql.setString("groupType", soServGroupBase.getGroupType());    }       if (StringUtil.isBlank(soServGroupBase.getIntervalGroupNum())) {      sql.setNullLong("intervalGroupNum");     } else {    sql.setLong("intervalGroupNum", soServGroupBase.getIntervalGroupNum());    }       if (StringUtil.isBlank(soServGroupBase.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", soServGroupBase.getLocalNetId());    }       if (StringUtil.isBlank(soServGroupBase.getMaxMember())) {      sql.setNullLong("maxMember");     } else {    sql.setLong("maxMember", soServGroupBase.getMaxMember());    }       if (StringUtil.isBlank(soServGroupBase.getMaxPay())) {      sql.setNullLong("maxPay");     } else {    sql.setLong("maxPay", soServGroupBase.getMaxPay());    }       if (StringUtil.isBlank(soServGroupBase.getNoFlag())) {      sql.setNullString("noFlag");     } else {    sql.setString("noFlag", soServGroupBase.getNoFlag());    }       if (StringUtil.isBlank(soServGroupBase.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", soServGroupBase.getServInstId());    }       if (StringUtil.isBlank(soServGroupBase.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", soServGroupBase.getSoNbr());    }       if (StringUtil.isBlank(soServGroupBase.getSoServGroupBaseId())) {      sql.setNullLong("soServGroupBaseId");     } else {    sql.setLong("soServGroupBaseId", soServGroupBase.getSoServGroupBaseId());    }       if (StringUtil.isBlank(soServGroupBase.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", soServGroupBase.getSts());    }    if (soServGroupBase.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", soServGroupBase.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SO_SERV_GROUP_BASE WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SoServGroupBaseSVO soServGroupBase=(SoServGroupBaseSVO) vo;       }}
