package com.cattsoft.im.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.im.component.dao.IBillStopHandleSDAO;import com.cattsoft.im.vo.BillStopHandleSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法BillStopHandleSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class BillStopHandleSDAOImpl implements IBillStopHandleSDAO{    private static Logger log = Logger.getLogger(BillStopHandleSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;    if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO BILL_STOP_HANDLE(AREA_ID,BILL_STOP_DATA_ID,BILL_STOP_HANDLE_ID,HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,RAMARKS,STAFF_ID,WORK_AREA_ID)");sql.append(" VALUES (:areaId,:billStopDataId,:billStopHandleId,:handleDate,:handleTypeId,:localNetId,:ramarks,:staffId,:workAreaId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(billStopHandle.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", billStopHandle.getAreaId());    }       if (StringUtil.isBlank(billStopHandle.getBillStopDataId())) {      sql.setNullLong("billStopDataId");     } else {    sql.setLong("billStopDataId", billStopHandle.getBillStopDataId());    }       if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {      sql.setNullLong("billStopHandleId");     } else {    sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());    }    if (billStopHandle.getHandleDate() == null) {      sql.setNullDate("handleDate");     } else {    sql.setTimestamp("handleDate", billStopHandle.getHandleDate());    }       if (StringUtil.isBlank(billStopHandle.getHandleTypeId())) {      sql.setNullLong("handleTypeId");     } else {    sql.setLong("handleTypeId", billStopHandle.getHandleTypeId());    }       if (StringUtil.isBlank(billStopHandle.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", billStopHandle.getLocalNetId());    }       if (StringUtil.isBlank(billStopHandle.getRamarks())) {      sql.setNullString("ramarks");     } else {    sql.setString("ramarks", billStopHandle.getRamarks());    }       if (StringUtil.isBlank(billStopHandle.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", billStopHandle.getStaffId());    }       if (StringUtil.isBlank(billStopHandle.getWorkAreaId())) {      sql.setNullLong("workAreaId");     } else {    sql.setLong("workAreaId", billStopHandle.getWorkAreaId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;    if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT AREA_ID,BILL_STOP_DATA_ID,BILL_STOP_HANDLE_ID,HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,RAMARKS,STAFF_ID,WORK_AREA_ID FROM BILL_STOP_HANDLE WHERE 1=1  ");sql.append(" and BILL_STOP_HANDLE_ID=:billStopHandleId");sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      billStopHandle =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           billStopHandle = new BillStopHandleSVO();           billStopHandle.setAreaId(rs.getString("AREA_ID"));           billStopHandle.setBillStopDataId(rs.getString("BILL_STOP_DATA_ID"));           billStopHandle.setBillStopHandleId(rs.getString("BILL_STOP_HANDLE_ID"));           billStopHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));           billStopHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));           billStopHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));           billStopHandle.setRamarks(rs.getString("RAMARKS"));           billStopHandle.setStaffId(rs.getString("STAFF_ID"));           billStopHandle.setWorkAreaId(rs.getString("WORK_AREA_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return billStopHandle;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT AREA_ID,BILL_STOP_DATA_ID,BILL_STOP_HANDLE_ID,HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,RAMARKS,STAFF_ID,WORK_AREA_ID FROM BILL_STOP_HANDLE WHERE 1=1 ");     try {if (billStopHandle.getFlagAreaId() == 1) {      if (StringUtil.isBlank(billStopHandle.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", billStopHandle.getAreaId());          }   } if (billStopHandle.getFlagBillStopDataId() == 1) {      if (StringUtil.isBlank(billStopHandle.getBillStopDataId())) {             sql.append(" and BILL_STOP_DATA_ID is null ");          }      else{             sql.append(" and BILL_STOP_DATA_ID=:billStopDataId");             sql.setLong("billStopDataId", billStopHandle.getBillStopDataId());          }   } if (billStopHandle.getFlagBillStopHandleId() == 1) {      if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {             sql.append(" and BILL_STOP_HANDLE_ID is null ");          }      else{             sql.append(" and BILL_STOP_HANDLE_ID=:billStopHandleId");             sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());          }   } if (billStopHandle.getFlagHandleDate() == 1) {      if (billStopHandle.getHandleDate() == null) {             sql.append(" and HANDLE_DATE is null ");          }      else{             sql.append(" and HANDLE_DATE=:handleDate");             sql.setTimestamp("handleDate", billStopHandle.getHandleDate());          }   } if (billStopHandle.getFlagHandleTypeId() == 1) {      if (StringUtil.isBlank(billStopHandle.getHandleTypeId())) {             sql.append(" and HANDLE_TYPE_ID is null ");          }      else{             sql.append(" and HANDLE_TYPE_ID=:handleTypeId");             sql.setLong("handleTypeId", billStopHandle.getHandleTypeId());          }   } if (billStopHandle.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(billStopHandle.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", billStopHandle.getLocalNetId());          }   } if (billStopHandle.getFlagRamarks() == 1) {      if (StringUtil.isBlank(billStopHandle.getRamarks())) {             sql.append(" and RAMARKS is null ");          }      else{             sql.append(" and RAMARKS=:ramarks");             sql.setString("ramarks", billStopHandle.getRamarks());          }   } if (billStopHandle.getFlagStaffId() == 1) {      if (StringUtil.isBlank(billStopHandle.getStaffId())) {             sql.append(" and STAFF_ID is null ");          }      else{             sql.append(" and STAFF_ID=:staffId");             sql.setLong("staffId", billStopHandle.getStaffId());          }   } if (billStopHandle.getFlagWorkAreaId() == 1) {      if (StringUtil.isBlank(billStopHandle.getWorkAreaId())) {             sql.append(" and WORK_AREA_ID is null ");          }      else{             sql.append(" and WORK_AREA_ID=:workAreaId");             sql.setLong("workAreaId", billStopHandle.getWorkAreaId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           billStopHandle = new BillStopHandleSVO();           billStopHandle.setAreaId(rs.getString("AREA_ID"));           billStopHandle.setBillStopDataId(rs.getString("BILL_STOP_DATA_ID"));           billStopHandle.setBillStopHandleId(rs.getString("BILL_STOP_HANDLE_ID"));           billStopHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));           billStopHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));           billStopHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));           billStopHandle.setRamarks(rs.getString("RAMARKS"));           billStopHandle.setStaffId(rs.getString("STAFF_ID"));           billStopHandle.setWorkAreaId(rs.getString("WORK_AREA_ID"));               res.add(billStopHandle);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;    if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE BILL_STOP_HANDLE SET ");     try {if (billStopHandle.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", billStopHandle.getAreaId()); } if (billStopHandle.getFlagBillStopDataId() == 1) {sql.append("BILL_STOP_DATA_ID=:billStopDataId,");sql.setLong("billStopDataId", billStopHandle.getBillStopDataId()); } if (billStopHandle.getFlagHandleDate() == 1) {sql.append("HANDLE_DATE=:handleDate,"); sql.setTimestamp("handleDate", billStopHandle.getHandleDate()); } if (billStopHandle.getFlagHandleTypeId() == 1) {sql.append("HANDLE_TYPE_ID=:handleTypeId,");sql.setLong("handleTypeId", billStopHandle.getHandleTypeId()); } if (billStopHandle.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", billStopHandle.getLocalNetId()); } if (billStopHandle.getFlagRamarks() == 1) {sql.append("RAMARKS=:ramarks,"); sql.setString("ramarks", billStopHandle.getRamarks()); } if (billStopHandle.getFlagStaffId() == 1) {sql.append("STAFF_ID=:staffId,");sql.setLong("staffId", billStopHandle.getStaffId()); } if (billStopHandle.getFlagWorkAreaId() == 1) {sql.append("WORK_AREA_ID=:workAreaId,");sql.setLong("workAreaId", billStopHandle.getWorkAreaId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and BILL_STOP_HANDLE_ID=:billStopHandleId");sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO BILL_STOP_HANDLE(AREA_ID,BILL_STOP_DATA_ID,BILL_STOP_HANDLE_ID,HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,RAMARKS,STAFF_ID,WORK_AREA_ID)");sql.append(" VALUES (:areaId,:billStopDataId,:billStopHandleId,:handleDate,:handleTypeId,:localNetId,:ramarks,:staffId,:workAreaId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       BillStopHandleSVO billStopHandle=(BillStopHandleSVO) list.get(i);         if (billStopHandle== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(billStopHandle.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", billStopHandle.getAreaId());    }       if (StringUtil.isBlank(billStopHandle.getBillStopDataId())) {      sql.setNullLong("billStopDataId");     } else {    sql.setLong("billStopDataId", billStopHandle.getBillStopDataId());    }       if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {      sql.setNullLong("billStopHandleId");     } else {    sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());    }    if (billStopHandle.getHandleDate() == null) {      sql.setNullDate("handleDate");     } else {    sql.setTimestamp("handleDate", billStopHandle.getHandleDate());    }       if (StringUtil.isBlank(billStopHandle.getHandleTypeId())) {      sql.setNullLong("handleTypeId");     } else {    sql.setLong("handleTypeId", billStopHandle.getHandleTypeId());    }       if (StringUtil.isBlank(billStopHandle.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", billStopHandle.getLocalNetId());    }       if (StringUtil.isBlank(billStopHandle.getRamarks())) {      sql.setNullString("ramarks");     } else {    sql.setString("ramarks", billStopHandle.getRamarks());    }       if (StringUtil.isBlank(billStopHandle.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", billStopHandle.getStaffId());    }       if (StringUtil.isBlank(billStopHandle.getWorkAreaId())) {      sql.setNullLong("workAreaId");     } else {    sql.setLong("workAreaId", billStopHandle.getWorkAreaId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;    if (StringUtil.isBlank(billStopHandle.getBillStopHandleId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM BILL_STOP_HANDLE WHERE 1=1  ");sql.append(" and BILL_STOP_HANDLE_ID=:billStopHandleId");sql.setLong("billStopHandleId", billStopHandle.getBillStopHandleId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     BillStopHandleSVO billStopHandle=(BillStopHandleSVO) vo;       }}
