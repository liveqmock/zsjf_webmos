package com.cattsoft.pm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pm.component.dao.IProdNetSDAO;import com.cattsoft.pm.vo.ProdNetSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法ProdNetSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class ProdNetSDAOImpl implements IProdNetSDAO{    private static Logger log = Logger.getLogger(ProdNetSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ProdNetSVO prodNet=(ProdNetSVO) vo;    if (StringUtil.isBlank(prodNet.getProdNetId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO PROD_NET(NET_PLATFORM,PLATFORM_NAME,PROD_ID,PROD_NAME,PROD_NET_ID)");sql.append(" VALUES (:netPlatform,:platformName,:prodId,:prodName,:prodNetId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(prodNet.getNetPlatform())) {      sql.setNullString("netPlatform");     } else {    sql.setString("netPlatform", prodNet.getNetPlatform());    }       if (StringUtil.isBlank(prodNet.getPlatformName())) {      sql.setNullString("platformName");     } else {    sql.setString("platformName", prodNet.getPlatformName());    }       if (StringUtil.isBlank(prodNet.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", prodNet.getProdId());    }       if (StringUtil.isBlank(prodNet.getProdName())) {      sql.setNullString("prodName");     } else {    sql.setString("prodName", prodNet.getProdName());    }       if (StringUtil.isBlank(prodNet.getProdNetId())) {      sql.setNullLong("prodNetId");     } else {    sql.setLong("prodNetId", prodNet.getProdNetId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ProdNetSVO prodNet=(ProdNetSVO) vo;    if (StringUtil.isBlank(prodNet.getProdNetId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT NET_PLATFORM,PLATFORM_NAME,PROD_ID,PROD_NAME,PROD_NET_ID FROM PROD_NET WHERE 1=1  ");sql.append(" and PROD_NET_ID=:prodNetId");sql.setLong("prodNetId", prodNet.getProdNetId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      prodNet =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           prodNet = new ProdNetSVO();           prodNet.setNetPlatform(rs.getString("NET_PLATFORM"));           prodNet.setPlatformName(rs.getString("PLATFORM_NAME"));           prodNet.setProdId(rs.getString("PROD_ID"));           prodNet.setProdName(rs.getString("PROD_NAME"));           prodNet.setProdNetId(rs.getString("PROD_NET_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return prodNet;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       ProdNetSVO prodNet=(ProdNetSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT NET_PLATFORM,PLATFORM_NAME,PROD_ID,PROD_NAME,PROD_NET_ID FROM PROD_NET WHERE 1=1 ");     try {if (prodNet.getFlagNetPlatform() == 1) {      if (StringUtil.isBlank(prodNet.getNetPlatform())) {             sql.append(" and NET_PLATFORM is null ");          }      else{             sql.append(" and NET_PLATFORM=:netPlatform");             sql.setString("netPlatform", prodNet.getNetPlatform());          }   } if (prodNet.getFlagPlatformName() == 1) {      if (StringUtil.isBlank(prodNet.getPlatformName())) {             sql.append(" and PLATFORM_NAME is null ");          }      else{             sql.append(" and PLATFORM_NAME=:platformName");             sql.setString("platformName", prodNet.getPlatformName());          }   } if (prodNet.getFlagProdId() == 1) {      if (StringUtil.isBlank(prodNet.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", prodNet.getProdId());          }   } if (prodNet.getFlagProdName() == 1) {      if (StringUtil.isBlank(prodNet.getProdName())) {             sql.append(" and PROD_NAME is null ");          }      else{             sql.append(" and PROD_NAME=:prodName");             sql.setString("prodName", prodNet.getProdName());          }   } if (prodNet.getFlagProdNetId() == 1) {      if (StringUtil.isBlank(prodNet.getProdNetId())) {             sql.append(" and PROD_NET_ID is null ");          }      else{             sql.append(" and PROD_NET_ID=:prodNetId");             sql.setLong("prodNetId", prodNet.getProdNetId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           prodNet = new ProdNetSVO();           prodNet.setNetPlatform(rs.getString("NET_PLATFORM"));           prodNet.setPlatformName(rs.getString("PLATFORM_NAME"));           prodNet.setProdId(rs.getString("PROD_ID"));           prodNet.setProdName(rs.getString("PROD_NAME"));           prodNet.setProdNetId(rs.getString("PROD_NET_ID"));               res.add(prodNet);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       ProdNetSVO prodNet=(ProdNetSVO) vo;    if (StringUtil.isBlank(prodNet.getProdNetId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE PROD_NET SET ");     try {if (prodNet.getFlagNetPlatform() == 1) {sql.append("NET_PLATFORM=:netPlatform,"); sql.setString("netPlatform", prodNet.getNetPlatform()); } if (prodNet.getFlagPlatformName() == 1) {sql.append("PLATFORM_NAME=:platformName,"); sql.setString("platformName", prodNet.getPlatformName()); } if (prodNet.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", prodNet.getProdId()); } if (prodNet.getFlagProdName() == 1) {sql.append("PROD_NAME=:prodName,"); sql.setString("prodName", prodNet.getProdName()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and PROD_NET_ID=:prodNetId");sql.setLong("prodNetId", prodNet.getProdNetId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO PROD_NET(NET_PLATFORM,PLATFORM_NAME,PROD_ID,PROD_NAME,PROD_NET_ID)");sql.append(" VALUES (:netPlatform,:platformName,:prodId,:prodName,:prodNetId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       ProdNetSVO prodNet=(ProdNetSVO) list.get(i);         if (prodNet== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(prodNet.getProdNetId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(prodNet.getNetPlatform())) {      sql.setNullString("netPlatform");     } else {    sql.setString("netPlatform", prodNet.getNetPlatform());    }       if (StringUtil.isBlank(prodNet.getPlatformName())) {      sql.setNullString("platformName");     } else {    sql.setString("platformName", prodNet.getPlatformName());    }       if (StringUtil.isBlank(prodNet.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", prodNet.getProdId());    }       if (StringUtil.isBlank(prodNet.getProdName())) {      sql.setNullString("prodName");     } else {    sql.setString("prodName", prodNet.getProdName());    }       if (StringUtil.isBlank(prodNet.getProdNetId())) {      sql.setNullLong("prodNetId");     } else {    sql.setLong("prodNetId", prodNet.getProdNetId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     ProdNetSVO prodNet=(ProdNetSVO) vo;    if (StringUtil.isBlank(prodNet.getProdNetId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM PROD_NET WHERE 1=1  ");sql.append(" and PROD_NET_ID=:prodNetId");sql.setLong("prodNetId", prodNet.getProdNetId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     ProdNetSVO prodNet=(ProdNetSVO) vo;       }}
