package com.cattsoft.pm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pm.component.dao.IWoGroupMemberSDAO;import com.cattsoft.pm.vo.WoGroupMemberSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;/** * 方法WoGroupMemberSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class WoGroupMemberSDAOImpl implements IWoGroupMemberSDAO {	// private static Logger log =	// Logger.getLogger(WoGroupMemberSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) vo;		if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WO_GROUP_MEMBER(EXT_SO_NBR,LOCAL_NET_ID,MAIN_WO_FLAG,STEP_ID,STS,STS_DATE,WO_GROUP_ID,WO_GROUP_MEMBER_ID,WO_NBR)");		sql				.append(" VALUES (:extSoNbr,:localNetId,:mainWoFlag,:stepId,:sts,:stsDate,:woGroupId,:woGroupMemberId,:woNbr)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(woGroupMember.getExtSoNbr())) {				sql.setNullString("extSoNbr");			} else {				sql.setString("extSoNbr", woGroupMember.getExtSoNbr());			}			if (StringUtil.isBlank(woGroupMember.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", woGroupMember.getLocalNetId());			}			if (StringUtil.isBlank(woGroupMember.getMainWoFlag())) {				sql.setNullString("mainWoFlag");			} else {				sql.setString("mainWoFlag", woGroupMember.getMainWoFlag());			}			if (StringUtil.isBlank(woGroupMember.getStepId())) {				sql.setNullString("stepId");			} else {				sql.setString("stepId", woGroupMember.getStepId());			}			if (StringUtil.isBlank(woGroupMember.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", woGroupMember.getSts());			}			if (woGroupMember.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", woGroupMember.getStsDate());			}			if (StringUtil.isBlank(woGroupMember.getWoGroupId())) {				sql.setNullLong("woGroupId");			} else {				sql.setLong("woGroupId", woGroupMember.getWoGroupId());			}			if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {				sql.setNullLong("woGroupMemberId");			} else {				sql.setLong("woGroupMemberId", woGroupMember						.getWoGroupMemberId());			}			if (StringUtil.isBlank(woGroupMember.getWoNbr())) {				sql.setNullLong("woNbr");			} else {				sql.setLong("woNbr", woGroupMember.getWoNbr());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) vo;		if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT EXT_SO_NBR,LOCAL_NET_ID,MAIN_WO_FLAG,STEP_ID,STS,STS_DATE,WO_GROUP_ID,WO_GROUP_MEMBER_ID,WO_NBR FROM WO_GROUP_MEMBER WHERE 1=1  ");		sql.append(" and WO_GROUP_MEMBER_ID=:woGroupMemberId");		sql.setLong("woGroupMemberId", woGroupMember.getWoGroupMemberId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		woGroupMember = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				woGroupMember = new WoGroupMemberSVO();				woGroupMember.setExtSoNbr(rs.getString("EXT_SO_NBR"));				woGroupMember.setLocalNetId(rs.getString("LOCAL_NET_ID"));				woGroupMember.setMainWoFlag(rs.getString("MAIN_WO_FLAG"));				woGroupMember.setStepId(rs.getString("STEP_ID"));				woGroupMember.setSts(rs.getString("STS"));				woGroupMember.setStsDate(rs.getTimestamp("STS_DATE"));				woGroupMember.setWoGroupId(rs.getString("WO_GROUP_ID"));				woGroupMember.setWoGroupMemberId(rs						.getString("WO_GROUP_MEMBER_ID"));				woGroupMember.setWoNbr(rs.getString("WO_NBR"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return woGroupMember;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT EXT_SO_NBR,LOCAL_NET_ID,MAIN_WO_FLAG,STEP_ID,STS,STS_DATE,WO_GROUP_ID,WO_GROUP_MEMBER_ID,WO_NBR FROM WO_GROUP_MEMBER WHERE 1=1 ");		try {			if (woGroupMember.getFlagExtSoNbr() == 1) {				if (StringUtil.isBlank(woGroupMember.getExtSoNbr())) {					sql.append(" and EXT_SO_NBR is null ");				} else {					sql.append(" and EXT_SO_NBR=:extSoNbr");					sql.setString("extSoNbr", woGroupMember.getExtSoNbr());				}			}			if (woGroupMember.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(woGroupMember.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", woGroupMember.getLocalNetId());				}			}			if (woGroupMember.getFlagMainWoFlag() == 1) {				if (StringUtil.isBlank(woGroupMember.getMainWoFlag())) {					sql.append(" and MAIN_WO_FLAG is null ");				} else {					sql.append(" and MAIN_WO_FLAG=:mainWoFlag");					sql.setString("mainWoFlag", woGroupMember.getMainWoFlag());				}			}			if (woGroupMember.getFlagStepId() == 1) {				if (StringUtil.isBlank(woGroupMember.getStepId())) {					sql.append(" and STEP_ID is null ");				} else {					sql.append(" and STEP_ID=:stepId");					sql.setString("stepId", woGroupMember.getStepId());				}			}			if (woGroupMember.getFlagSts() == 1) {				if (StringUtil.isBlank(woGroupMember.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", woGroupMember.getSts());				}			}			if (woGroupMember.getFlagStsDate() == 1) {				if (woGroupMember.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", woGroupMember.getStsDate());				}			}			if (woGroupMember.getFlagWoGroupId() == 1) {				if (StringUtil.isBlank(woGroupMember.getWoGroupId())) {					sql.append(" and WO_GROUP_ID is null ");				} else {					sql.append(" and WO_GROUP_ID=:woGroupId");					sql.setLong("woGroupId", woGroupMember.getWoGroupId());				}			}			if (woGroupMember.getFlagWoGroupMemberId() == 1) {				if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {					sql.append(" and WO_GROUP_MEMBER_ID is null ");				} else {					sql.append(" and WO_GROUP_MEMBER_ID=:woGroupMemberId");					sql.setLong("woGroupMemberId", woGroupMember							.getWoGroupMemberId());				}			}			if (woGroupMember.getFlagWoNbr() == 1) {				if (StringUtil.isBlank(woGroupMember.getWoNbr())) {					sql.append(" and WO_NBR is null ");				} else {					sql.append(" and WO_NBR=:woNbr");					sql.setLong("woNbr", woGroupMember.getWoNbr());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				woGroupMember = new WoGroupMemberSVO();				woGroupMember.setExtSoNbr(rs.getString("EXT_SO_NBR"));				woGroupMember.setLocalNetId(rs.getString("LOCAL_NET_ID"));				woGroupMember.setMainWoFlag(rs.getString("MAIN_WO_FLAG"));				woGroupMember.setStepId(rs.getString("STEP_ID"));				woGroupMember.setSts(rs.getString("STS"));				woGroupMember.setStsDate(rs.getTimestamp("STS_DATE"));				woGroupMember.setWoGroupId(rs.getString("WO_GROUP_ID"));				woGroupMember.setWoGroupMemberId(rs						.getString("WO_GROUP_MEMBER_ID"));				woGroupMember.setWoNbr(rs.getString("WO_NBR"));				res.add(woGroupMember);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) vo;		if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE WO_GROUP_MEMBER SET ");		try {			if (woGroupMember.getFlagExtSoNbr() == 1) {				sql.append("EXT_SO_NBR=:extSoNbr,");				sql.setString("extSoNbr", woGroupMember.getExtSoNbr());			}			if (woGroupMember.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", woGroupMember.getLocalNetId());			}			if (woGroupMember.getFlagMainWoFlag() == 1) {				sql.append("MAIN_WO_FLAG=:mainWoFlag,");				sql.setString("mainWoFlag", woGroupMember.getMainWoFlag());			}			if (woGroupMember.getFlagStepId() == 1) {				sql.append("STEP_ID=:stepId,");				sql.setString("stepId", woGroupMember.getStepId());			}			if (woGroupMember.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", woGroupMember.getSts());			}			if (woGroupMember.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", woGroupMember.getStsDate());			}			if (woGroupMember.getFlagWoGroupId() == 1) {				sql.append("WO_GROUP_ID=:woGroupId,");				sql.setLong("woGroupId", woGroupMember.getWoGroupId());			}			if (woGroupMember.getFlagWoNbr() == 1) {				sql.append("WO_NBR=:woNbr,");				sql.setLong("woNbr", woGroupMember.getWoNbr());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and WO_GROUP_MEMBER_ID=:woGroupMemberId");			sql.setLong("woGroupMemberId", woGroupMember.getWoGroupMemberId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WO_GROUP_MEMBER(EXT_SO_NBR,LOCAL_NET_ID,MAIN_WO_FLAG,STEP_ID,STS,STS_DATE,WO_GROUP_ID,WO_GROUP_MEMBER_ID,WO_NBR)");		sql				.append(" VALUES (:extSoNbr,:localNetId,:mainWoFlag,:stepId,:sts,:stsDate,:woGroupId,:woGroupMemberId,:woNbr)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) list.get(i);				if (woGroupMember == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(woGroupMember.getExtSoNbr())) {					sql.setNullString("extSoNbr");				} else {					sql.setString("extSoNbr", woGroupMember.getExtSoNbr());				}				if (StringUtil.isBlank(woGroupMember.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", woGroupMember.getLocalNetId());				}				if (StringUtil.isBlank(woGroupMember.getMainWoFlag())) {					sql.setNullString("mainWoFlag");				} else {					sql.setString("mainWoFlag", woGroupMember.getMainWoFlag());				}				if (StringUtil.isBlank(woGroupMember.getStepId())) {					sql.setNullString("stepId");				} else {					sql.setString("stepId", woGroupMember.getStepId());				}				if (StringUtil.isBlank(woGroupMember.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", woGroupMember.getSts());				}				if (woGroupMember.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", woGroupMember.getStsDate());				}				if (StringUtil.isBlank(woGroupMember.getWoGroupId())) {					sql.setNullLong("woGroupId");				} else {					sql.setLong("woGroupId", woGroupMember.getWoGroupId());				}				if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {					sql.setNullLong("woGroupMemberId");				} else {					sql.setLong("woGroupMemberId", woGroupMember							.getWoGroupMemberId());				}				if (StringUtil.isBlank(woGroupMember.getWoNbr())) {					sql.setNullLong("woNbr");				} else {					sql.setLong("woNbr", woGroupMember.getWoNbr());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoGroupMemberSVO woGroupMember = (WoGroupMemberSVO) vo;		if (StringUtil.isBlank(woGroupMember.getWoGroupMemberId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM WO_GROUP_MEMBER WHERE 1=1  ");		sql.append(" and WO_GROUP_MEMBER_ID=:woGroupMemberId");		sql.setLong("woGroupMemberId", woGroupMember.getWoGroupMemberId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// WoGroupMemberSVO woGroupMember=(WoGroupMemberSVO) vo;	}}