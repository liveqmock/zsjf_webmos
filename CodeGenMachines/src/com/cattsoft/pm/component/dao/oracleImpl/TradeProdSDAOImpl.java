package com.cattsoft.pm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pm.component.dao.ITradeProdSDAO;import com.cattsoft.pm.vo.TradeProdSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TradeProdSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TradeProdSDAOImpl implements ITradeProdSDAO{    private static Logger log = Logger.getLogger(TradeProdSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TradeProdSVO tradeProd=(TradeProdSVO) vo;    if (StringUtil.isBlank(tradeProd.getTradeProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TRADE_PROD(COUNT,PROD_ID,STS,STS_DATE,TRADE_ID,TRADE_PROD_ID)");sql.append(" VALUES (:count,:prodId,:sts,:stsDate,:tradeId,:tradeProdId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tradeProd.getCount())) {      sql.setNullLong("count");     } else {    sql.setLong("count", tradeProd.getCount());    }       if (StringUtil.isBlank(tradeProd.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", tradeProd.getProdId());    }       if (StringUtil.isBlank(tradeProd.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tradeProd.getSts());    }    if (tradeProd.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tradeProd.getStsDate());    }       if (StringUtil.isBlank(tradeProd.getTradeId())) {      sql.setNullLong("tradeId");     } else {    sql.setLong("tradeId", tradeProd.getTradeId());    }       if (StringUtil.isBlank(tradeProd.getTradeProdId())) {      sql.setNullLong("tradeProdId");     } else {    sql.setLong("tradeProdId", tradeProd.getTradeProdId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TradeProdSVO tradeProd=(TradeProdSVO) vo;    if (StringUtil.isBlank(tradeProd.getTradeProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT COUNT,PROD_ID,STS,STS_DATE,TRADE_ID,TRADE_PROD_ID FROM TRADE_PROD WHERE 1=1  ");sql.append(" and TRADE_PROD_ID=:tradeProdId");sql.setLong("tradeProdId", tradeProd.getTradeProdId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tradeProd =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tradeProd = new TradeProdSVO();           tradeProd.setCount(rs.getString("COUNT"));           tradeProd.setProdId(rs.getString("PROD_ID"));           tradeProd.setSts(rs.getString("STS"));           tradeProd.setStsDate(rs.getTimestamp("STS_DATE"));           tradeProd.setTradeId(rs.getString("TRADE_ID"));           tradeProd.setTradeProdId(rs.getString("TRADE_PROD_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tradeProd;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TradeProdSVO tradeProd=(TradeProdSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT COUNT,PROD_ID,STS,STS_DATE,TRADE_ID,TRADE_PROD_ID FROM TRADE_PROD WHERE 1=1 ");     try {if (tradeProd.getFlagCount() == 1) {      if (StringUtil.isBlank(tradeProd.getCount())) {             sql.append(" and COUNT is null ");          }      else{             sql.append(" and COUNT=:count");             sql.setLong("count", tradeProd.getCount());          }   } if (tradeProd.getFlagProdId() == 1) {      if (StringUtil.isBlank(tradeProd.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setString("prodId", tradeProd.getProdId());          }   } if (tradeProd.getFlagSts() == 1) {      if (StringUtil.isBlank(tradeProd.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tradeProd.getSts());          }   } if (tradeProd.getFlagStsDate() == 1) {      if (tradeProd.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", tradeProd.getStsDate());          }   } if (tradeProd.getFlagTradeId() == 1) {      if (StringUtil.isBlank(tradeProd.getTradeId())) {             sql.append(" and TRADE_ID is null ");          }      else{             sql.append(" and TRADE_ID=:tradeId");             sql.setLong("tradeId", tradeProd.getTradeId());          }   } if (tradeProd.getFlagTradeProdId() == 1) {      if (StringUtil.isBlank(tradeProd.getTradeProdId())) {             sql.append(" and TRADE_PROD_ID is null ");          }      else{             sql.append(" and TRADE_PROD_ID=:tradeProdId");             sql.setLong("tradeProdId", tradeProd.getTradeProdId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tradeProd = new TradeProdSVO();           tradeProd.setCount(rs.getString("COUNT"));           tradeProd.setProdId(rs.getString("PROD_ID"));           tradeProd.setSts(rs.getString("STS"));           tradeProd.setStsDate(rs.getTimestamp("STS_DATE"));           tradeProd.setTradeId(rs.getString("TRADE_ID"));           tradeProd.setTradeProdId(rs.getString("TRADE_PROD_ID"));               res.add(tradeProd);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TradeProdSVO tradeProd=(TradeProdSVO) vo;    if (StringUtil.isBlank(tradeProd.getTradeProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TRADE_PROD SET ");     try {if (tradeProd.getFlagCount() == 1) {sql.append("COUNT=:count,");sql.setLong("count", tradeProd.getCount()); } if (tradeProd.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,"); sql.setString("prodId", tradeProd.getProdId()); } if (tradeProd.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tradeProd.getSts()); } if (tradeProd.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", tradeProd.getStsDate()); } if (tradeProd.getFlagTradeId() == 1) {sql.append("TRADE_ID=:tradeId,");sql.setLong("tradeId", tradeProd.getTradeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and TRADE_PROD_ID=:tradeProdId");sql.setLong("tradeProdId", tradeProd.getTradeProdId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TRADE_PROD(COUNT,PROD_ID,STS,STS_DATE,TRADE_ID,TRADE_PROD_ID)");sql.append(" VALUES (:count,:prodId,:sts,:stsDate,:tradeId,:tradeProdId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TradeProdSVO tradeProd=(TradeProdSVO) list.get(i);         if (tradeProd== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tradeProd.getTradeProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(tradeProd.getCount())) {      sql.setNullLong("count");     } else {    sql.setLong("count", tradeProd.getCount());    }       if (StringUtil.isBlank(tradeProd.getProdId())) {      sql.setNullString("prodId");     } else {    sql.setString("prodId", tradeProd.getProdId());    }       if (StringUtil.isBlank(tradeProd.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tradeProd.getSts());    }    if (tradeProd.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", tradeProd.getStsDate());    }       if (StringUtil.isBlank(tradeProd.getTradeId())) {      sql.setNullLong("tradeId");     } else {    sql.setLong("tradeId", tradeProd.getTradeId());    }       if (StringUtil.isBlank(tradeProd.getTradeProdId())) {      sql.setNullLong("tradeProdId");     } else {    sql.setLong("tradeProdId", tradeProd.getTradeProdId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TradeProdSVO tradeProd=(TradeProdSVO) vo;    if (StringUtil.isBlank(tradeProd.getTradeProdId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TRADE_PROD WHERE 1=1  ");sql.append(" and TRADE_PROD_ID=:tradeProdId");sql.setLong("tradeProdId", tradeProd.getTradeProdId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TradeProdSVO tradeProd=(TradeProdSVO) vo;       }}
