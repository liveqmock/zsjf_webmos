package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sm.component.dao.IPartyIdentitySDAO;import com.cattsoft.sm.vo.PartyIdentitySVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法PartyIdentitySDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class PartyIdentitySDAOImpl implements IPartyIdentitySDAO{    private static Logger log = Logger.getLogger(PartyIdentitySDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;    if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO PARTY_IDENTITY(CERT_ADDR,CERT_CODE,CERT_EXP_DATE,CERT_TYPE_ID,CHECK_INFO,CREATE_DATE,DETAIL_INFO,LOCAL_NET_ID,PARTY_ID,PARTY_IDENTITY_ID,STS,STS_DATE)");sql.append(" VALUES (:certAddr,:certCode,:certExpDate,:certTypeId,:checkInfo,:createDate,:detailInfo,:localNetId,:partyId,:partyIdentityId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(partyIdentity.getCertAddr())) {      sql.setNullString("certAddr");     } else {    sql.setString("certAddr", partyIdentity.getCertAddr());    }       if (StringUtil.isBlank(partyIdentity.getCertCode())) {      sql.setNullString("certCode");     } else {    sql.setString("certCode", partyIdentity.getCertCode());    }    if (partyIdentity.getCertExpDate() == null) {      sql.setNullDate("certExpDate");     } else {    sql.setTimestamp("certExpDate", partyIdentity.getCertExpDate());    }       if (StringUtil.isBlank(partyIdentity.getCertTypeId())) {      sql.setNullLong("certTypeId");     } else {    sql.setLong("certTypeId", partyIdentity.getCertTypeId());    }       if (StringUtil.isBlank(partyIdentity.getCheckInfo())) {      sql.setNullString("checkInfo");     } else {    sql.setString("checkInfo", partyIdentity.getCheckInfo());    }    if (partyIdentity.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", partyIdentity.getCreateDate());    }       if (StringUtil.isBlank(partyIdentity.getDetailInfo())) {      sql.setNullString("detailInfo");     } else {    sql.setString("detailInfo", partyIdentity.getDetailInfo());    }       if (StringUtil.isBlank(partyIdentity.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", partyIdentity.getLocalNetId());    }       if (StringUtil.isBlank(partyIdentity.getPartyId())) {      sql.setNullLong("partyId");     } else {    sql.setLong("partyId", partyIdentity.getPartyId());    }       if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {      sql.setNullLong("partyIdentityId");     } else {    sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());    }       if (StringUtil.isBlank(partyIdentity.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", partyIdentity.getSts());    }    if (partyIdentity.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", partyIdentity.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;    if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CERT_ADDR,CERT_CODE,CERT_EXP_DATE,CERT_TYPE_ID,CHECK_INFO,CREATE_DATE,DETAIL_INFO,LOCAL_NET_ID,PARTY_ID,PARTY_IDENTITY_ID,STS,STS_DATE FROM PARTY_IDENTITY WHERE 1=1  ");sql.append(" and PARTY_IDENTITY_ID=:partyIdentityId");sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      partyIdentity =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           partyIdentity = new PartyIdentitySVO();           partyIdentity.setCertAddr(rs.getString("CERT_ADDR"));           partyIdentity.setCertCode(rs.getString("CERT_CODE"));           partyIdentity.setCertExpDate(rs.getTimestamp("CERT_EXP_DATE"));           partyIdentity.setCertTypeId(rs.getString("CERT_TYPE_ID"));           partyIdentity.setCheckInfo(rs.getString("CHECK_INFO"));           partyIdentity.setCreateDate(rs.getTimestamp("CREATE_DATE"));           partyIdentity.setDetailInfo(rs.getString("DETAIL_INFO"));           partyIdentity.setLocalNetId(rs.getString("LOCAL_NET_ID"));           partyIdentity.setPartyId(rs.getString("PARTY_ID"));           partyIdentity.setPartyIdentityId(rs.getString("PARTY_IDENTITY_ID"));           partyIdentity.setSts(rs.getString("STS"));           partyIdentity.setStsDate(rs.getTimestamp("STS_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return partyIdentity;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CERT_ADDR,CERT_CODE,CERT_EXP_DATE,CERT_TYPE_ID,CHECK_INFO,CREATE_DATE,DETAIL_INFO,LOCAL_NET_ID,PARTY_ID,PARTY_IDENTITY_ID,STS,STS_DATE FROM PARTY_IDENTITY WHERE 1=1 ");     try {if (partyIdentity.getFlagCertAddr() == 1) {      if (StringUtil.isBlank(partyIdentity.getCertAddr())) {             sql.append(" and CERT_ADDR is null ");          }      else{             sql.append(" and CERT_ADDR=:certAddr");             sql.setString("certAddr", partyIdentity.getCertAddr());          }   } if (partyIdentity.getFlagCertCode() == 1) {      if (StringUtil.isBlank(partyIdentity.getCertCode())) {             sql.append(" and CERT_CODE is null ");          }      else{             sql.append(" and CERT_CODE=:certCode");             sql.setString("certCode", partyIdentity.getCertCode());          }   } if (partyIdentity.getFlagCertExpDate() == 1) {      if (partyIdentity.getCertExpDate() == null) {             sql.append(" and CERT_EXP_DATE is null ");          }      else{             sql.append(" and CERT_EXP_DATE=:certExpDate");             sql.setTimestamp("certExpDate", partyIdentity.getCertExpDate());          }   } if (partyIdentity.getFlagCertTypeId() == 1) {      if (StringUtil.isBlank(partyIdentity.getCertTypeId())) {             sql.append(" and CERT_TYPE_ID is null ");          }      else{             sql.append(" and CERT_TYPE_ID=:certTypeId");             sql.setLong("certTypeId", partyIdentity.getCertTypeId());          }   } if (partyIdentity.getFlagCheckInfo() == 1) {      if (StringUtil.isBlank(partyIdentity.getCheckInfo())) {             sql.append(" and CHECK_INFO is null ");          }      else{             sql.append(" and CHECK_INFO=:checkInfo");             sql.setString("checkInfo", partyIdentity.getCheckInfo());          }   } if (partyIdentity.getFlagCreateDate() == 1) {      if (partyIdentity.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", partyIdentity.getCreateDate());          }   } if (partyIdentity.getFlagDetailInfo() == 1) {      if (StringUtil.isBlank(partyIdentity.getDetailInfo())) {             sql.append(" and DETAIL_INFO is null ");          }      else{             sql.append(" and DETAIL_INFO=:detailInfo");             sql.setString("detailInfo", partyIdentity.getDetailInfo());          }   } if (partyIdentity.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(partyIdentity.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", partyIdentity.getLocalNetId());          }   } if (partyIdentity.getFlagPartyId() == 1) {      if (StringUtil.isBlank(partyIdentity.getPartyId())) {             sql.append(" and PARTY_ID is null ");          }      else{             sql.append(" and PARTY_ID=:partyId");             sql.setLong("partyId", partyIdentity.getPartyId());          }   } if (partyIdentity.getFlagPartyIdentityId() == 1) {      if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {             sql.append(" and PARTY_IDENTITY_ID is null ");          }      else{             sql.append(" and PARTY_IDENTITY_ID=:partyIdentityId");             sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());          }   } if (partyIdentity.getFlagSts() == 1) {      if (StringUtil.isBlank(partyIdentity.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", partyIdentity.getSts());          }   } if (partyIdentity.getFlagStsDate() == 1) {      if (partyIdentity.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", partyIdentity.getStsDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           partyIdentity = new PartyIdentitySVO();           partyIdentity.setCertAddr(rs.getString("CERT_ADDR"));           partyIdentity.setCertCode(rs.getString("CERT_CODE"));           partyIdentity.setCertExpDate(rs.getTimestamp("CERT_EXP_DATE"));           partyIdentity.setCertTypeId(rs.getString("CERT_TYPE_ID"));           partyIdentity.setCheckInfo(rs.getString("CHECK_INFO"));           partyIdentity.setCreateDate(rs.getTimestamp("CREATE_DATE"));           partyIdentity.setDetailInfo(rs.getString("DETAIL_INFO"));           partyIdentity.setLocalNetId(rs.getString("LOCAL_NET_ID"));           partyIdentity.setPartyId(rs.getString("PARTY_ID"));           partyIdentity.setPartyIdentityId(rs.getString("PARTY_IDENTITY_ID"));           partyIdentity.setSts(rs.getString("STS"));           partyIdentity.setStsDate(rs.getTimestamp("STS_DATE"));               res.add(partyIdentity);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;    if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE PARTY_IDENTITY SET ");     try {if (partyIdentity.getFlagCertAddr() == 1) {sql.append("CERT_ADDR=:certAddr,"); sql.setString("certAddr", partyIdentity.getCertAddr()); } if (partyIdentity.getFlagCertCode() == 1) {sql.append("CERT_CODE=:certCode,"); sql.setString("certCode", partyIdentity.getCertCode()); } if (partyIdentity.getFlagCertExpDate() == 1) {sql.append("CERT_EXP_DATE=:certExpDate,"); sql.setTimestamp("certExpDate", partyIdentity.getCertExpDate()); } if (partyIdentity.getFlagCertTypeId() == 1) {sql.append("CERT_TYPE_ID=:certTypeId,");sql.setLong("certTypeId", partyIdentity.getCertTypeId()); } if (partyIdentity.getFlagCheckInfo() == 1) {sql.append("CHECK_INFO=:checkInfo,"); sql.setString("checkInfo", partyIdentity.getCheckInfo()); } if (partyIdentity.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", partyIdentity.getCreateDate()); } if (partyIdentity.getFlagDetailInfo() == 1) {sql.append("DETAIL_INFO=:detailInfo,"); sql.setString("detailInfo", partyIdentity.getDetailInfo()); } if (partyIdentity.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", partyIdentity.getLocalNetId()); } if (partyIdentity.getFlagPartyId() == 1) {sql.append("PARTY_ID=:partyId,");sql.setLong("partyId", partyIdentity.getPartyId()); } if (partyIdentity.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", partyIdentity.getSts()); } if (partyIdentity.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", partyIdentity.getStsDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and PARTY_IDENTITY_ID=:partyIdentityId");sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO PARTY_IDENTITY(CERT_ADDR,CERT_CODE,CERT_EXP_DATE,CERT_TYPE_ID,CHECK_INFO,CREATE_DATE,DETAIL_INFO,LOCAL_NET_ID,PARTY_ID,PARTY_IDENTITY_ID,STS,STS_DATE)");sql.append(" VALUES (:certAddr,:certCode,:certExpDate,:certTypeId,:checkInfo,:createDate,:detailInfo,:localNetId,:partyId,:partyIdentityId,:sts,:stsDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       PartyIdentitySVO partyIdentity=(PartyIdentitySVO) list.get(i);         if (partyIdentity== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(partyIdentity.getCertAddr())) {      sql.setNullString("certAddr");     } else {    sql.setString("certAddr", partyIdentity.getCertAddr());    }       if (StringUtil.isBlank(partyIdentity.getCertCode())) {      sql.setNullString("certCode");     } else {    sql.setString("certCode", partyIdentity.getCertCode());    }    if (partyIdentity.getCertExpDate() == null) {      sql.setNullDate("certExpDate");     } else {    sql.setTimestamp("certExpDate", partyIdentity.getCertExpDate());    }       if (StringUtil.isBlank(partyIdentity.getCertTypeId())) {      sql.setNullLong("certTypeId");     } else {    sql.setLong("certTypeId", partyIdentity.getCertTypeId());    }       if (StringUtil.isBlank(partyIdentity.getCheckInfo())) {      sql.setNullString("checkInfo");     } else {    sql.setString("checkInfo", partyIdentity.getCheckInfo());    }    if (partyIdentity.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", partyIdentity.getCreateDate());    }       if (StringUtil.isBlank(partyIdentity.getDetailInfo())) {      sql.setNullString("detailInfo");     } else {    sql.setString("detailInfo", partyIdentity.getDetailInfo());    }       if (StringUtil.isBlank(partyIdentity.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", partyIdentity.getLocalNetId());    }       if (StringUtil.isBlank(partyIdentity.getPartyId())) {      sql.setNullLong("partyId");     } else {    sql.setLong("partyId", partyIdentity.getPartyId());    }       if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {      sql.setNullLong("partyIdentityId");     } else {    sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());    }       if (StringUtil.isBlank(partyIdentity.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", partyIdentity.getSts());    }    if (partyIdentity.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", partyIdentity.getStsDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;    if (StringUtil.isBlank(partyIdentity.getPartyIdentityId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM PARTY_IDENTITY WHERE 1=1  ");sql.append(" and PARTY_IDENTITY_ID=:partyIdentityId");sql.setLong("partyIdentityId", partyIdentity.getPartyIdentityId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     PartyIdentitySVO partyIdentity=(PartyIdentitySVO) vo;       }}
