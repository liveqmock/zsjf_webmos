package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ISysUserSDAO;import com.cattsoft.tm.vo.SysUserSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SysUserSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SysUserSDAOImpl implements ISysUserSDAO{    private static Logger log = Logger.getLogger(SysUserSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserSVO sysUser=(SysUserSVO) vo;    if (StringUtil.isBlank(sysUser.getSysUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SYS_USER(CREATE_DATE,EXP_DATE,LAST_PWD,LOCAL_NET_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PASSWORD,SET_PWD_TIME,STS,STS_DATE,SYS_USER_ID,SYS_USER_NAME,UPDATE_PWD_TIME)");sql.append(" VALUES (:createDate,:expDate,:lastPwd,:localNetId,:partyRoleId,:partyRoleTypeId,:password,:setPwdTime,:sts,:stsDate,:sysUserId,:sysUserName,:updatePwdTime)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (sysUser.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", sysUser.getCreateDate());    }    if (sysUser.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", sysUser.getExpDate());    }       if (StringUtil.isBlank(sysUser.getLastPwd())) {      sql.setNullString("lastPwd");     } else {    sql.setString("lastPwd", sysUser.getLastPwd());    }       if (StringUtil.isBlank(sysUser.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", sysUser.getLocalNetId());    }       if (StringUtil.isBlank(sysUser.getPartyRoleId())) {      sql.setNullString("partyRoleId");     } else {    sql.setString("partyRoleId", sysUser.getPartyRoleId());    }       if (StringUtil.isBlank(sysUser.getPartyRoleTypeId())) {      sql.setNullLong("partyRoleTypeId");     } else {    sql.setLong("partyRoleTypeId", sysUser.getPartyRoleTypeId());    }       if (StringUtil.isBlank(sysUser.getPassword())) {      sql.setNullString("password");     } else {    sql.setString("password", sysUser.getPassword());    }    if (sysUser.getSetPwdTime() == null) {      sql.setNullDate("setPwdTime");     } else {    sql.setTimestamp("setPwdTime", sysUser.getSetPwdTime());    }       if (StringUtil.isBlank(sysUser.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", sysUser.getSts());    }    if (sysUser.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", sysUser.getStsDate());    }       if (StringUtil.isBlank(sysUser.getSysUserId())) {      sql.setNullString("sysUserId");     } else {    sql.setString("sysUserId", sysUser.getSysUserId());    }       if (StringUtil.isBlank(sysUser.getSysUserName())) {      sql.setNullString("sysUserName");     } else {    sql.setString("sysUserName", sysUser.getSysUserName());    }    if (sysUser.getUpdatePwdTime() == null) {      sql.setNullDate("updatePwdTime");     } else {    sql.setTimestamp("updatePwdTime", sysUser.getUpdatePwdTime());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserSVO sysUser=(SysUserSVO) vo;    if (StringUtil.isBlank(sysUser.getSysUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CREATE_DATE,EXP_DATE,LAST_PWD,LOCAL_NET_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PASSWORD,SET_PWD_TIME,STS,STS_DATE,SYS_USER_ID,SYS_USER_NAME,UPDATE_PWD_TIME FROM SYS_USER WHERE 1=1  ");sql.append(" and SYS_USER_ID=:sysUserId");sql.setString("sysUserId", sysUser.getSysUserId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      sysUser =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           sysUser = new SysUserSVO();           sysUser.setCreateDate(rs.getTimestamp("CREATE_DATE"));           sysUser.setExpDate(rs.getTimestamp("EXP_DATE"));           sysUser.setLastPwd(rs.getString("LAST_PWD"));           sysUser.setLocalNetId(rs.getString("LOCAL_NET_ID"));           sysUser.setPartyRoleId(rs.getString("PARTY_ROLE_ID"));           sysUser.setPartyRoleTypeId(rs.getString("PARTY_ROLE_TYPE_ID"));           sysUser.setPassword(rs.getString("PASSWORD"));           sysUser.setSetPwdTime(rs.getTimestamp("SET_PWD_TIME"));           sysUser.setSts(rs.getString("STS"));           sysUser.setStsDate(rs.getTimestamp("STS_DATE"));           sysUser.setSysUserId(rs.getString("SYS_USER_ID"));           sysUser.setSysUserName(rs.getString("SYS_USER_NAME"));           sysUser.setUpdatePwdTime(rs.getTimestamp("UPDATE_PWD_TIME"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return sysUser;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SysUserSVO sysUser=(SysUserSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,EXP_DATE,LAST_PWD,LOCAL_NET_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PASSWORD,SET_PWD_TIME,STS,STS_DATE,SYS_USER_ID,SYS_USER_NAME,UPDATE_PWD_TIME FROM SYS_USER WHERE 1=1 ");     try {if (sysUser.getFlagCreateDate() == 1) {      if (sysUser.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", sysUser.getCreateDate());          }   } if (sysUser.getFlagExpDate() == 1) {      if (sysUser.getExpDate() == null) {             sql.append(" and EXP_DATE is null ");          }      else{             sql.append(" and EXP_DATE=:expDate");             sql.setTimestamp("expDate", sysUser.getExpDate());          }   } if (sysUser.getFlagLastPwd() == 1) {      if (StringUtil.isBlank(sysUser.getLastPwd())) {             sql.append(" and LAST_PWD is null ");          }      else{             sql.append(" and LAST_PWD=:lastPwd");             sql.setString("lastPwd", sysUser.getLastPwd());          }   } if (sysUser.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(sysUser.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", sysUser.getLocalNetId());          }   } if (sysUser.getFlagPartyRoleId() == 1) {      if (StringUtil.isBlank(sysUser.getPartyRoleId())) {             sql.append(" and PARTY_ROLE_ID is null ");          }      else{             sql.append(" and PARTY_ROLE_ID=:partyRoleId");             sql.setString("partyRoleId", sysUser.getPartyRoleId());          }   } if (sysUser.getFlagPartyRoleTypeId() == 1) {      if (StringUtil.isBlank(sysUser.getPartyRoleTypeId())) {             sql.append(" and PARTY_ROLE_TYPE_ID is null ");          }      else{             sql.append(" and PARTY_ROLE_TYPE_ID=:partyRoleTypeId");             sql.setLong("partyRoleTypeId", sysUser.getPartyRoleTypeId());          }   } if (sysUser.getFlagPassword() == 1) {      if (StringUtil.isBlank(sysUser.getPassword())) {             sql.append(" and PASSWORD is null ");          }      else{             sql.append(" and PASSWORD=:password");             sql.setString("password", sysUser.getPassword());          }   } if (sysUser.getFlagSetPwdTime() == 1) {      if (sysUser.getSetPwdTime() == null) {             sql.append(" and SET_PWD_TIME is null ");          }      else{             sql.append(" and SET_PWD_TIME=:setPwdTime");             sql.setTimestamp("setPwdTime", sysUser.getSetPwdTime());          }   } if (sysUser.getFlagSts() == 1) {      if (StringUtil.isBlank(sysUser.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", sysUser.getSts());          }   } if (sysUser.getFlagStsDate() == 1) {      if (sysUser.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", sysUser.getStsDate());          }   } if (sysUser.getFlagSysUserId() == 1) {      if (StringUtil.isBlank(sysUser.getSysUserId())) {             sql.append(" and SYS_USER_ID is null ");          }      else{             sql.append(" and SYS_USER_ID=:sysUserId");             sql.setString("sysUserId", sysUser.getSysUserId());          }   } if (sysUser.getFlagSysUserName() == 1) {      if (StringUtil.isBlank(sysUser.getSysUserName())) {             sql.append(" and SYS_USER_NAME is null ");          }      else{             sql.append(" and SYS_USER_NAME=:sysUserName");             sql.setString("sysUserName", sysUser.getSysUserName());          }   } if (sysUser.getFlagUpdatePwdTime() == 1) {      if (sysUser.getUpdatePwdTime() == null) {             sql.append(" and UPDATE_PWD_TIME is null ");          }      else{             sql.append(" and UPDATE_PWD_TIME=:updatePwdTime");             sql.setTimestamp("updatePwdTime", sysUser.getUpdatePwdTime());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           sysUser = new SysUserSVO();           sysUser.setCreateDate(rs.getTimestamp("CREATE_DATE"));           sysUser.setExpDate(rs.getTimestamp("EXP_DATE"));           sysUser.setLastPwd(rs.getString("LAST_PWD"));           sysUser.setLocalNetId(rs.getString("LOCAL_NET_ID"));           sysUser.setPartyRoleId(rs.getString("PARTY_ROLE_ID"));           sysUser.setPartyRoleTypeId(rs.getString("PARTY_ROLE_TYPE_ID"));           sysUser.setPassword(rs.getString("PASSWORD"));           sysUser.setSetPwdTime(rs.getTimestamp("SET_PWD_TIME"));           sysUser.setSts(rs.getString("STS"));           sysUser.setStsDate(rs.getTimestamp("STS_DATE"));           sysUser.setSysUserId(rs.getString("SYS_USER_ID"));           sysUser.setSysUserName(rs.getString("SYS_USER_NAME"));           sysUser.setUpdatePwdTime(rs.getTimestamp("UPDATE_PWD_TIME"));               res.add(sysUser);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SysUserSVO sysUser=(SysUserSVO) vo;    if (StringUtil.isBlank(sysUser.getSysUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SYS_USER SET ");     try {if (sysUser.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", sysUser.getCreateDate()); } if (sysUser.getFlagExpDate() == 1) {sql.append("EXP_DATE=:expDate,"); sql.setTimestamp("expDate", sysUser.getExpDate()); } if (sysUser.getFlagLastPwd() == 1) {sql.append("LAST_PWD=:lastPwd,"); sql.setString("lastPwd", sysUser.getLastPwd()); } if (sysUser.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", sysUser.getLocalNetId()); } if (sysUser.getFlagPartyRoleId() == 1) {sql.append("PARTY_ROLE_ID=:partyRoleId,"); sql.setString("partyRoleId", sysUser.getPartyRoleId()); } if (sysUser.getFlagPartyRoleTypeId() == 1) {sql.append("PARTY_ROLE_TYPE_ID=:partyRoleTypeId,");sql.setLong("partyRoleTypeId", sysUser.getPartyRoleTypeId()); } if (sysUser.getFlagPassword() == 1) {sql.append("PASSWORD=:password,"); sql.setString("password", sysUser.getPassword()); } if (sysUser.getFlagSetPwdTime() == 1) {sql.append("SET_PWD_TIME=:setPwdTime,"); sql.setTimestamp("setPwdTime", sysUser.getSetPwdTime()); } if (sysUser.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", sysUser.getSts()); } if (sysUser.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", sysUser.getStsDate()); } if (sysUser.getFlagSysUserName() == 1) {sql.append("SYS_USER_NAME=:sysUserName,"); sql.setString("sysUserName", sysUser.getSysUserName()); } if (sysUser.getFlagUpdatePwdTime() == 1) {sql.append("UPDATE_PWD_TIME=:updatePwdTime,"); sql.setTimestamp("updatePwdTime", sysUser.getUpdatePwdTime()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and SYS_USER_ID=:sysUserId");sql.setString("sysUserId", sysUser.getSysUserId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SYS_USER(CREATE_DATE,EXP_DATE,LAST_PWD,LOCAL_NET_ID,PARTY_ROLE_ID,PARTY_ROLE_TYPE_ID,PASSWORD,SET_PWD_TIME,STS,STS_DATE,SYS_USER_ID,SYS_USER_NAME,UPDATE_PWD_TIME)");sql.append(" VALUES (:createDate,:expDate,:lastPwd,:localNetId,:partyRoleId,:partyRoleTypeId,:password,:setPwdTime,:sts,:stsDate,:sysUserId,:sysUserName,:updatePwdTime)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SysUserSVO sysUser=(SysUserSVO) list.get(i);         if (sysUser== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(sysUser.getSysUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (sysUser.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", sysUser.getCreateDate());    }    if (sysUser.getExpDate() == null) {      sql.setNullDate("expDate");     } else {    sql.setTimestamp("expDate", sysUser.getExpDate());    }       if (StringUtil.isBlank(sysUser.getLastPwd())) {      sql.setNullString("lastPwd");     } else {    sql.setString("lastPwd", sysUser.getLastPwd());    }       if (StringUtil.isBlank(sysUser.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", sysUser.getLocalNetId());    }       if (StringUtil.isBlank(sysUser.getPartyRoleId())) {      sql.setNullString("partyRoleId");     } else {    sql.setString("partyRoleId", sysUser.getPartyRoleId());    }       if (StringUtil.isBlank(sysUser.getPartyRoleTypeId())) {      sql.setNullLong("partyRoleTypeId");     } else {    sql.setLong("partyRoleTypeId", sysUser.getPartyRoleTypeId());    }       if (StringUtil.isBlank(sysUser.getPassword())) {      sql.setNullString("password");     } else {    sql.setString("password", sysUser.getPassword());    }    if (sysUser.getSetPwdTime() == null) {      sql.setNullDate("setPwdTime");     } else {    sql.setTimestamp("setPwdTime", sysUser.getSetPwdTime());    }       if (StringUtil.isBlank(sysUser.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", sysUser.getSts());    }    if (sysUser.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", sysUser.getStsDate());    }       if (StringUtil.isBlank(sysUser.getSysUserId())) {      sql.setNullString("sysUserId");     } else {    sql.setString("sysUserId", sysUser.getSysUserId());    }       if (StringUtil.isBlank(sysUser.getSysUserName())) {      sql.setNullString("sysUserName");     } else {    sql.setString("sysUserName", sysUser.getSysUserName());    }    if (sysUser.getUpdatePwdTime() == null) {      sql.setNullDate("updatePwdTime");     } else {    sql.setTimestamp("updatePwdTime", sysUser.getUpdatePwdTime());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserSVO sysUser=(SysUserSVO) vo;    if (StringUtil.isBlank(sysUser.getSysUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SYS_USER WHERE 1=1  ");sql.append(" and SYS_USER_ID=:sysUserId");sql.setString("sysUserId", sysUser.getSysUserId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SysUserSVO sysUser=(SysUserSVO) vo;       }}
