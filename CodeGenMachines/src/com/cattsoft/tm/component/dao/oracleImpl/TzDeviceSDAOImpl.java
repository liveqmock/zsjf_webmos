package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITzDeviceSDAO;import com.cattsoft.tm.vo.TzDeviceSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TzDeviceSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TzDeviceSDAOImpl implements ITzDeviceSDAO{    private static Logger log = Logger.getLogger(TzDeviceSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzDeviceSVO tzDevice=(TzDeviceSVO) vo;    if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TZ_DEVICE(ARCHIVES_BUILD_DATE,BACK_SOFT_NAME_ID,BLONG_SYSTEM_ID,BUSINESS_DESC,CREATE_DAE,DB_NAME_ID,DEVICE_ADMIN_ID,DEVICE_NAME,DEVICE_NO,DEVICE_TYPE_ID,KEEP_WARRANTY_DATE,MANUFACTURER_ID,MIDDLEWARE_NAME_ID,MODEL_ID,OX_NAME_ID,PURPOSE_ID,REMARKS,ROOM_ID,STS,TZ_DEVICE_ID,UNION_NAME_ID,VIRU_SOFT_NAME_ID,WARRANTY_DATE)");sql.append(" VALUES (:archivesBuildDate,:backSoftNameId,:blongSystemId,:businessDesc,:createDae,:dbNameId,:deviceAdminId,:deviceName,:deviceNo,:deviceTypeId,:keepWarrantyDate,:manufacturerId,:middlewareNameId,:modelId,:oxNameId,:purposeId,:remarks,:roomId,:sts,:tzDeviceId,:unionNameId,:viruSoftNameId,:warrantyDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tzDevice.getArchivesBuildDate() == null) {      sql.setNullDate("archivesBuildDate");     } else {    sql.setTimestamp("archivesBuildDate", tzDevice.getArchivesBuildDate());    }       if (StringUtil.isBlank(tzDevice.getBackSoftNameId())) {      sql.setNullString("backSoftNameId");     } else {    sql.setString("backSoftNameId", tzDevice.getBackSoftNameId());    }       if (StringUtil.isBlank(tzDevice.getBlongSystemId())) {      sql.setNullString("blongSystemId");     } else {    sql.setString("blongSystemId", tzDevice.getBlongSystemId());    }       if (StringUtil.isBlank(tzDevice.getBusinessDesc())) {      sql.setNullString("businessDesc");     } else {    sql.setString("businessDesc", tzDevice.getBusinessDesc());    }    if (tzDevice.getCreateDae() == null) {      sql.setNullDate("createDae");     } else {    sql.setTimestamp("createDae", tzDevice.getCreateDae());    }       if (StringUtil.isBlank(tzDevice.getDbNameId())) {      sql.setNullString("dbNameId");     } else {    sql.setString("dbNameId", tzDevice.getDbNameId());    }       if (StringUtil.isBlank(tzDevice.getDeviceAdminId())) {      sql.setNullString("deviceAdminId");     } else {    sql.setString("deviceAdminId", tzDevice.getDeviceAdminId());    }       if (StringUtil.isBlank(tzDevice.getDeviceName())) {      sql.setNullString("deviceName");     } else {    sql.setString("deviceName", tzDevice.getDeviceName());    }       if (StringUtil.isBlank(tzDevice.getDeviceNo())) {      sql.setNullString("deviceNo");     } else {    sql.setString("deviceNo", tzDevice.getDeviceNo());    }       if (StringUtil.isBlank(tzDevice.getDeviceTypeId())) {      sql.setNullString("deviceTypeId");     } else {    sql.setString("deviceTypeId", tzDevice.getDeviceTypeId());    }    if (tzDevice.getKeepWarrantyDate() == null) {      sql.setNullDate("keepWarrantyDate");     } else {    sql.setTimestamp("keepWarrantyDate", tzDevice.getKeepWarrantyDate());    }       if (StringUtil.isBlank(tzDevice.getManufacturerId())) {      sql.setNullString("manufacturerId");     } else {    sql.setString("manufacturerId", tzDevice.getManufacturerId());    }       if (StringUtil.isBlank(tzDevice.getMiddlewareNameId())) {      sql.setNullString("middlewareNameId");     } else {    sql.setString("middlewareNameId", tzDevice.getMiddlewareNameId());    }       if (StringUtil.isBlank(tzDevice.getModelId())) {      sql.setNullString("modelId");     } else {    sql.setString("modelId", tzDevice.getModelId());    }       if (StringUtil.isBlank(tzDevice.getOxNameId())) {      sql.setNullString("oxNameId");     } else {    sql.setString("oxNameId", tzDevice.getOxNameId());    }       if (StringUtil.isBlank(tzDevice.getPurposeId())) {      sql.setNullString("purposeId");     } else {    sql.setString("purposeId", tzDevice.getPurposeId());    }       if (StringUtil.isBlank(tzDevice.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tzDevice.getRemarks());    }       if (StringUtil.isBlank(tzDevice.getRoomId())) {      sql.setNullString("roomId");     } else {    sql.setString("roomId", tzDevice.getRoomId());    }       if (StringUtil.isBlank(tzDevice.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tzDevice.getSts());    }       if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {      sql.setNullLong("tzDeviceId");     } else {    sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());    }       if (StringUtil.isBlank(tzDevice.getUnionNameId())) {      sql.setNullString("unionNameId");     } else {    sql.setString("unionNameId", tzDevice.getUnionNameId());    }       if (StringUtil.isBlank(tzDevice.getViruSoftNameId())) {      sql.setNullString("viruSoftNameId");     } else {    sql.setString("viruSoftNameId", tzDevice.getViruSoftNameId());    }    if (tzDevice.getWarrantyDate() == null) {      sql.setNullDate("warrantyDate");     } else {    sql.setTimestamp("warrantyDate", tzDevice.getWarrantyDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzDeviceSVO tzDevice=(TzDeviceSVO) vo;    if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ARCHIVES_BUILD_DATE,BACK_SOFT_NAME_ID,BLONG_SYSTEM_ID,BUSINESS_DESC,CREATE_DAE,DB_NAME_ID,DEVICE_ADMIN_ID,DEVICE_NAME,DEVICE_NO,DEVICE_TYPE_ID,KEEP_WARRANTY_DATE,MANUFACTURER_ID,MIDDLEWARE_NAME_ID,MODEL_ID,OX_NAME_ID,PURPOSE_ID,REMARKS,ROOM_ID,STS,TZ_DEVICE_ID,UNION_NAME_ID,VIRU_SOFT_NAME_ID,WARRANTY_DATE FROM TZ_DEVICE WHERE 1=1  ");sql.append(" and TZ_DEVICE_ID=:tzDeviceId");sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tzDevice =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tzDevice = new TzDeviceSVO();           tzDevice.setArchivesBuildDate(rs.getTimestamp("ARCHIVES_BUILD_DATE"));           tzDevice.setBackSoftNameId(rs.getString("BACK_SOFT_NAME_ID"));           tzDevice.setBlongSystemId(rs.getString("BLONG_SYSTEM_ID"));           tzDevice.setBusinessDesc(rs.getString("BUSINESS_DESC"));           tzDevice.setCreateDae(rs.getTimestamp("CREATE_DAE"));           tzDevice.setDbNameId(rs.getString("DB_NAME_ID"));           tzDevice.setDeviceAdminId(rs.getString("DEVICE_ADMIN_ID"));           tzDevice.setDeviceName(rs.getString("DEVICE_NAME"));           tzDevice.setDeviceNo(rs.getString("DEVICE_NO"));           tzDevice.setDeviceTypeId(rs.getString("DEVICE_TYPE_ID"));           tzDevice.setKeepWarrantyDate(rs.getTimestamp("KEEP_WARRANTY_DATE"));           tzDevice.setManufacturerId(rs.getString("MANUFACTURER_ID"));           tzDevice.setMiddlewareNameId(rs.getString("MIDDLEWARE_NAME_ID"));           tzDevice.setModelId(rs.getString("MODEL_ID"));           tzDevice.setOxNameId(rs.getString("OX_NAME_ID"));           tzDevice.setPurposeId(rs.getString("PURPOSE_ID"));           tzDevice.setRemarks(rs.getString("REMARKS"));           tzDevice.setRoomId(rs.getString("ROOM_ID"));           tzDevice.setSts(rs.getString("STS"));           tzDevice.setTzDeviceId(rs.getString("TZ_DEVICE_ID"));           tzDevice.setUnionNameId(rs.getString("UNION_NAME_ID"));           tzDevice.setViruSoftNameId(rs.getString("VIRU_SOFT_NAME_ID"));           tzDevice.setWarrantyDate(rs.getTimestamp("WARRANTY_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tzDevice;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TzDeviceSVO tzDevice=(TzDeviceSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ARCHIVES_BUILD_DATE,BACK_SOFT_NAME_ID,BLONG_SYSTEM_ID,BUSINESS_DESC,CREATE_DAE,DB_NAME_ID,DEVICE_ADMIN_ID,DEVICE_NAME,DEVICE_NO,DEVICE_TYPE_ID,KEEP_WARRANTY_DATE,MANUFACTURER_ID,MIDDLEWARE_NAME_ID,MODEL_ID,OX_NAME_ID,PURPOSE_ID,REMARKS,ROOM_ID,STS,TZ_DEVICE_ID,UNION_NAME_ID,VIRU_SOFT_NAME_ID,WARRANTY_DATE FROM TZ_DEVICE WHERE 1=1 ");     try {if (tzDevice.getFlagArchivesBuildDate() == 1) {      if (tzDevice.getArchivesBuildDate() == null) {             sql.append(" and ARCHIVES_BUILD_DATE is null ");          }      else{             sql.append(" and ARCHIVES_BUILD_DATE=:archivesBuildDate");             sql.setTimestamp("archivesBuildDate", tzDevice.getArchivesBuildDate());          }   } if (tzDevice.getFlagBackSoftNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getBackSoftNameId())) {             sql.append(" and BACK_SOFT_NAME_ID is null ");          }      else{             sql.append(" and BACK_SOFT_NAME_ID=:backSoftNameId");             sql.setString("backSoftNameId", tzDevice.getBackSoftNameId());          }   } if (tzDevice.getFlagBlongSystemId() == 1) {      if (StringUtil.isBlank(tzDevice.getBlongSystemId())) {             sql.append(" and BLONG_SYSTEM_ID is null ");          }      else{             sql.append(" and BLONG_SYSTEM_ID=:blongSystemId");             sql.setString("blongSystemId", tzDevice.getBlongSystemId());          }   } if (tzDevice.getFlagBusinessDesc() == 1) {      if (StringUtil.isBlank(tzDevice.getBusinessDesc())) {             sql.append(" and BUSINESS_DESC is null ");          }      else{             sql.append(" and BUSINESS_DESC=:businessDesc");             sql.setString("businessDesc", tzDevice.getBusinessDesc());          }   } if (tzDevice.getFlagCreateDae() == 1) {      if (tzDevice.getCreateDae() == null) {             sql.append(" and CREATE_DAE is null ");          }      else{             sql.append(" and CREATE_DAE=:createDae");             sql.setTimestamp("createDae", tzDevice.getCreateDae());          }   } if (tzDevice.getFlagDbNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getDbNameId())) {             sql.append(" and DB_NAME_ID is null ");          }      else{             sql.append(" and DB_NAME_ID=:dbNameId");             sql.setString("dbNameId", tzDevice.getDbNameId());          }   } if (tzDevice.getFlagDeviceAdminId() == 1) {      if (StringUtil.isBlank(tzDevice.getDeviceAdminId())) {             sql.append(" and DEVICE_ADMIN_ID is null ");          }      else{             sql.append(" and DEVICE_ADMIN_ID=:deviceAdminId");             sql.setString("deviceAdminId", tzDevice.getDeviceAdminId());          }   } if (tzDevice.getFlagDeviceName() == 1) {      if (StringUtil.isBlank(tzDevice.getDeviceName())) {             sql.append(" and DEVICE_NAME is null ");          }      else{             sql.append(" and DEVICE_NAME=:deviceName");             sql.setString("deviceName", tzDevice.getDeviceName());          }   } if (tzDevice.getFlagDeviceNo() == 1) {      if (StringUtil.isBlank(tzDevice.getDeviceNo())) {             sql.append(" and DEVICE_NO is null ");          }      else{             sql.append(" and DEVICE_NO=:deviceNo");             sql.setString("deviceNo", tzDevice.getDeviceNo());          }   } if (tzDevice.getFlagDeviceTypeId() == 1) {      if (StringUtil.isBlank(tzDevice.getDeviceTypeId())) {             sql.append(" and DEVICE_TYPE_ID is null ");          }      else{             sql.append(" and DEVICE_TYPE_ID=:deviceTypeId");             sql.setString("deviceTypeId", tzDevice.getDeviceTypeId());          }   } if (tzDevice.getFlagKeepWarrantyDate() == 1) {      if (tzDevice.getKeepWarrantyDate() == null) {             sql.append(" and KEEP_WARRANTY_DATE is null ");          }      else{             sql.append(" and KEEP_WARRANTY_DATE=:keepWarrantyDate");             sql.setTimestamp("keepWarrantyDate", tzDevice.getKeepWarrantyDate());          }   } if (tzDevice.getFlagManufacturerId() == 1) {      if (StringUtil.isBlank(tzDevice.getManufacturerId())) {             sql.append(" and MANUFACTURER_ID is null ");          }      else{             sql.append(" and MANUFACTURER_ID=:manufacturerId");             sql.setString("manufacturerId", tzDevice.getManufacturerId());          }   } if (tzDevice.getFlagMiddlewareNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getMiddlewareNameId())) {             sql.append(" and MIDDLEWARE_NAME_ID is null ");          }      else{             sql.append(" and MIDDLEWARE_NAME_ID=:middlewareNameId");             sql.setString("middlewareNameId", tzDevice.getMiddlewareNameId());          }   } if (tzDevice.getFlagModelId() == 1) {      if (StringUtil.isBlank(tzDevice.getModelId())) {             sql.append(" and MODEL_ID is null ");          }      else{             sql.append(" and MODEL_ID=:modelId");             sql.setString("modelId", tzDevice.getModelId());          }   } if (tzDevice.getFlagOxNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getOxNameId())) {             sql.append(" and OX_NAME_ID is null ");          }      else{             sql.append(" and OX_NAME_ID=:oxNameId");             sql.setString("oxNameId", tzDevice.getOxNameId());          }   } if (tzDevice.getFlagPurposeId() == 1) {      if (StringUtil.isBlank(tzDevice.getPurposeId())) {             sql.append(" and PURPOSE_ID is null ");          }      else{             sql.append(" and PURPOSE_ID=:purposeId");             sql.setString("purposeId", tzDevice.getPurposeId());          }   } if (tzDevice.getFlagRemarks() == 1) {      if (StringUtil.isBlank(tzDevice.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", tzDevice.getRemarks());          }   } if (tzDevice.getFlagRoomId() == 1) {      if (StringUtil.isBlank(tzDevice.getRoomId())) {             sql.append(" and ROOM_ID is null ");          }      else{             sql.append(" and ROOM_ID=:roomId");             sql.setString("roomId", tzDevice.getRoomId());          }   } if (tzDevice.getFlagSts() == 1) {      if (StringUtil.isBlank(tzDevice.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", tzDevice.getSts());          }   } if (tzDevice.getFlagTzDeviceId() == 1) {      if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {             sql.append(" and TZ_DEVICE_ID is null ");          }      else{             sql.append(" and TZ_DEVICE_ID=:tzDeviceId");             sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());          }   } if (tzDevice.getFlagUnionNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getUnionNameId())) {             sql.append(" and UNION_NAME_ID is null ");          }      else{             sql.append(" and UNION_NAME_ID=:unionNameId");             sql.setString("unionNameId", tzDevice.getUnionNameId());          }   } if (tzDevice.getFlagViruSoftNameId() == 1) {      if (StringUtil.isBlank(tzDevice.getViruSoftNameId())) {             sql.append(" and VIRU_SOFT_NAME_ID is null ");          }      else{             sql.append(" and VIRU_SOFT_NAME_ID=:viruSoftNameId");             sql.setString("viruSoftNameId", tzDevice.getViruSoftNameId());          }   } if (tzDevice.getFlagWarrantyDate() == 1) {      if (tzDevice.getWarrantyDate() == null) {             sql.append(" and WARRANTY_DATE is null ");          }      else{             sql.append(" and WARRANTY_DATE=:warrantyDate");             sql.setTimestamp("warrantyDate", tzDevice.getWarrantyDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tzDevice = new TzDeviceSVO();           tzDevice.setArchivesBuildDate(rs.getTimestamp("ARCHIVES_BUILD_DATE"));           tzDevice.setBackSoftNameId(rs.getString("BACK_SOFT_NAME_ID"));           tzDevice.setBlongSystemId(rs.getString("BLONG_SYSTEM_ID"));           tzDevice.setBusinessDesc(rs.getString("BUSINESS_DESC"));           tzDevice.setCreateDae(rs.getTimestamp("CREATE_DAE"));           tzDevice.setDbNameId(rs.getString("DB_NAME_ID"));           tzDevice.setDeviceAdminId(rs.getString("DEVICE_ADMIN_ID"));           tzDevice.setDeviceName(rs.getString("DEVICE_NAME"));           tzDevice.setDeviceNo(rs.getString("DEVICE_NO"));           tzDevice.setDeviceTypeId(rs.getString("DEVICE_TYPE_ID"));           tzDevice.setKeepWarrantyDate(rs.getTimestamp("KEEP_WARRANTY_DATE"));           tzDevice.setManufacturerId(rs.getString("MANUFACTURER_ID"));           tzDevice.setMiddlewareNameId(rs.getString("MIDDLEWARE_NAME_ID"));           tzDevice.setModelId(rs.getString("MODEL_ID"));           tzDevice.setOxNameId(rs.getString("OX_NAME_ID"));           tzDevice.setPurposeId(rs.getString("PURPOSE_ID"));           tzDevice.setRemarks(rs.getString("REMARKS"));           tzDevice.setRoomId(rs.getString("ROOM_ID"));           tzDevice.setSts(rs.getString("STS"));           tzDevice.setTzDeviceId(rs.getString("TZ_DEVICE_ID"));           tzDevice.setUnionNameId(rs.getString("UNION_NAME_ID"));           tzDevice.setViruSoftNameId(rs.getString("VIRU_SOFT_NAME_ID"));           tzDevice.setWarrantyDate(rs.getTimestamp("WARRANTY_DATE"));               res.add(tzDevice);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TzDeviceSVO tzDevice=(TzDeviceSVO) vo;    if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TZ_DEVICE SET ");     try {if (tzDevice.getFlagArchivesBuildDate() == 1) {sql.append("ARCHIVES_BUILD_DATE=:archivesBuildDate,"); sql.setTimestamp("archivesBuildDate", tzDevice.getArchivesBuildDate()); } if (tzDevice.getFlagBackSoftNameId() == 1) {sql.append("BACK_SOFT_NAME_ID=:backSoftNameId,"); sql.setString("backSoftNameId", tzDevice.getBackSoftNameId()); } if (tzDevice.getFlagBlongSystemId() == 1) {sql.append("BLONG_SYSTEM_ID=:blongSystemId,"); sql.setString("blongSystemId", tzDevice.getBlongSystemId()); } if (tzDevice.getFlagBusinessDesc() == 1) {sql.append("BUSINESS_DESC=:businessDesc,"); sql.setString("businessDesc", tzDevice.getBusinessDesc()); } if (tzDevice.getFlagCreateDae() == 1) {sql.append("CREATE_DAE=:createDae,"); sql.setTimestamp("createDae", tzDevice.getCreateDae()); } if (tzDevice.getFlagDbNameId() == 1) {sql.append("DB_NAME_ID=:dbNameId,"); sql.setString("dbNameId", tzDevice.getDbNameId()); } if (tzDevice.getFlagDeviceAdminId() == 1) {sql.append("DEVICE_ADMIN_ID=:deviceAdminId,"); sql.setString("deviceAdminId", tzDevice.getDeviceAdminId()); } if (tzDevice.getFlagDeviceName() == 1) {sql.append("DEVICE_NAME=:deviceName,"); sql.setString("deviceName", tzDevice.getDeviceName()); } if (tzDevice.getFlagDeviceNo() == 1) {sql.append("DEVICE_NO=:deviceNo,"); sql.setString("deviceNo", tzDevice.getDeviceNo()); } if (tzDevice.getFlagDeviceTypeId() == 1) {sql.append("DEVICE_TYPE_ID=:deviceTypeId,"); sql.setString("deviceTypeId", tzDevice.getDeviceTypeId()); } if (tzDevice.getFlagKeepWarrantyDate() == 1) {sql.append("KEEP_WARRANTY_DATE=:keepWarrantyDate,"); sql.setTimestamp("keepWarrantyDate", tzDevice.getKeepWarrantyDate()); } if (tzDevice.getFlagManufacturerId() == 1) {sql.append("MANUFACTURER_ID=:manufacturerId,"); sql.setString("manufacturerId", tzDevice.getManufacturerId()); } if (tzDevice.getFlagMiddlewareNameId() == 1) {sql.append("MIDDLEWARE_NAME_ID=:middlewareNameId,"); sql.setString("middlewareNameId", tzDevice.getMiddlewareNameId()); } if (tzDevice.getFlagModelId() == 1) {sql.append("MODEL_ID=:modelId,"); sql.setString("modelId", tzDevice.getModelId()); } if (tzDevice.getFlagOxNameId() == 1) {sql.append("OX_NAME_ID=:oxNameId,"); sql.setString("oxNameId", tzDevice.getOxNameId()); } if (tzDevice.getFlagPurposeId() == 1) {sql.append("PURPOSE_ID=:purposeId,"); sql.setString("purposeId", tzDevice.getPurposeId()); } if (tzDevice.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", tzDevice.getRemarks()); } if (tzDevice.getFlagRoomId() == 1) {sql.append("ROOM_ID=:roomId,"); sql.setString("roomId", tzDevice.getRoomId()); } if (tzDevice.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", tzDevice.getSts()); } if (tzDevice.getFlagUnionNameId() == 1) {sql.append("UNION_NAME_ID=:unionNameId,"); sql.setString("unionNameId", tzDevice.getUnionNameId()); } if (tzDevice.getFlagViruSoftNameId() == 1) {sql.append("VIRU_SOFT_NAME_ID=:viruSoftNameId,"); sql.setString("viruSoftNameId", tzDevice.getViruSoftNameId()); } if (tzDevice.getFlagWarrantyDate() == 1) {sql.append("WARRANTY_DATE=:warrantyDate,"); sql.setTimestamp("warrantyDate", tzDevice.getWarrantyDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and TZ_DEVICE_ID=:tzDeviceId");sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TZ_DEVICE(ARCHIVES_BUILD_DATE,BACK_SOFT_NAME_ID,BLONG_SYSTEM_ID,BUSINESS_DESC,CREATE_DAE,DB_NAME_ID,DEVICE_ADMIN_ID,DEVICE_NAME,DEVICE_NO,DEVICE_TYPE_ID,KEEP_WARRANTY_DATE,MANUFACTURER_ID,MIDDLEWARE_NAME_ID,MODEL_ID,OX_NAME_ID,PURPOSE_ID,REMARKS,ROOM_ID,STS,TZ_DEVICE_ID,UNION_NAME_ID,VIRU_SOFT_NAME_ID,WARRANTY_DATE)");sql.append(" VALUES (:archivesBuildDate,:backSoftNameId,:blongSystemId,:businessDesc,:createDae,:dbNameId,:deviceAdminId,:deviceName,:deviceNo,:deviceTypeId,:keepWarrantyDate,:manufacturerId,:middlewareNameId,:modelId,:oxNameId,:purposeId,:remarks,:roomId,:sts,:tzDeviceId,:unionNameId,:viruSoftNameId,:warrantyDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TzDeviceSVO tzDevice=(TzDeviceSVO) list.get(i);         if (tzDevice== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (tzDevice.getArchivesBuildDate() == null) {      sql.setNullDate("archivesBuildDate");     } else {    sql.setTimestamp("archivesBuildDate", tzDevice.getArchivesBuildDate());    }       if (StringUtil.isBlank(tzDevice.getBackSoftNameId())) {      sql.setNullString("backSoftNameId");     } else {    sql.setString("backSoftNameId", tzDevice.getBackSoftNameId());    }       if (StringUtil.isBlank(tzDevice.getBlongSystemId())) {      sql.setNullString("blongSystemId");     } else {    sql.setString("blongSystemId", tzDevice.getBlongSystemId());    }       if (StringUtil.isBlank(tzDevice.getBusinessDesc())) {      sql.setNullString("businessDesc");     } else {    sql.setString("businessDesc", tzDevice.getBusinessDesc());    }    if (tzDevice.getCreateDae() == null) {      sql.setNullDate("createDae");     } else {    sql.setTimestamp("createDae", tzDevice.getCreateDae());    }       if (StringUtil.isBlank(tzDevice.getDbNameId())) {      sql.setNullString("dbNameId");     } else {    sql.setString("dbNameId", tzDevice.getDbNameId());    }       if (StringUtil.isBlank(tzDevice.getDeviceAdminId())) {      sql.setNullString("deviceAdminId");     } else {    sql.setString("deviceAdminId", tzDevice.getDeviceAdminId());    }       if (StringUtil.isBlank(tzDevice.getDeviceName())) {      sql.setNullString("deviceName");     } else {    sql.setString("deviceName", tzDevice.getDeviceName());    }       if (StringUtil.isBlank(tzDevice.getDeviceNo())) {      sql.setNullString("deviceNo");     } else {    sql.setString("deviceNo", tzDevice.getDeviceNo());    }       if (StringUtil.isBlank(tzDevice.getDeviceTypeId())) {      sql.setNullString("deviceTypeId");     } else {    sql.setString("deviceTypeId", tzDevice.getDeviceTypeId());    }    if (tzDevice.getKeepWarrantyDate() == null) {      sql.setNullDate("keepWarrantyDate");     } else {    sql.setTimestamp("keepWarrantyDate", tzDevice.getKeepWarrantyDate());    }       if (StringUtil.isBlank(tzDevice.getManufacturerId())) {      sql.setNullString("manufacturerId");     } else {    sql.setString("manufacturerId", tzDevice.getManufacturerId());    }       if (StringUtil.isBlank(tzDevice.getMiddlewareNameId())) {      sql.setNullString("middlewareNameId");     } else {    sql.setString("middlewareNameId", tzDevice.getMiddlewareNameId());    }       if (StringUtil.isBlank(tzDevice.getModelId())) {      sql.setNullString("modelId");     } else {    sql.setString("modelId", tzDevice.getModelId());    }       if (StringUtil.isBlank(tzDevice.getOxNameId())) {      sql.setNullString("oxNameId");     } else {    sql.setString("oxNameId", tzDevice.getOxNameId());    }       if (StringUtil.isBlank(tzDevice.getPurposeId())) {      sql.setNullString("purposeId");     } else {    sql.setString("purposeId", tzDevice.getPurposeId());    }       if (StringUtil.isBlank(tzDevice.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tzDevice.getRemarks());    }       if (StringUtil.isBlank(tzDevice.getRoomId())) {      sql.setNullString("roomId");     } else {    sql.setString("roomId", tzDevice.getRoomId());    }       if (StringUtil.isBlank(tzDevice.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", tzDevice.getSts());    }       if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {      sql.setNullLong("tzDeviceId");     } else {    sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());    }       if (StringUtil.isBlank(tzDevice.getUnionNameId())) {      sql.setNullString("unionNameId");     } else {    sql.setString("unionNameId", tzDevice.getUnionNameId());    }       if (StringUtil.isBlank(tzDevice.getViruSoftNameId())) {      sql.setNullString("viruSoftNameId");     } else {    sql.setString("viruSoftNameId", tzDevice.getViruSoftNameId());    }    if (tzDevice.getWarrantyDate() == null) {      sql.setNullDate("warrantyDate");     } else {    sql.setTimestamp("warrantyDate", tzDevice.getWarrantyDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzDeviceSVO tzDevice=(TzDeviceSVO) vo;    if (StringUtil.isBlank(tzDevice.getTzDeviceId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TZ_DEVICE WHERE 1=1  ");sql.append(" and TZ_DEVICE_ID=:tzDeviceId");sql.setLong("tzDeviceId", tzDevice.getTzDeviceId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TzDeviceSVO tzDevice=(TzDeviceSVO) vo;       }}
