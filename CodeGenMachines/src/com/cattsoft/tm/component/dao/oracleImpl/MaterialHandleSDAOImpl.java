package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IMaterialHandleSDAO;import com.cattsoft.tm.vo.MaterialHandleSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法MaterialHandleSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class MaterialHandleSDAOImpl implements IMaterialHandleSDAO{    private static Logger log = Logger.getLogger(MaterialHandleSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO MATERIAL_HANDLE(HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,MATERIAL_HANDLE_ID,MATERIAL_ID,MATERIAL_SPEC_ID,MATERIAL_STOCK_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,SITUATED,SO_NBR,STAFF_ID,STS,STS_DATE,USED_AMOUNT,WO_NBR)");sql.append(" VALUES (:handleDate,:handleTypeId,:localNetId,:materialHandleId,:materialId,:materialSpecId,:materialStockId,:objectId,:objectType,:remarks,:situated,:soNbr,:staffId,:sts,:stsDate,:usedAmount,:woNbr)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (materialHandle.getHandleDate() == null) {      sql.setNullDate("handleDate");     } else {    sql.setTimestamp("handleDate", materialHandle.getHandleDate());    }       if (StringUtil.isBlank(materialHandle.getHandleTypeId())) {      sql.setNullLong("handleTypeId");     } else {    sql.setLong("handleTypeId", materialHandle.getHandleTypeId());    }       if (StringUtil.isBlank(materialHandle.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", materialHandle.getLocalNetId());    }       if (StringUtil.isBlank(materialHandle.getMaterialHandleId())) {      sql.setNullLong("materialHandleId");     } else {    sql.setLong("materialHandleId", materialHandle.getMaterialHandleId());    }       if (StringUtil.isBlank(materialHandle.getMaterialId())) {      sql.setNullLong("materialId");     } else {    sql.setLong("materialId", materialHandle.getMaterialId());    }       if (StringUtil.isBlank(materialHandle.getMaterialSpecId())) {      sql.setNullLong("materialSpecId");     } else {    sql.setLong("materialSpecId", materialHandle.getMaterialSpecId());    }       if (StringUtil.isBlank(materialHandle.getMaterialStockId())) {      sql.setNullLong("materialStockId");     } else {    sql.setLong("materialStockId", materialHandle.getMaterialStockId());    }       if (StringUtil.isBlank(materialHandle.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", materialHandle.getObjectId());    }       if (StringUtil.isBlank(materialHandle.getObjectType())) {      sql.setNullString("objectType");     } else {    sql.setString("objectType", materialHandle.getObjectType());    }       if (StringUtil.isBlank(materialHandle.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", materialHandle.getRemarks());    }       if (StringUtil.isBlank(materialHandle.getSituated())) {      sql.setNullString("situated");     } else {    sql.setString("situated", materialHandle.getSituated());    }       if (StringUtil.isBlank(materialHandle.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", materialHandle.getSoNbr());    }       if (StringUtil.isBlank(materialHandle.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", materialHandle.getStaffId());    }       if (StringUtil.isBlank(materialHandle.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", materialHandle.getSts());    }    if (materialHandle.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", materialHandle.getStsDate());    }       if (StringUtil.isBlank(materialHandle.getUsedAmount())) {      sql.setNullLong("usedAmount");     } else {    sql.setLong("usedAmount", materialHandle.getUsedAmount());    }       if (StringUtil.isBlank(materialHandle.getWoNbr())) {      sql.setNullLong("woNbr");     } else {    sql.setLong("woNbr", materialHandle.getWoNbr());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;       Sql sql = new Sql("SELECT HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,MATERIAL_HANDLE_ID,MATERIAL_ID,MATERIAL_SPEC_ID,MATERIAL_STOCK_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,SITUATED,SO_NBR,STAFF_ID,STS,STS_DATE,USED_AMOUNT,WO_NBR FROM MATERIAL_HANDLE WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      materialHandle =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           materialHandle = new MaterialHandleSVO();           materialHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));           materialHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));           materialHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));           materialHandle.setMaterialHandleId(rs.getString("MATERIAL_HANDLE_ID"));           materialHandle.setMaterialId(rs.getString("MATERIAL_ID"));           materialHandle.setMaterialSpecId(rs.getString("MATERIAL_SPEC_ID"));           materialHandle.setMaterialStockId(rs.getString("MATERIAL_STOCK_ID"));           materialHandle.setObjectId(rs.getString("OBJECT_ID"));           materialHandle.setObjectType(rs.getString("OBJECT_TYPE"));           materialHandle.setRemarks(rs.getString("REMARKS"));           materialHandle.setSituated(rs.getString("SITUATED"));           materialHandle.setSoNbr(rs.getString("SO_NBR"));           materialHandle.setStaffId(rs.getString("STAFF_ID"));           materialHandle.setSts(rs.getString("STS"));           materialHandle.setStsDate(rs.getTimestamp("STS_DATE"));           materialHandle.setUsedAmount(rs.getString("USED_AMOUNT"));           materialHandle.setWoNbr(rs.getString("WO_NBR"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return materialHandle;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,MATERIAL_HANDLE_ID,MATERIAL_ID,MATERIAL_SPEC_ID,MATERIAL_STOCK_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,SITUATED,SO_NBR,STAFF_ID,STS,STS_DATE,USED_AMOUNT,WO_NBR FROM MATERIAL_HANDLE WHERE 1=1 ");     try {if (materialHandle.getFlagHandleDate() == 1) {      if (materialHandle.getHandleDate() == null) {             sql.append(" and HANDLE_DATE is null ");          }      else{             sql.append(" and HANDLE_DATE=:handleDate");             sql.setTimestamp("handleDate", materialHandle.getHandleDate());          }   } if (materialHandle.getFlagHandleTypeId() == 1) {      if (StringUtil.isBlank(materialHandle.getHandleTypeId())) {             sql.append(" and HANDLE_TYPE_ID is null ");          }      else{             sql.append(" and HANDLE_TYPE_ID=:handleTypeId");             sql.setLong("handleTypeId", materialHandle.getHandleTypeId());          }   } if (materialHandle.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(materialHandle.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", materialHandle.getLocalNetId());          }   } if (materialHandle.getFlagMaterialHandleId() == 1) {      if (StringUtil.isBlank(materialHandle.getMaterialHandleId())) {             sql.append(" and MATERIAL_HANDLE_ID is null ");          }      else{             sql.append(" and MATERIAL_HANDLE_ID=:materialHandleId");             sql.setLong("materialHandleId", materialHandle.getMaterialHandleId());          }   } if (materialHandle.getFlagMaterialId() == 1) {      if (StringUtil.isBlank(materialHandle.getMaterialId())) {             sql.append(" and MATERIAL_ID is null ");          }      else{             sql.append(" and MATERIAL_ID=:materialId");             sql.setLong("materialId", materialHandle.getMaterialId());          }   } if (materialHandle.getFlagMaterialSpecId() == 1) {      if (StringUtil.isBlank(materialHandle.getMaterialSpecId())) {             sql.append(" and MATERIAL_SPEC_ID is null ");          }      else{             sql.append(" and MATERIAL_SPEC_ID=:materialSpecId");             sql.setLong("materialSpecId", materialHandle.getMaterialSpecId());          }   } if (materialHandle.getFlagMaterialStockId() == 1) {      if (StringUtil.isBlank(materialHandle.getMaterialStockId())) {             sql.append(" and MATERIAL_STOCK_ID is null ");          }      else{             sql.append(" and MATERIAL_STOCK_ID=:materialStockId");             sql.setLong("materialStockId", materialHandle.getMaterialStockId());          }   } if (materialHandle.getFlagObjectId() == 1) {      if (StringUtil.isBlank(materialHandle.getObjectId())) {             sql.append(" and OBJECT_ID is null ");          }      else{             sql.append(" and OBJECT_ID=:objectId");             sql.setLong("objectId", materialHandle.getObjectId());          }   } if (materialHandle.getFlagObjectType() == 1) {      if (StringUtil.isBlank(materialHandle.getObjectType())) {             sql.append(" and OBJECT_TYPE is null ");          }      else{             sql.append(" and OBJECT_TYPE=:objectType");             sql.setString("objectType", materialHandle.getObjectType());          }   } if (materialHandle.getFlagRemarks() == 1) {      if (StringUtil.isBlank(materialHandle.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", materialHandle.getRemarks());          }   } if (materialHandle.getFlagSituated() == 1) {      if (StringUtil.isBlank(materialHandle.getSituated())) {             sql.append(" and SITUATED is null ");          }      else{             sql.append(" and SITUATED=:situated");             sql.setString("situated", materialHandle.getSituated());          }   } if (materialHandle.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(materialHandle.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", materialHandle.getSoNbr());          }   } if (materialHandle.getFlagStaffId() == 1) {      if (StringUtil.isBlank(materialHandle.getStaffId())) {             sql.append(" and STAFF_ID is null ");          }      else{             sql.append(" and STAFF_ID=:staffId");             sql.setLong("staffId", materialHandle.getStaffId());          }   } if (materialHandle.getFlagSts() == 1) {      if (StringUtil.isBlank(materialHandle.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", materialHandle.getSts());          }   } if (materialHandle.getFlagStsDate() == 1) {      if (materialHandle.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", materialHandle.getStsDate());          }   } if (materialHandle.getFlagUsedAmount() == 1) {      if (StringUtil.isBlank(materialHandle.getUsedAmount())) {             sql.append(" and USED_AMOUNT is null ");          }      else{             sql.append(" and USED_AMOUNT=:usedAmount");             sql.setLong("usedAmount", materialHandle.getUsedAmount());          }   } if (materialHandle.getFlagWoNbr() == 1) {      if (StringUtil.isBlank(materialHandle.getWoNbr())) {             sql.append(" and WO_NBR is null ");          }      else{             sql.append(" and WO_NBR=:woNbr");             sql.setLong("woNbr", materialHandle.getWoNbr());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           materialHandle = new MaterialHandleSVO();           materialHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));           materialHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));           materialHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));           materialHandle.setMaterialHandleId(rs.getString("MATERIAL_HANDLE_ID"));           materialHandle.setMaterialId(rs.getString("MATERIAL_ID"));           materialHandle.setMaterialSpecId(rs.getString("MATERIAL_SPEC_ID"));           materialHandle.setMaterialStockId(rs.getString("MATERIAL_STOCK_ID"));           materialHandle.setObjectId(rs.getString("OBJECT_ID"));           materialHandle.setObjectType(rs.getString("OBJECT_TYPE"));           materialHandle.setRemarks(rs.getString("REMARKS"));           materialHandle.setSituated(rs.getString("SITUATED"));           materialHandle.setSoNbr(rs.getString("SO_NBR"));           materialHandle.setStaffId(rs.getString("STAFF_ID"));           materialHandle.setSts(rs.getString("STS"));           materialHandle.setStsDate(rs.getTimestamp("STS_DATE"));           materialHandle.setUsedAmount(rs.getString("USED_AMOUNT"));           materialHandle.setWoNbr(rs.getString("WO_NBR"));               res.add(materialHandle);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE MATERIAL_HANDLE SET ");     try {if (materialHandle.getFlagHandleDate() == 1) {sql.append("HANDLE_DATE=:handleDate,"); sql.setTimestamp("handleDate", materialHandle.getHandleDate()); } if (materialHandle.getFlagHandleTypeId() == 1) {sql.append("HANDLE_TYPE_ID=:handleTypeId,");sql.setLong("handleTypeId", materialHandle.getHandleTypeId()); } if (materialHandle.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", materialHandle.getLocalNetId()); } if (materialHandle.getFlagMaterialHandleId() == 1) {sql.append("MATERIAL_HANDLE_ID=:materialHandleId,");sql.setLong("materialHandleId", materialHandle.getMaterialHandleId()); } if (materialHandle.getFlagMaterialId() == 1) {sql.append("MATERIAL_ID=:materialId,");sql.setLong("materialId", materialHandle.getMaterialId()); } if (materialHandle.getFlagMaterialSpecId() == 1) {sql.append("MATERIAL_SPEC_ID=:materialSpecId,");sql.setLong("materialSpecId", materialHandle.getMaterialSpecId()); } if (materialHandle.getFlagMaterialStockId() == 1) {sql.append("MATERIAL_STOCK_ID=:materialStockId,");sql.setLong("materialStockId", materialHandle.getMaterialStockId()); } if (materialHandle.getFlagObjectId() == 1) {sql.append("OBJECT_ID=:objectId,");sql.setLong("objectId", materialHandle.getObjectId()); } if (materialHandle.getFlagObjectType() == 1) {sql.append("OBJECT_TYPE=:objectType,"); sql.setString("objectType", materialHandle.getObjectType()); } if (materialHandle.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", materialHandle.getRemarks()); } if (materialHandle.getFlagSituated() == 1) {sql.append("SITUATED=:situated,"); sql.setString("situated", materialHandle.getSituated()); } if (materialHandle.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", materialHandle.getSoNbr()); } if (materialHandle.getFlagStaffId() == 1) {sql.append("STAFF_ID=:staffId,");sql.setLong("staffId", materialHandle.getStaffId()); } if (materialHandle.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", materialHandle.getSts()); } if (materialHandle.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", materialHandle.getStsDate()); } if (materialHandle.getFlagUsedAmount() == 1) {sql.append("USED_AMOUNT=:usedAmount,");sql.setLong("usedAmount", materialHandle.getUsedAmount()); } if (materialHandle.getFlagWoNbr() == 1) {sql.append("WO_NBR=:woNbr,");sql.setLong("woNbr", materialHandle.getWoNbr()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO MATERIAL_HANDLE(HANDLE_DATE,HANDLE_TYPE_ID,LOCAL_NET_ID,MATERIAL_HANDLE_ID,MATERIAL_ID,MATERIAL_SPEC_ID,MATERIAL_STOCK_ID,OBJECT_ID,OBJECT_TYPE,REMARKS,SITUATED,SO_NBR,STAFF_ID,STS,STS_DATE,USED_AMOUNT,WO_NBR)");sql.append(" VALUES (:handleDate,:handleTypeId,:localNetId,:materialHandleId,:materialId,:materialSpecId,:materialStockId,:objectId,:objectType,:remarks,:situated,:soNbr,:staffId,:sts,:stsDate,:usedAmount,:woNbr)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       MaterialHandleSVO materialHandle=(MaterialHandleSVO) list.get(i);         if (materialHandle== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (materialHandle.getHandleDate() == null) {      sql.setNullDate("handleDate");     } else {    sql.setTimestamp("handleDate", materialHandle.getHandleDate());    }       if (StringUtil.isBlank(materialHandle.getHandleTypeId())) {      sql.setNullLong("handleTypeId");     } else {    sql.setLong("handleTypeId", materialHandle.getHandleTypeId());    }       if (StringUtil.isBlank(materialHandle.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", materialHandle.getLocalNetId());    }       if (StringUtil.isBlank(materialHandle.getMaterialHandleId())) {      sql.setNullLong("materialHandleId");     } else {    sql.setLong("materialHandleId", materialHandle.getMaterialHandleId());    }       if (StringUtil.isBlank(materialHandle.getMaterialId())) {      sql.setNullLong("materialId");     } else {    sql.setLong("materialId", materialHandle.getMaterialId());    }       if (StringUtil.isBlank(materialHandle.getMaterialSpecId())) {      sql.setNullLong("materialSpecId");     } else {    sql.setLong("materialSpecId", materialHandle.getMaterialSpecId());    }       if (StringUtil.isBlank(materialHandle.getMaterialStockId())) {      sql.setNullLong("materialStockId");     } else {    sql.setLong("materialStockId", materialHandle.getMaterialStockId());    }       if (StringUtil.isBlank(materialHandle.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", materialHandle.getObjectId());    }       if (StringUtil.isBlank(materialHandle.getObjectType())) {      sql.setNullString("objectType");     } else {    sql.setString("objectType", materialHandle.getObjectType());    }       if (StringUtil.isBlank(materialHandle.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", materialHandle.getRemarks());    }       if (StringUtil.isBlank(materialHandle.getSituated())) {      sql.setNullString("situated");     } else {    sql.setString("situated", materialHandle.getSituated());    }       if (StringUtil.isBlank(materialHandle.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", materialHandle.getSoNbr());    }       if (StringUtil.isBlank(materialHandle.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", materialHandle.getStaffId());    }       if (StringUtil.isBlank(materialHandle.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", materialHandle.getSts());    }    if (materialHandle.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", materialHandle.getStsDate());    }       if (StringUtil.isBlank(materialHandle.getUsedAmount())) {      sql.setNullLong("usedAmount");     } else {    sql.setLong("usedAmount", materialHandle.getUsedAmount());    }       if (StringUtil.isBlank(materialHandle.getWoNbr())) {      sql.setNullLong("woNbr");     } else {    sql.setLong("woNbr", materialHandle.getWoNbr());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM MATERIAL_HANDLE WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     MaterialHandleSVO materialHandle=(MaterialHandleSVO) vo;       }}
