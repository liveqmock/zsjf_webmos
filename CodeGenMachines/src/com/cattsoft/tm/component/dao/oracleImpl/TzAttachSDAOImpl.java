package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITzAttachSDAO;import com.cattsoft.tm.vo.TzAttachSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TzAttachSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TzAttachSDAOImpl implements ITzAttachSDAO{    private static Logger log = Logger.getLogger(TzAttachSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzAttachSVO tzAttach=(TzAttachSVO) vo;    if (StringUtil.isBlank(tzAttach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TZ_ATTACH(ATTACH_ID,ATTACMET,ATTA_DESC,CREATE_TIME,FILE_NAME,FOR_SCENE,OBJECT_ID,REMARKS)");sql.append(" VALUES (:attachId,:attacmet,:attaDesc,:createTime,:fileName,:forScene,:objectId,:remarks)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tzAttach.getAttachId())) {      sql.setNullLong("attachId");     } else {    sql.setLong("attachId", tzAttach.getAttachId());    }       if (tzAttach.getAttacmet() == null) {      sql.setNullBlob("attacmet");     } else {    sql.setBlob("attacmet", tzAttach.getAttacmet());    }       if (StringUtil.isBlank(tzAttach.getAttaDesc())) {      sql.setNullString("attaDesc");     } else {    sql.setString("attaDesc", tzAttach.getAttaDesc());    }    if (tzAttach.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", tzAttach.getCreateTime());    }       if (StringUtil.isBlank(tzAttach.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", tzAttach.getFileName());    }       if (StringUtil.isBlank(tzAttach.getForScene())) {      sql.setNullString("forScene");     } else {    sql.setString("forScene", tzAttach.getForScene());    }       if (StringUtil.isBlank(tzAttach.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", tzAttach.getObjectId());    }       if (StringUtil.isBlank(tzAttach.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tzAttach.getRemarks());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzAttachSVO tzAttach=(TzAttachSVO) vo;    if (StringUtil.isBlank(tzAttach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ATTACH_ID,ATTACMET,ATTA_DESC,CREATE_TIME,FILE_NAME,FOR_SCENE,OBJECT_ID,REMARKS FROM TZ_ATTACH WHERE 1=1  ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", tzAttach.getAttachId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tzAttach =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tzAttach = new TzAttachSVO();           tzAttach.setAttachId(rs.getString("ATTACH_ID"));           tzAttach.setAttacmet(rs.getBlob("ATTACMET"));           tzAttach.setAttaDesc(rs.getString("ATTA_DESC"));           tzAttach.setCreateTime(rs.getTimestamp("CREATE_TIME"));           tzAttach.setFileName(rs.getString("FILE_NAME"));           tzAttach.setForScene(rs.getString("FOR_SCENE"));           tzAttach.setObjectId(rs.getString("OBJECT_ID"));           tzAttach.setRemarks(rs.getString("REMARKS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tzAttach;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TzAttachSVO tzAttach=(TzAttachSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ATTACH_ID,ATTACMET,ATTA_DESC,CREATE_TIME,FILE_NAME,FOR_SCENE,OBJECT_ID,REMARKS FROM TZ_ATTACH WHERE 1=1 ");     try {if (tzAttach.getFlagAttachId() == 1) {      if (StringUtil.isBlank(tzAttach.getAttachId())) {             sql.append(" and ATTACH_ID is null ");          }      else{             sql.append(" and ATTACH_ID=:attachId");             sql.setLong("attachId", tzAttach.getAttachId());          }   } if (tzAttach.getFlagAttacmet() == 1) {      if (tzAttach.getAttacmet() == null) {             sql.append(" and ATTACMET is null ");          }      else{             sql.append(" and ATTACMET=:attacmet");             sql.setBlob("attacmet", tzAttach.getAttacmet());          }   } if (tzAttach.getFlagAttaDesc() == 1) {      if (StringUtil.isBlank(tzAttach.getAttaDesc())) {             sql.append(" and ATTA_DESC is null ");          }      else{             sql.append(" and ATTA_DESC=:attaDesc");             sql.setString("attaDesc", tzAttach.getAttaDesc());          }   } if (tzAttach.getFlagCreateTime() == 1) {      if (tzAttach.getCreateTime() == null) {             sql.append(" and CREATE_TIME is null ");          }      else{             sql.append(" and CREATE_TIME=:createTime");             sql.setTimestamp("createTime", tzAttach.getCreateTime());          }   } if (tzAttach.getFlagFileName() == 1) {      if (StringUtil.isBlank(tzAttach.getFileName())) {             sql.append(" and FILE_NAME is null ");          }      else{             sql.append(" and FILE_NAME=:fileName");             sql.setString("fileName", tzAttach.getFileName());          }   } if (tzAttach.getFlagForScene() == 1) {      if (StringUtil.isBlank(tzAttach.getForScene())) {             sql.append(" and FOR_SCENE is null ");          }      else{             sql.append(" and FOR_SCENE=:forScene");             sql.setString("forScene", tzAttach.getForScene());          }   } if (tzAttach.getFlagObjectId() == 1) {      if (StringUtil.isBlank(tzAttach.getObjectId())) {             sql.append(" and OBJECT_ID is null ");          }      else{             sql.append(" and OBJECT_ID=:objectId");             sql.setLong("objectId", tzAttach.getObjectId());          }   } if (tzAttach.getFlagRemarks() == 1) {      if (StringUtil.isBlank(tzAttach.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", tzAttach.getRemarks());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tzAttach = new TzAttachSVO();           tzAttach.setAttachId(rs.getString("ATTACH_ID"));           tzAttach.setAttacmet(rs.getBlob("ATTACMET"));           tzAttach.setAttaDesc(rs.getString("ATTA_DESC"));           tzAttach.setCreateTime(rs.getTimestamp("CREATE_TIME"));           tzAttach.setFileName(rs.getString("FILE_NAME"));           tzAttach.setForScene(rs.getString("FOR_SCENE"));           tzAttach.setObjectId(rs.getString("OBJECT_ID"));           tzAttach.setRemarks(rs.getString("REMARKS"));               res.add(tzAttach);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TzAttachSVO tzAttach=(TzAttachSVO) vo;    if (StringUtil.isBlank(tzAttach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE TZ_ATTACH SET ");     try {if (tzAttach.getFlagAttacmet() == 1) {sql.append("ATTACMET=:attacmet,"); sql.setBlob("attacmet", tzAttach.getAttacmet()); } if (tzAttach.getFlagAttaDesc() == 1) {sql.append("ATTA_DESC=:attaDesc,"); sql.setString("attaDesc", tzAttach.getAttaDesc()); } if (tzAttach.getFlagCreateTime() == 1) {sql.append("CREATE_TIME=:createTime,"); sql.setTimestamp("createTime", tzAttach.getCreateTime()); } if (tzAttach.getFlagFileName() == 1) {sql.append("FILE_NAME=:fileName,"); sql.setString("fileName", tzAttach.getFileName()); } if (tzAttach.getFlagForScene() == 1) {sql.append("FOR_SCENE=:forScene,"); sql.setString("forScene", tzAttach.getForScene()); } if (tzAttach.getFlagObjectId() == 1) {sql.append("OBJECT_ID=:objectId,");sql.setLong("objectId", tzAttach.getObjectId()); } if (tzAttach.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", tzAttach.getRemarks()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", tzAttach.getAttachId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO TZ_ATTACH(ATTACH_ID,ATTACMET,ATTA_DESC,CREATE_TIME,FILE_NAME,FOR_SCENE,OBJECT_ID,REMARKS)");sql.append(" VALUES (:attachId,:attacmet,:attaDesc,:createTime,:fileName,:forScene,:objectId,:remarks)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TzAttachSVO tzAttach=(TzAttachSVO) list.get(i);         if (tzAttach== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tzAttach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(tzAttach.getAttachId())) {      sql.setNullLong("attachId");     } else {    sql.setLong("attachId", tzAttach.getAttachId());    }       if (tzAttach.getAttacmet() == null) {      sql.setNullBlob("attacmet");     } else {    sql.setBlob("attacmet", tzAttach.getAttacmet());    }       if (StringUtil.isBlank(tzAttach.getAttaDesc())) {      sql.setNullString("attaDesc");     } else {    sql.setString("attaDesc", tzAttach.getAttaDesc());    }    if (tzAttach.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", tzAttach.getCreateTime());    }       if (StringUtil.isBlank(tzAttach.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", tzAttach.getFileName());    }       if (StringUtil.isBlank(tzAttach.getForScene())) {      sql.setNullString("forScene");     } else {    sql.setString("forScene", tzAttach.getForScene());    }       if (StringUtil.isBlank(tzAttach.getObjectId())) {      sql.setNullLong("objectId");     } else {    sql.setLong("objectId", tzAttach.getObjectId());    }       if (StringUtil.isBlank(tzAttach.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tzAttach.getRemarks());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TzAttachSVO tzAttach=(TzAttachSVO) vo;    if (StringUtil.isBlank(tzAttach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM TZ_ATTACH WHERE 1=1  ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", tzAttach.getAttachId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TzAttachSVO tzAttach=(TzAttachSVO) vo;       }}
