package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ISpjkTableSDAO;import com.cattsoft.tm.vo.SpjkTableSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SpjkTableSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SpjkTableSDAOImpl implements ISpjkTableSDAO{    private static Logger log = Logger.getLogger(SpjkTableSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SpjkTableSVO spjkTable=(SpjkTableSVO) vo;    if (StringUtil.isBlank(spjkTable.getSpjkId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SPJK_TABLE(ACC_NBR,AREA_CODE,AREA_ID,BACKFILL_FLAG,BUSI_TYPE,CREATE_TIME,DATA_ROUTE,DEAL_COUNT,ERR_CODE,ERR_MSG,JK_TYPE,LOCAL_NET_ID,PRIORITY,PROD_CAT_ID,PROD_ID,RECV_TIME,REMARKS,SEND_COUNT,SEND_TIME,SERV_INST_ID,SO_NBR,SPJK_ID,STAFF_ID,STANDARD_CODE,STEP_ID,STS,WO_NBR)");sql.append(" VALUES (:accNbr,:areaCode,:areaId,:backfillFlag,:busiType,:createTime,:dataRoute,:dealCount,:errCode,:errMsg,:jkType,:localNetId,:priority,:prodCatId,:prodId,:recvTime,:remarks,:sendCount,:sendTime,:servInstId,:soNbr,:spjkId,:staffId,:standardCode,:stepId,:sts,:woNbr)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(spjkTable.getAccNbr())) {      sql.setNullString("accNbr");     } else {    sql.setString("accNbr", spjkTable.getAccNbr());    }       if (StringUtil.isBlank(spjkTable.getAreaCode())) {      sql.setNullString("areaCode");     } else {    sql.setString("areaCode", spjkTable.getAreaCode());    }       if (StringUtil.isBlank(spjkTable.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", spjkTable.getAreaId());    }       if (StringUtil.isBlank(spjkTable.getBackfillFlag())) {      sql.setNullString("backfillFlag");     } else {    sql.setString("backfillFlag", spjkTable.getBackfillFlag());    }       if (StringUtil.isBlank(spjkTable.getBusiType())) {      sql.setNullString("busiType");     } else {    sql.setString("busiType", spjkTable.getBusiType());    }    if (spjkTable.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", spjkTable.getCreateTime());    }       if (StringUtil.isBlank(spjkTable.getDataRoute())) {      sql.setNullString("dataRoute");     } else {    sql.setString("dataRoute", spjkTable.getDataRoute());    }       if (StringUtil.isBlank(spjkTable.getDealCount())) {      sql.setNullLong("dealCount");     } else {    sql.setLong("dealCount", spjkTable.getDealCount());    }       if (StringUtil.isBlank(spjkTable.getErrCode())) {      sql.setNullString("errCode");     } else {    sql.setString("errCode", spjkTable.getErrCode());    }       if (StringUtil.isBlank(spjkTable.getErrMsg())) {      sql.setNullString("errMsg");     } else {    sql.setString("errMsg", spjkTable.getErrMsg());    }       if (StringUtil.isBlank(spjkTable.getJkType())) {      sql.setNullString("jkType");     } else {    sql.setString("jkType", spjkTable.getJkType());    }       if (StringUtil.isBlank(spjkTable.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", spjkTable.getLocalNetId());    }       if (StringUtil.isBlank(spjkTable.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", spjkTable.getPriority());    }       if (StringUtil.isBlank(spjkTable.getProdCatId())) {      sql.setNullLong("prodCatId");     } else {    sql.setLong("prodCatId", spjkTable.getProdCatId());    }       if (StringUtil.isBlank(spjkTable.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", spjkTable.getProdId());    }    if (spjkTable.getRecvTime() == null) {      sql.setNullDate("recvTime");     } else {    sql.setTimestamp("recvTime", spjkTable.getRecvTime());    }       if (StringUtil.isBlank(spjkTable.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", spjkTable.getRemarks());    }       if (StringUtil.isBlank(spjkTable.getSendCount())) {      sql.setNullLong("sendCount");     } else {    sql.setLong("sendCount", spjkTable.getSendCount());    }    if (spjkTable.getSendTime() == null) {      sql.setNullDate("sendTime");     } else {    sql.setTimestamp("sendTime", spjkTable.getSendTime());    }       if (StringUtil.isBlank(spjkTable.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", spjkTable.getServInstId());    }       if (StringUtil.isBlank(spjkTable.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", spjkTable.getSoNbr());    }       if (StringUtil.isBlank(spjkTable.getSpjkId())) {      sql.setNullLong("spjkId");     } else {    sql.setLong("spjkId", spjkTable.getSpjkId());    }       if (StringUtil.isBlank(spjkTable.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", spjkTable.getStaffId());    }       if (StringUtil.isBlank(spjkTable.getStandardCode())) {      sql.setNullString("standardCode");     } else {    sql.setString("standardCode", spjkTable.getStandardCode());    }       if (StringUtil.isBlank(spjkTable.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", spjkTable.getStepId());    }       if (StringUtil.isBlank(spjkTable.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", spjkTable.getSts());    }       if (StringUtil.isBlank(spjkTable.getWoNbr())) {      sql.setNullLong("woNbr");     } else {    sql.setLong("woNbr", spjkTable.getWoNbr());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SpjkTableSVO spjkTable=(SpjkTableSVO) vo;    if (StringUtil.isBlank(spjkTable.getSpjkId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACC_NBR,AREA_CODE,AREA_ID,BACKFILL_FLAG,BUSI_TYPE,CREATE_TIME,DATA_ROUTE,DEAL_COUNT,ERR_CODE,ERR_MSG,JK_TYPE,LOCAL_NET_ID,PRIORITY,PROD_CAT_ID,PROD_ID,RECV_TIME,REMARKS,SEND_COUNT,SEND_TIME,SERV_INST_ID,SO_NBR,SPJK_ID,STAFF_ID,STANDARD_CODE,STEP_ID,STS,WO_NBR FROM SPJK_TABLE WHERE 1=1  ");sql.append(" and SPJK_ID=:spjkId");sql.setLong("spjkId", spjkTable.getSpjkId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      spjkTable =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           spjkTable = new SpjkTableSVO();           spjkTable.setAccNbr(rs.getString("ACC_NBR"));           spjkTable.setAreaCode(rs.getString("AREA_CODE"));           spjkTable.setAreaId(rs.getString("AREA_ID"));           spjkTable.setBackfillFlag(rs.getString("BACKFILL_FLAG"));           spjkTable.setBusiType(rs.getString("BUSI_TYPE"));           spjkTable.setCreateTime(rs.getTimestamp("CREATE_TIME"));           spjkTable.setDataRoute(rs.getString("DATA_ROUTE"));           spjkTable.setDealCount(rs.getString("DEAL_COUNT"));           spjkTable.setErrCode(rs.getString("ERR_CODE"));           spjkTable.setErrMsg(rs.getString("ERR_MSG"));           spjkTable.setJkType(rs.getString("JK_TYPE"));           spjkTable.setLocalNetId(rs.getString("LOCAL_NET_ID"));           spjkTable.setPriority(rs.getString("PRIORITY"));           spjkTable.setProdCatId(rs.getString("PROD_CAT_ID"));           spjkTable.setProdId(rs.getString("PROD_ID"));           spjkTable.setRecvTime(rs.getTimestamp("RECV_TIME"));           spjkTable.setRemarks(rs.getString("REMARKS"));           spjkTable.setSendCount(rs.getString("SEND_COUNT"));           spjkTable.setSendTime(rs.getTimestamp("SEND_TIME"));           spjkTable.setServInstId(rs.getString("SERV_INST_ID"));           spjkTable.setSoNbr(rs.getString("SO_NBR"));           spjkTable.setSpjkId(rs.getString("SPJK_ID"));           spjkTable.setStaffId(rs.getString("STAFF_ID"));           spjkTable.setStandardCode(rs.getString("STANDARD_CODE"));           spjkTable.setStepId(rs.getString("STEP_ID"));           spjkTable.setSts(rs.getString("STS"));           spjkTable.setWoNbr(rs.getString("WO_NBR"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return spjkTable;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SpjkTableSVO spjkTable=(SpjkTableSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACC_NBR,AREA_CODE,AREA_ID,BACKFILL_FLAG,BUSI_TYPE,CREATE_TIME,DATA_ROUTE,DEAL_COUNT,ERR_CODE,ERR_MSG,JK_TYPE,LOCAL_NET_ID,PRIORITY,PROD_CAT_ID,PROD_ID,RECV_TIME,REMARKS,SEND_COUNT,SEND_TIME,SERV_INST_ID,SO_NBR,SPJK_ID,STAFF_ID,STANDARD_CODE,STEP_ID,STS,WO_NBR FROM SPJK_TABLE WHERE 1=1 ");     try {if (spjkTable.getFlagAccNbr() == 1) {      if (StringUtil.isBlank(spjkTable.getAccNbr())) {             sql.append(" and ACC_NBR is null ");          }      else{             sql.append(" and ACC_NBR=:accNbr");             sql.setString("accNbr", spjkTable.getAccNbr());          }   } if (spjkTable.getFlagAreaCode() == 1) {      if (StringUtil.isBlank(spjkTable.getAreaCode())) {             sql.append(" and AREA_CODE is null ");          }      else{             sql.append(" and AREA_CODE=:areaCode");             sql.setString("areaCode", spjkTable.getAreaCode());          }   } if (spjkTable.getFlagAreaId() == 1) {      if (StringUtil.isBlank(spjkTable.getAreaId())) {             sql.append(" and AREA_ID is null ");          }      else{             sql.append(" and AREA_ID=:areaId");             sql.setLong("areaId", spjkTable.getAreaId());          }   } if (spjkTable.getFlagBackfillFlag() == 1) {      if (StringUtil.isBlank(spjkTable.getBackfillFlag())) {             sql.append(" and BACKFILL_FLAG is null ");          }      else{             sql.append(" and BACKFILL_FLAG=:backfillFlag");             sql.setString("backfillFlag", spjkTable.getBackfillFlag());          }   } if (spjkTable.getFlagBusiType() == 1) {      if (StringUtil.isBlank(spjkTable.getBusiType())) {             sql.append(" and BUSI_TYPE is null ");          }      else{             sql.append(" and BUSI_TYPE=:busiType");             sql.setString("busiType", spjkTable.getBusiType());          }   } if (spjkTable.getFlagCreateTime() == 1) {      if (spjkTable.getCreateTime() == null) {             sql.append(" and CREATE_TIME is null ");          }      else{             sql.append(" and CREATE_TIME=:createTime");             sql.setTimestamp("createTime", spjkTable.getCreateTime());          }   } if (spjkTable.getFlagDataRoute() == 1) {      if (StringUtil.isBlank(spjkTable.getDataRoute())) {             sql.append(" and DATA_ROUTE is null ");          }      else{             sql.append(" and DATA_ROUTE=:dataRoute");             sql.setString("dataRoute", spjkTable.getDataRoute());          }   } if (spjkTable.getFlagDealCount() == 1) {      if (StringUtil.isBlank(spjkTable.getDealCount())) {             sql.append(" and DEAL_COUNT is null ");          }      else{             sql.append(" and DEAL_COUNT=:dealCount");             sql.setLong("dealCount", spjkTable.getDealCount());          }   } if (spjkTable.getFlagErrCode() == 1) {      if (StringUtil.isBlank(spjkTable.getErrCode())) {             sql.append(" and ERR_CODE is null ");          }      else{             sql.append(" and ERR_CODE=:errCode");             sql.setString("errCode", spjkTable.getErrCode());          }   } if (spjkTable.getFlagErrMsg() == 1) {      if (StringUtil.isBlank(spjkTable.getErrMsg())) {             sql.append(" and ERR_MSG is null ");          }      else{             sql.append(" and ERR_MSG=:errMsg");             sql.setString("errMsg", spjkTable.getErrMsg());          }   } if (spjkTable.getFlagJkType() == 1) {      if (StringUtil.isBlank(spjkTable.getJkType())) {             sql.append(" and JK_TYPE is null ");          }      else{             sql.append(" and JK_TYPE=:jkType");             sql.setString("jkType", spjkTable.getJkType());          }   } if (spjkTable.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(spjkTable.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setLong("localNetId", spjkTable.getLocalNetId());          }   } if (spjkTable.getFlagPriority() == 1) {      if (StringUtil.isBlank(spjkTable.getPriority())) {             sql.append(" and PRIORITY is null ");          }      else{             sql.append(" and PRIORITY=:priority");             sql.setLong("priority", spjkTable.getPriority());          }   } if (spjkTable.getFlagProdCatId() == 1) {      if (StringUtil.isBlank(spjkTable.getProdCatId())) {             sql.append(" and PROD_CAT_ID is null ");          }      else{             sql.append(" and PROD_CAT_ID=:prodCatId");             sql.setLong("prodCatId", spjkTable.getProdCatId());          }   } if (spjkTable.getFlagProdId() == 1) {      if (StringUtil.isBlank(spjkTable.getProdId())) {             sql.append(" and PROD_ID is null ");          }      else{             sql.append(" and PROD_ID=:prodId");             sql.setLong("prodId", spjkTable.getProdId());          }   } if (spjkTable.getFlagRecvTime() == 1) {      if (spjkTable.getRecvTime() == null) {             sql.append(" and RECV_TIME is null ");          }      else{             sql.append(" and RECV_TIME=:recvTime");             sql.setTimestamp("recvTime", spjkTable.getRecvTime());          }   } if (spjkTable.getFlagRemarks() == 1) {      if (StringUtil.isBlank(spjkTable.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", spjkTable.getRemarks());          }   } if (spjkTable.getFlagSendCount() == 1) {      if (StringUtil.isBlank(spjkTable.getSendCount())) {             sql.append(" and SEND_COUNT is null ");          }      else{             sql.append(" and SEND_COUNT=:sendCount");             sql.setLong("sendCount", spjkTable.getSendCount());          }   } if (spjkTable.getFlagSendTime() == 1) {      if (spjkTable.getSendTime() == null) {             sql.append(" and SEND_TIME is null ");          }      else{             sql.append(" and SEND_TIME=:sendTime");             sql.setTimestamp("sendTime", spjkTable.getSendTime());          }   } if (spjkTable.getFlagServInstId() == 1) {      if (StringUtil.isBlank(spjkTable.getServInstId())) {             sql.append(" and SERV_INST_ID is null ");          }      else{             sql.append(" and SERV_INST_ID=:servInstId");             sql.setLong("servInstId", spjkTable.getServInstId());          }   } if (spjkTable.getFlagSoNbr() == 1) {      if (StringUtil.isBlank(spjkTable.getSoNbr())) {             sql.append(" and SO_NBR is null ");          }      else{             sql.append(" and SO_NBR=:soNbr");             sql.setString("soNbr", spjkTable.getSoNbr());          }   } if (spjkTable.getFlagSpjkId() == 1) {      if (StringUtil.isBlank(spjkTable.getSpjkId())) {             sql.append(" and SPJK_ID is null ");          }      else{             sql.append(" and SPJK_ID=:spjkId");             sql.setLong("spjkId", spjkTable.getSpjkId());          }   } if (spjkTable.getFlagStaffId() == 1) {      if (StringUtil.isBlank(spjkTable.getStaffId())) {             sql.append(" and STAFF_ID is null ");          }      else{             sql.append(" and STAFF_ID=:staffId");             sql.setLong("staffId", spjkTable.getStaffId());          }   } if (spjkTable.getFlagStandardCode() == 1) {      if (StringUtil.isBlank(spjkTable.getStandardCode())) {             sql.append(" and STANDARD_CODE is null ");          }      else{             sql.append(" and STANDARD_CODE=:standardCode");             sql.setString("standardCode", spjkTable.getStandardCode());          }   } if (spjkTable.getFlagStepId() == 1) {      if (StringUtil.isBlank(spjkTable.getStepId())) {             sql.append(" and STEP_ID is null ");          }      else{             sql.append(" and STEP_ID=:stepId");             sql.setString("stepId", spjkTable.getStepId());          }   } if (spjkTable.getFlagSts() == 1) {      if (StringUtil.isBlank(spjkTable.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", spjkTable.getSts());          }   } if (spjkTable.getFlagWoNbr() == 1) {      if (StringUtil.isBlank(spjkTable.getWoNbr())) {             sql.append(" and WO_NBR is null ");          }      else{             sql.append(" and WO_NBR=:woNbr");             sql.setLong("woNbr", spjkTable.getWoNbr());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           spjkTable = new SpjkTableSVO();           spjkTable.setAccNbr(rs.getString("ACC_NBR"));           spjkTable.setAreaCode(rs.getString("AREA_CODE"));           spjkTable.setAreaId(rs.getString("AREA_ID"));           spjkTable.setBackfillFlag(rs.getString("BACKFILL_FLAG"));           spjkTable.setBusiType(rs.getString("BUSI_TYPE"));           spjkTable.setCreateTime(rs.getTimestamp("CREATE_TIME"));           spjkTable.setDataRoute(rs.getString("DATA_ROUTE"));           spjkTable.setDealCount(rs.getString("DEAL_COUNT"));           spjkTable.setErrCode(rs.getString("ERR_CODE"));           spjkTable.setErrMsg(rs.getString("ERR_MSG"));           spjkTable.setJkType(rs.getString("JK_TYPE"));           spjkTable.setLocalNetId(rs.getString("LOCAL_NET_ID"));           spjkTable.setPriority(rs.getString("PRIORITY"));           spjkTable.setProdCatId(rs.getString("PROD_CAT_ID"));           spjkTable.setProdId(rs.getString("PROD_ID"));           spjkTable.setRecvTime(rs.getTimestamp("RECV_TIME"));           spjkTable.setRemarks(rs.getString("REMARKS"));           spjkTable.setSendCount(rs.getString("SEND_COUNT"));           spjkTable.setSendTime(rs.getTimestamp("SEND_TIME"));           spjkTable.setServInstId(rs.getString("SERV_INST_ID"));           spjkTable.setSoNbr(rs.getString("SO_NBR"));           spjkTable.setSpjkId(rs.getString("SPJK_ID"));           spjkTable.setStaffId(rs.getString("STAFF_ID"));           spjkTable.setStandardCode(rs.getString("STANDARD_CODE"));           spjkTable.setStepId(rs.getString("STEP_ID"));           spjkTable.setSts(rs.getString("STS"));           spjkTable.setWoNbr(rs.getString("WO_NBR"));               res.add(spjkTable);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SpjkTableSVO spjkTable=(SpjkTableSVO) vo;    if (StringUtil.isBlank(spjkTable.getSpjkId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SPJK_TABLE SET ");     try {if (spjkTable.getFlagAccNbr() == 1) {sql.append("ACC_NBR=:accNbr,"); sql.setString("accNbr", spjkTable.getAccNbr()); } if (spjkTable.getFlagAreaCode() == 1) {sql.append("AREA_CODE=:areaCode,"); sql.setString("areaCode", spjkTable.getAreaCode()); } if (spjkTable.getFlagAreaId() == 1) {sql.append("AREA_ID=:areaId,");sql.setLong("areaId", spjkTable.getAreaId()); } if (spjkTable.getFlagBackfillFlag() == 1) {sql.append("BACKFILL_FLAG=:backfillFlag,"); sql.setString("backfillFlag", spjkTable.getBackfillFlag()); } if (spjkTable.getFlagBusiType() == 1) {sql.append("BUSI_TYPE=:busiType,"); sql.setString("busiType", spjkTable.getBusiType()); } if (spjkTable.getFlagCreateTime() == 1) {sql.append("CREATE_TIME=:createTime,"); sql.setTimestamp("createTime", spjkTable.getCreateTime()); } if (spjkTable.getFlagDataRoute() == 1) {sql.append("DATA_ROUTE=:dataRoute,"); sql.setString("dataRoute", spjkTable.getDataRoute()); } if (spjkTable.getFlagDealCount() == 1) {sql.append("DEAL_COUNT=:dealCount,");sql.setLong("dealCount", spjkTable.getDealCount()); } if (spjkTable.getFlagErrCode() == 1) {sql.append("ERR_CODE=:errCode,"); sql.setString("errCode", spjkTable.getErrCode()); } if (spjkTable.getFlagErrMsg() == 1) {sql.append("ERR_MSG=:errMsg,"); sql.setString("errMsg", spjkTable.getErrMsg()); } if (spjkTable.getFlagJkType() == 1) {sql.append("JK_TYPE=:jkType,"); sql.setString("jkType", spjkTable.getJkType()); } if (spjkTable.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,");sql.setLong("localNetId", spjkTable.getLocalNetId()); } if (spjkTable.getFlagPriority() == 1) {sql.append("PRIORITY=:priority,");sql.setLong("priority", spjkTable.getPriority()); } if (spjkTable.getFlagProdCatId() == 1) {sql.append("PROD_CAT_ID=:prodCatId,");sql.setLong("prodCatId", spjkTable.getProdCatId()); } if (spjkTable.getFlagProdId() == 1) {sql.append("PROD_ID=:prodId,");sql.setLong("prodId", spjkTable.getProdId()); } if (spjkTable.getFlagRecvTime() == 1) {sql.append("RECV_TIME=:recvTime,"); sql.setTimestamp("recvTime", spjkTable.getRecvTime()); } if (spjkTable.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", spjkTable.getRemarks()); } if (spjkTable.getFlagSendCount() == 1) {sql.append("SEND_COUNT=:sendCount,");sql.setLong("sendCount", spjkTable.getSendCount()); } if (spjkTable.getFlagSendTime() == 1) {sql.append("SEND_TIME=:sendTime,"); sql.setTimestamp("sendTime", spjkTable.getSendTime()); } if (spjkTable.getFlagServInstId() == 1) {sql.append("SERV_INST_ID=:servInstId,");sql.setLong("servInstId", spjkTable.getServInstId()); } if (spjkTable.getFlagSoNbr() == 1) {sql.append("SO_NBR=:soNbr,"); sql.setString("soNbr", spjkTable.getSoNbr()); } if (spjkTable.getFlagStaffId() == 1) {sql.append("STAFF_ID=:staffId,");sql.setLong("staffId", spjkTable.getStaffId()); } if (spjkTable.getFlagStandardCode() == 1) {sql.append("STANDARD_CODE=:standardCode,"); sql.setString("standardCode", spjkTable.getStandardCode()); } if (spjkTable.getFlagStepId() == 1) {sql.append("STEP_ID=:stepId,"); sql.setString("stepId", spjkTable.getStepId()); } if (spjkTable.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", spjkTable.getSts()); } if (spjkTable.getFlagWoNbr() == 1) {sql.append("WO_NBR=:woNbr,");sql.setLong("woNbr", spjkTable.getWoNbr()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and SPJK_ID=:spjkId");sql.setLong("spjkId", spjkTable.getSpjkId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SPJK_TABLE(ACC_NBR,AREA_CODE,AREA_ID,BACKFILL_FLAG,BUSI_TYPE,CREATE_TIME,DATA_ROUTE,DEAL_COUNT,ERR_CODE,ERR_MSG,JK_TYPE,LOCAL_NET_ID,PRIORITY,PROD_CAT_ID,PROD_ID,RECV_TIME,REMARKS,SEND_COUNT,SEND_TIME,SERV_INST_ID,SO_NBR,SPJK_ID,STAFF_ID,STANDARD_CODE,STEP_ID,STS,WO_NBR)");sql.append(" VALUES (:accNbr,:areaCode,:areaId,:backfillFlag,:busiType,:createTime,:dataRoute,:dealCount,:errCode,:errMsg,:jkType,:localNetId,:priority,:prodCatId,:prodId,:recvTime,:remarks,:sendCount,:sendTime,:servInstId,:soNbr,:spjkId,:staffId,:standardCode,:stepId,:sts,:woNbr)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SpjkTableSVO spjkTable=(SpjkTableSVO) list.get(i);         if (spjkTable== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(spjkTable.getSpjkId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(spjkTable.getAccNbr())) {      sql.setNullString("accNbr");     } else {    sql.setString("accNbr", spjkTable.getAccNbr());    }       if (StringUtil.isBlank(spjkTable.getAreaCode())) {      sql.setNullString("areaCode");     } else {    sql.setString("areaCode", spjkTable.getAreaCode());    }       if (StringUtil.isBlank(spjkTable.getAreaId())) {      sql.setNullLong("areaId");     } else {    sql.setLong("areaId", spjkTable.getAreaId());    }       if (StringUtil.isBlank(spjkTable.getBackfillFlag())) {      sql.setNullString("backfillFlag");     } else {    sql.setString("backfillFlag", spjkTable.getBackfillFlag());    }       if (StringUtil.isBlank(spjkTable.getBusiType())) {      sql.setNullString("busiType");     } else {    sql.setString("busiType", spjkTable.getBusiType());    }    if (spjkTable.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", spjkTable.getCreateTime());    }       if (StringUtil.isBlank(spjkTable.getDataRoute())) {      sql.setNullString("dataRoute");     } else {    sql.setString("dataRoute", spjkTable.getDataRoute());    }       if (StringUtil.isBlank(spjkTable.getDealCount())) {      sql.setNullLong("dealCount");     } else {    sql.setLong("dealCount", spjkTable.getDealCount());    }       if (StringUtil.isBlank(spjkTable.getErrCode())) {      sql.setNullString("errCode");     } else {    sql.setString("errCode", spjkTable.getErrCode());    }       if (StringUtil.isBlank(spjkTable.getErrMsg())) {      sql.setNullString("errMsg");     } else {    sql.setString("errMsg", spjkTable.getErrMsg());    }       if (StringUtil.isBlank(spjkTable.getJkType())) {      sql.setNullString("jkType");     } else {    sql.setString("jkType", spjkTable.getJkType());    }       if (StringUtil.isBlank(spjkTable.getLocalNetId())) {      sql.setNullLong("localNetId");     } else {    sql.setLong("localNetId", spjkTable.getLocalNetId());    }       if (StringUtil.isBlank(spjkTable.getPriority())) {      sql.setNullLong("priority");     } else {    sql.setLong("priority", spjkTable.getPriority());    }       if (StringUtil.isBlank(spjkTable.getProdCatId())) {      sql.setNullLong("prodCatId");     } else {    sql.setLong("prodCatId", spjkTable.getProdCatId());    }       if (StringUtil.isBlank(spjkTable.getProdId())) {      sql.setNullLong("prodId");     } else {    sql.setLong("prodId", spjkTable.getProdId());    }    if (spjkTable.getRecvTime() == null) {      sql.setNullDate("recvTime");     } else {    sql.setTimestamp("recvTime", spjkTable.getRecvTime());    }       if (StringUtil.isBlank(spjkTable.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", spjkTable.getRemarks());    }       if (StringUtil.isBlank(spjkTable.getSendCount())) {      sql.setNullLong("sendCount");     } else {    sql.setLong("sendCount", spjkTable.getSendCount());    }    if (spjkTable.getSendTime() == null) {      sql.setNullDate("sendTime");     } else {    sql.setTimestamp("sendTime", spjkTable.getSendTime());    }       if (StringUtil.isBlank(spjkTable.getServInstId())) {      sql.setNullLong("servInstId");     } else {    sql.setLong("servInstId", spjkTable.getServInstId());    }       if (StringUtil.isBlank(spjkTable.getSoNbr())) {      sql.setNullString("soNbr");     } else {    sql.setString("soNbr", spjkTable.getSoNbr());    }       if (StringUtil.isBlank(spjkTable.getSpjkId())) {      sql.setNullLong("spjkId");     } else {    sql.setLong("spjkId", spjkTable.getSpjkId());    }       if (StringUtil.isBlank(spjkTable.getStaffId())) {      sql.setNullLong("staffId");     } else {    sql.setLong("staffId", spjkTable.getStaffId());    }       if (StringUtil.isBlank(spjkTable.getStandardCode())) {      sql.setNullString("standardCode");     } else {    sql.setString("standardCode", spjkTable.getStandardCode());    }       if (StringUtil.isBlank(spjkTable.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", spjkTable.getStepId());    }       if (StringUtil.isBlank(spjkTable.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", spjkTable.getSts());    }       if (StringUtil.isBlank(spjkTable.getWoNbr())) {      sql.setNullLong("woNbr");     } else {    sql.setLong("woNbr", spjkTable.getWoNbr());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SpjkTableSVO spjkTable=(SpjkTableSVO) vo;    if (StringUtil.isBlank(spjkTable.getSpjkId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SPJK_TABLE WHERE 1=1  ");sql.append(" and SPJK_ID=:spjkId");sql.setLong("spjkId", spjkTable.getSpjkId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SpjkTableSVO spjkTable=(SpjkTableSVO) vo;       }}
