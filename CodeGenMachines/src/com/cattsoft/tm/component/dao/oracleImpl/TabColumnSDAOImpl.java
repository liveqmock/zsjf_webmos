package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.tm.component.dao.ITabColumnSDAO;import com.cattsoft.tm.vo.TabColumnSVO;/** * 方法TabColumnSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class TabColumnSDAOImpl implements ITabColumnSDAO {	// private static Logger log = Logger.getLogger(TabColumnSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		TabColumnSVO tabColumn = (TabColumnSVO) vo;		if (StringUtil.isBlank(tabColumn.getColumnId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO TAB_COLUMN(COLUMN_ID,COLUMN_NAME,COL_TYPE,COL_WIDTH,FOR_SCENE,LIMIT_WIDTH,LINKS,NAME,REMARKS)");		sql				.append(" VALUES (:columnId,:columnName,:colType,:colWidth,:forScene,:limitWidth,:links,:name,:remarks)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(tabColumn.getColumnId())) {				sql.setNullLong("columnId");			} else {				sql.setLong("columnId", tabColumn.getColumnId());			}			if (StringUtil.isBlank(tabColumn.getColumnName())) {				sql.setNullString("columnName");			} else {				sql.setString("columnName", tabColumn.getColumnName());			}			if (StringUtil.isBlank(tabColumn.getColType())) {				sql.setNullString("colType");			} else {				sql.setString("colType", tabColumn.getColType());			}			if (StringUtil.isBlank(tabColumn.getColWidth())) {				sql.setNullLong("colWidth");			} else {				sql.setLong("colWidth", tabColumn.getColWidth());			}			if (StringUtil.isBlank(tabColumn.getForScene())) {				sql.setNullString("forScene");			} else {				sql.setString("forScene", tabColumn.getForScene());			}			if (StringUtil.isBlank(tabColumn.getLimitWidth())) {				sql.setNullLong("limitWidth");			} else {				sql.setLong("limitWidth", tabColumn.getLimitWidth());			}			if (StringUtil.isBlank(tabColumn.getLinks())) {				sql.setNullString("links");			} else {				sql.setString("links", tabColumn.getLinks());			}			if (StringUtil.isBlank(tabColumn.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", tabColumn.getName());			}			if (StringUtil.isBlank(tabColumn.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", tabColumn.getRemarks());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		TabColumnSVO tabColumn = (TabColumnSVO) vo;		if (StringUtil.isBlank(tabColumn.getColumnId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT COLUMN_ID,COLUMN_NAME,COL_TYPE,COL_WIDTH,FOR_SCENE,LIMIT_WIDTH,LINKS,NAME,REMARKS FROM TAB_COLUMN WHERE 1=1  ");		sql.append(" and COLUMN_ID=:columnId");		sql.setLong("columnId", tabColumn.getColumnId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		tabColumn = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				tabColumn = new TabColumnSVO();				tabColumn.setColumnId(rs.getString("COLUMN_ID"));				tabColumn.setColumnName(rs.getString("COLUMN_NAME"));				tabColumn.setColType(rs.getString("COL_TYPE"));				tabColumn.setColWidth(rs.getString("COL_WIDTH"));				tabColumn.setForScene(rs.getString("FOR_SCENE"));				tabColumn.setLimitWidth(rs.getString("LIMIT_WIDTH"));				tabColumn.setLinks(rs.getString("LINKS"));				tabColumn.setName(rs.getString("NAME"));				tabColumn.setRemarks(rs.getString("REMARKS"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return tabColumn;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		TabColumnSVO tabColumn = (TabColumnSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT COLUMN_ID,COLUMN_NAME,COL_TYPE,COL_WIDTH,FOR_SCENE,LIMIT_WIDTH,LINKS,NAME,REMARKS FROM TAB_COLUMN WHERE 1=1 ");		try {			if (tabColumn.getFlagColumnId() == 1) {				if (StringUtil.isBlank(tabColumn.getColumnId())) {					sql.append(" and COLUMN_ID is null ");				} else {					sql.append(" and COLUMN_ID=:columnId");					sql.setLong("columnId", tabColumn.getColumnId());				}			}			if (tabColumn.getFlagColumnName() == 1) {				if (StringUtil.isBlank(tabColumn.getColumnName())) {					sql.append(" and COLUMN_NAME is null ");				} else {					sql.append(" and COLUMN_NAME=:columnName");					sql.setString("columnName", tabColumn.getColumnName());				}			}			if (tabColumn.getFlagColType() == 1) {				if (StringUtil.isBlank(tabColumn.getColType())) {					sql.append(" and COL_TYPE is null ");				} else {					sql.append(" and COL_TYPE=:colType");					sql.setString("colType", tabColumn.getColType());				}			}			if (tabColumn.getFlagColWidth() == 1) {				if (StringUtil.isBlank(tabColumn.getColWidth())) {					sql.append(" and COL_WIDTH is null ");				} else {					sql.append(" and COL_WIDTH=:colWidth");					sql.setLong("colWidth", tabColumn.getColWidth());				}			}			if (tabColumn.getFlagForScene() == 1) {				if (StringUtil.isBlank(tabColumn.getForScene())) {					sql.append(" and FOR_SCENE is null ");				} else {					sql.append(" and FOR_SCENE=:forScene");					sql.setString("forScene", tabColumn.getForScene());				}			}			if (tabColumn.getFlagLimitWidth() == 1) {				if (StringUtil.isBlank(tabColumn.getLimitWidth())) {					sql.append(" and LIMIT_WIDTH is null ");				} else {					sql.append(" and LIMIT_WIDTH=:limitWidth");					sql.setLong("limitWidth", tabColumn.getLimitWidth());				}			}			if (tabColumn.getFlagLinks() == 1) {				if (StringUtil.isBlank(tabColumn.getLinks())) {					sql.append(" and LINKS is null ");				} else {					sql.append(" and LINKS=:links");					sql.setString("links", tabColumn.getLinks());				}			}			if (tabColumn.getFlagName() == 1) {				if (StringUtil.isBlank(tabColumn.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", tabColumn.getName());				}			}			if (tabColumn.getFlagRemarks() == 1) {				if (StringUtil.isBlank(tabColumn.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", tabColumn.getRemarks());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				tabColumn = new TabColumnSVO();				tabColumn.setColumnId(rs.getString("COLUMN_ID"));				tabColumn.setColumnName(rs.getString("COLUMN_NAME"));				tabColumn.setColType(rs.getString("COL_TYPE"));				tabColumn.setColWidth(rs.getString("COL_WIDTH"));				tabColumn.setForScene(rs.getString("FOR_SCENE"));				tabColumn.setLimitWidth(rs.getString("LIMIT_WIDTH"));				tabColumn.setLinks(rs.getString("LINKS"));				tabColumn.setName(rs.getString("NAME"));				tabColumn.setRemarks(rs.getString("REMARKS"));				res.add(tabColumn);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		TabColumnSVO tabColumn = (TabColumnSVO) vo;		if (StringUtil.isBlank(tabColumn.getColumnId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE TAB_COLUMN SET ");		try {			if (tabColumn.getFlagColumnName() == 1) {				sql.append("COLUMN_NAME=:columnName,");				sql.setString("columnName", tabColumn.getColumnName());			}			if (tabColumn.getFlagColType() == 1) {				sql.append("COL_TYPE=:colType,");				sql.setString("colType", tabColumn.getColType());			}			if (tabColumn.getFlagColWidth() == 1) {				sql.append("COL_WIDTH=:colWidth,");				sql.setLong("colWidth", tabColumn.getColWidth());			}			if (tabColumn.getFlagForScene() == 1) {				sql.append("FOR_SCENE=:forScene,");				sql.setString("forScene", tabColumn.getForScene());			}			if (tabColumn.getFlagLimitWidth() == 1) {				sql.append("LIMIT_WIDTH=:limitWidth,");				sql.setLong("limitWidth", tabColumn.getLimitWidth());			}			if (tabColumn.getFlagLinks() == 1) {				sql.append("LINKS=:links,");				sql.setString("links", tabColumn.getLinks());			}			if (tabColumn.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", tabColumn.getName());			}			if (tabColumn.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", tabColumn.getRemarks());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and COLUMN_ID=:columnId");			sql.setLong("columnId", tabColumn.getColumnId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO TAB_COLUMN(COLUMN_ID,COLUMN_NAME,COL_TYPE,COL_WIDTH,FOR_SCENE,LIMIT_WIDTH,LINKS,NAME,REMARKS)");		sql				.append(" VALUES (:columnId,:columnName,:colType,:colWidth,:forScene,:limitWidth,:links,:name,:remarks)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				TabColumnSVO tabColumn = (TabColumnSVO) list.get(i);				if (tabColumn == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(tabColumn.getColumnId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(tabColumn.getColumnId())) {					sql.setNullLong("columnId");				} else {					sql.setLong("columnId", tabColumn.getColumnId());				}				if (StringUtil.isBlank(tabColumn.getColumnName())) {					sql.setNullString("columnName");				} else {					sql.setString("columnName", tabColumn.getColumnName());				}				if (StringUtil.isBlank(tabColumn.getColType())) {					sql.setNullString("colType");				} else {					sql.setString("colType", tabColumn.getColType());				}				if (StringUtil.isBlank(tabColumn.getColWidth())) {					sql.setNullLong("colWidth");				} else {					sql.setLong("colWidth", tabColumn.getColWidth());				}				if (StringUtil.isBlank(tabColumn.getForScene())) {					sql.setNullString("forScene");				} else {					sql.setString("forScene", tabColumn.getForScene());				}				if (StringUtil.isBlank(tabColumn.getLimitWidth())) {					sql.setNullLong("limitWidth");				} else {					sql.setLong("limitWidth", tabColumn.getLimitWidth());				}				if (StringUtil.isBlank(tabColumn.getLinks())) {					sql.setNullString("links");				} else {					sql.setString("links", tabColumn.getLinks());				}				if (StringUtil.isBlank(tabColumn.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", tabColumn.getName());				}				if (StringUtil.isBlank(tabColumn.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", tabColumn.getRemarks());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		TabColumnSVO tabColumn = (TabColumnSVO) vo;		if (StringUtil.isBlank(tabColumn.getColumnId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM TAB_COLUMN WHERE 1=1  ");		sql.append(" and COLUMN_ID=:columnId");		sql.setLong("columnId", tabColumn.getColumnId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// TabColumnSVO tabColumn=(TabColumnSVO) vo;	}}