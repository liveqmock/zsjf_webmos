package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRptZdgzKhjlSDAO;import com.cattsoft.tm.vo.TRptZdgzKhjlSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRptZdgzKhjlSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptZdgzKhjlSDAOImpl implements ITRptZdgzKhjlSDAO{    private static Logger log = Logger.getLogger(TRptZdgzKhjlSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_ZDGZ_KHJL(CP_MC,CREATE_DATE,ERP_ID,LOGIN_ID,OPEN_DATE,ZDGZ_DTZ,ZDGZ_DYLJ,ZDGZ_DYLJC)");sql.append(" VALUES (:cpMc,:createDate,:erpId,:loginId,:openDate,:zdgzDtz,:zdgzDylj,:zdgzDyljc)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tRptZdgzKhjl.getCpMc())) {      sql.setNullString("cpMc");     } else {    sql.setString("cpMc", tRptZdgzKhjl.getCpMc());    }    if (tRptZdgzKhjl.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptZdgzKhjl.getCreateDate());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getErpId())) {      sql.setNullString("erpId");     } else {    sql.setString("erpId", tRptZdgzKhjl.getErpId());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getLoginId())) {      sql.setNullString("loginId");     } else {    sql.setString("loginId", tRptZdgzKhjl.getLoginId());    }    if (tRptZdgzKhjl.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptZdgzKhjl.getOpenDate());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDtz())) {      sql.setNullLong("zdgzDtz");     } else {    sql.setLong("zdgzDtz", tRptZdgzKhjl.getZdgzDtz());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDylj())) {      sql.setNullLong("zdgzDylj");     } else {    sql.setLong("zdgzDylj", tRptZdgzKhjl.getZdgzDylj());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDyljc())) {      sql.setNullLong("zdgzDyljc");     } else {    sql.setLong("zdgzDyljc", tRptZdgzKhjl.getZdgzDyljc());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;       Sql sql = new Sql("SELECT CP_MC,CREATE_DATE,ERP_ID,LOGIN_ID,OPEN_DATE,ZDGZ_DTZ,ZDGZ_DYLJ,ZDGZ_DYLJC FROM T_RPT_ZDGZ_KHJL WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptZdgzKhjl =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptZdgzKhjl = new TRptZdgzKhjlSVO();           tRptZdgzKhjl.setCpMc(rs.getString("CP_MC"));           tRptZdgzKhjl.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptZdgzKhjl.setErpId(rs.getString("ERP_ID"));           tRptZdgzKhjl.setLoginId(rs.getString("LOGIN_ID"));           tRptZdgzKhjl.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptZdgzKhjl.setZdgzDtz(rs.getString("ZDGZ_DTZ"));           tRptZdgzKhjl.setZdgzDylj(rs.getString("ZDGZ_DYLJ"));           tRptZdgzKhjl.setZdgzDyljc(rs.getString("ZDGZ_DYLJC"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptZdgzKhjl;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CP_MC,CREATE_DATE,ERP_ID,LOGIN_ID,OPEN_DATE,ZDGZ_DTZ,ZDGZ_DYLJ,ZDGZ_DYLJC FROM T_RPT_ZDGZ_KHJL WHERE 1=1 ");     try {if (tRptZdgzKhjl.getFlagCpMc() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getCpMc())) {             sql.append(" and CP_MC is null ");          }      else{             sql.append(" and CP_MC=:cpMc");             sql.setString("cpMc", tRptZdgzKhjl.getCpMc());          }   } if (tRptZdgzKhjl.getFlagCreateDate() == 1) {      if (tRptZdgzKhjl.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRptZdgzKhjl.getCreateDate());          }   } if (tRptZdgzKhjl.getFlagErpId() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getErpId())) {             sql.append(" and ERP_ID is null ");          }      else{             sql.append(" and ERP_ID=:erpId");             sql.setString("erpId", tRptZdgzKhjl.getErpId());          }   } if (tRptZdgzKhjl.getFlagLoginId() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getLoginId())) {             sql.append(" and LOGIN_ID is null ");          }      else{             sql.append(" and LOGIN_ID=:loginId");             sql.setString("loginId", tRptZdgzKhjl.getLoginId());          }   } if (tRptZdgzKhjl.getFlagOpenDate() == 1) {      if (tRptZdgzKhjl.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRptZdgzKhjl.getOpenDate());          }   } if (tRptZdgzKhjl.getFlagZdgzDtz() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDtz())) {             sql.append(" and ZDGZ_DTZ is null ");          }      else{             sql.append(" and ZDGZ_DTZ=:zdgzDtz");             sql.setLong("zdgzDtz", tRptZdgzKhjl.getZdgzDtz());          }   } if (tRptZdgzKhjl.getFlagZdgzDylj() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDylj())) {             sql.append(" and ZDGZ_DYLJ is null ");          }      else{             sql.append(" and ZDGZ_DYLJ=:zdgzDylj");             sql.setLong("zdgzDylj", tRptZdgzKhjl.getZdgzDylj());          }   } if (tRptZdgzKhjl.getFlagZdgzDyljc() == 1) {      if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDyljc())) {             sql.append(" and ZDGZ_DYLJC is null ");          }      else{             sql.append(" and ZDGZ_DYLJC=:zdgzDyljc");             sql.setLong("zdgzDyljc", tRptZdgzKhjl.getZdgzDyljc());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptZdgzKhjl = new TRptZdgzKhjlSVO();           tRptZdgzKhjl.setCpMc(rs.getString("CP_MC"));           tRptZdgzKhjl.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptZdgzKhjl.setErpId(rs.getString("ERP_ID"));           tRptZdgzKhjl.setLoginId(rs.getString("LOGIN_ID"));           tRptZdgzKhjl.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptZdgzKhjl.setZdgzDtz(rs.getString("ZDGZ_DTZ"));           tRptZdgzKhjl.setZdgzDylj(rs.getString("ZDGZ_DYLJ"));           tRptZdgzKhjl.setZdgzDyljc(rs.getString("ZDGZ_DYLJC"));               res.add(tRptZdgzKhjl);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_ZDGZ_KHJL SET ");     try {if (tRptZdgzKhjl.getFlagCpMc() == 1) {sql.append("CP_MC=:cpMc,"); sql.setString("cpMc", tRptZdgzKhjl.getCpMc()); } if (tRptZdgzKhjl.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRptZdgzKhjl.getCreateDate()); } if (tRptZdgzKhjl.getFlagErpId() == 1) {sql.append("ERP_ID=:erpId,"); sql.setString("erpId", tRptZdgzKhjl.getErpId()); } if (tRptZdgzKhjl.getFlagLoginId() == 1) {sql.append("LOGIN_ID=:loginId,"); sql.setString("loginId", tRptZdgzKhjl.getLoginId()); } if (tRptZdgzKhjl.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRptZdgzKhjl.getOpenDate()); } if (tRptZdgzKhjl.getFlagZdgzDtz() == 1) {sql.append("ZDGZ_DTZ=:zdgzDtz,");sql.setLong("zdgzDtz", tRptZdgzKhjl.getZdgzDtz()); } if (tRptZdgzKhjl.getFlagZdgzDylj() == 1) {sql.append("ZDGZ_DYLJ=:zdgzDylj,");sql.setLong("zdgzDylj", tRptZdgzKhjl.getZdgzDylj()); } if (tRptZdgzKhjl.getFlagZdgzDyljc() == 1) {sql.append("ZDGZ_DYLJC=:zdgzDyljc,");sql.setLong("zdgzDyljc", tRptZdgzKhjl.getZdgzDyljc()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_ZDGZ_KHJL(CP_MC,CREATE_DATE,ERP_ID,LOGIN_ID,OPEN_DATE,ZDGZ_DTZ,ZDGZ_DYLJ,ZDGZ_DYLJC)");sql.append(" VALUES (:cpMc,:createDate,:erpId,:loginId,:openDate,:zdgzDtz,:zdgzDylj,:zdgzDyljc)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) list.get(i);         if (tRptZdgzKhjl== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tRptZdgzKhjl.getCpMc())) {      sql.setNullString("cpMc");     } else {    sql.setString("cpMc", tRptZdgzKhjl.getCpMc());    }    if (tRptZdgzKhjl.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptZdgzKhjl.getCreateDate());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getErpId())) {      sql.setNullString("erpId");     } else {    sql.setString("erpId", tRptZdgzKhjl.getErpId());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getLoginId())) {      sql.setNullString("loginId");     } else {    sql.setString("loginId", tRptZdgzKhjl.getLoginId());    }    if (tRptZdgzKhjl.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptZdgzKhjl.getOpenDate());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDtz())) {      sql.setNullLong("zdgzDtz");     } else {    sql.setLong("zdgzDtz", tRptZdgzKhjl.getZdgzDtz());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDylj())) {      sql.setNullLong("zdgzDylj");     } else {    sql.setLong("zdgzDylj", tRptZdgzKhjl.getZdgzDylj());    }       if (StringUtil.isBlank(tRptZdgzKhjl.getZdgzDyljc())) {      sql.setNullLong("zdgzDyljc");     } else {    sql.setLong("zdgzDyljc", tRptZdgzKhjl.getZdgzDyljc());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_ZDGZ_KHJL WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptZdgzKhjlSVO tRptZdgzKhjl=(TRptZdgzKhjlSVO) vo;       }}
