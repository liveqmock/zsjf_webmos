package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IBatchQueryConfigSDAO;import com.cattsoft.tm.vo.BatchQueryConfigSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法BatchQueryConfigSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class BatchQueryConfigSDAOImpl implements IBatchQueryConfigSDAO{    private static Logger log = Logger.getLogger(BatchQueryConfigSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;    if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO BATCH_QUERY_CONFIG(ACT_TYPE_LIST,ACT_TYPE_NAME_LIST,BILL_TYPE,BOOK_FLAG,BUSI_STS,CHECK_ACT_TYPE,CHECK_BILL_TYPE,CHECK_BOOK_FLAG,CHECK_BUSI_STS,CHECK_CHG_SERV_SPEC,CHECK_EXCH,CHECK_PRIORITY,CHECK_PROD,CHECK_RELA_SO_NBR,CHECK_RUN_STS,CHECK_SO_DATE,CHECK_SO_METH,CHECK_SO_STS,CHECK_SO_TYPE,CHECK_STEP_ID,CHG_DEAL_FLAG,CHG_SERV_SPEC_ID_LIST,CHG_SERV_SPEC_NAME_LIST,CHG_WORK_MODE,CHG_WO_TYPE,DEAL_FLAG,EXCH_ID_LIST,EXCH_NAME_LIST,FOR_SCENE,FROM_SO_DATE,PRIORITY,PROD_ID_LIST,PROD_NAME_LIST,QUERY_CONFIG_ID,RELA_SO_NBR,ROWS_PER_PAGE,RUN_STS,SO_METH,SO_STS,SO_TYPE,STEP_ID,TO_SO_DATE,WORK_AREA_ID,WORK_MODE,WO_TYPE_LIST,WO_TYPE_NAME_LIST)");sql.append(" VALUES (:actTypeList,:actTypeNameList,:billType,:bookFlag,:busiSts,:checkActType,:checkBillType,:checkBookFlag,:checkBusiSts,:checkChgServSpec,:checkExch,:checkPriority,:checkProd,:checkRelaSoNbr,:checkRunSts,:checkSoDate,:checkSoMeth,:checkSoSts,:checkSoType,:checkStepId,:chgDealFlag,:chgServSpecIdList,:chgServSpecNameList,:chgWorkMode,:chgWoType,:dealFlag,:exchIdList,:exchNameList,:forScene,:fromSoDate,:priority,:prodIdList,:prodNameList,:queryConfigId,:relaSoNbr,:rowsPerPage,:runSts,:soMeth,:soSts,:soType,:stepId,:toSoDate,:workAreaId,:workMode,:woTypeList,:woTypeNameList)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(batchQueryConfig.getActTypeList())) {      sql.setNullString("actTypeList");     } else {    sql.setString("actTypeList", batchQueryConfig.getActTypeList());    }       if (StringUtil.isBlank(batchQueryConfig.getActTypeNameList())) {      sql.setNullString("actTypeNameList");     } else {    sql.setString("actTypeNameList", batchQueryConfig.getActTypeNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getBillType())) {      sql.setNullString("billType");     } else {    sql.setString("billType", batchQueryConfig.getBillType());    }       if (StringUtil.isBlank(batchQueryConfig.getBookFlag())) {      sql.setNullString("bookFlag");     } else {    sql.setString("bookFlag", batchQueryConfig.getBookFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getBusiSts())) {      sql.setNullString("busiSts");     } else {    sql.setString("busiSts", batchQueryConfig.getBusiSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckActType())) {      sql.setNullString("checkActType");     } else {    sql.setString("checkActType", batchQueryConfig.getCheckActType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBillType())) {      sql.setNullString("checkBillType");     } else {    sql.setString("checkBillType", batchQueryConfig.getCheckBillType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBookFlag())) {      sql.setNullString("checkBookFlag");     } else {    sql.setString("checkBookFlag", batchQueryConfig.getCheckBookFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBusiSts())) {      sql.setNullString("checkBusiSts");     } else {    sql.setString("checkBusiSts", batchQueryConfig.getCheckBusiSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckChgServSpec())) {      sql.setNullString("checkChgServSpec");     } else {    sql.setString("checkChgServSpec", batchQueryConfig.getCheckChgServSpec());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckExch())) {      sql.setNullString("checkExch");     } else {    sql.setString("checkExch", batchQueryConfig.getCheckExch());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckPriority())) {      sql.setNullString("checkPriority");     } else {    sql.setString("checkPriority", batchQueryConfig.getCheckPriority());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckProd())) {      sql.setNullString("checkProd");     } else {    sql.setString("checkProd", batchQueryConfig.getCheckProd());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckRelaSoNbr())) {      sql.setNullString("checkRelaSoNbr");     } else {    sql.setString("checkRelaSoNbr", batchQueryConfig.getCheckRelaSoNbr());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckRunSts())) {      sql.setNullString("checkRunSts");     } else {    sql.setString("checkRunSts", batchQueryConfig.getCheckRunSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoDate())) {      sql.setNullString("checkSoDate");     } else {    sql.setString("checkSoDate", batchQueryConfig.getCheckSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoMeth())) {      sql.setNullString("checkSoMeth");     } else {    sql.setString("checkSoMeth", batchQueryConfig.getCheckSoMeth());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoSts())) {      sql.setNullString("checkSoSts");     } else {    sql.setString("checkSoSts", batchQueryConfig.getCheckSoSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoType())) {      sql.setNullString("checkSoType");     } else {    sql.setString("checkSoType", batchQueryConfig.getCheckSoType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckStepId())) {      sql.setNullString("checkStepId");     } else {    sql.setString("checkStepId", batchQueryConfig.getCheckStepId());    }       if (StringUtil.isBlank(batchQueryConfig.getChgDealFlag())) {      sql.setNullString("chgDealFlag");     } else {    sql.setString("chgDealFlag", batchQueryConfig.getChgDealFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getChgServSpecIdList())) {      sql.setNullString("chgServSpecIdList");     } else {    sql.setString("chgServSpecIdList", batchQueryConfig.getChgServSpecIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getChgServSpecNameList())) {      sql.setNullString("chgServSpecNameList");     } else {    sql.setString("chgServSpecNameList", batchQueryConfig.getChgServSpecNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getChgWorkMode())) {      sql.setNullString("chgWorkMode");     } else {    sql.setString("chgWorkMode", batchQueryConfig.getChgWorkMode());    }       if (StringUtil.isBlank(batchQueryConfig.getChgWoType())) {      sql.setNullString("chgWoType");     } else {    sql.setString("chgWoType", batchQueryConfig.getChgWoType());    }       if (StringUtil.isBlank(batchQueryConfig.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", batchQueryConfig.getDealFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getExchIdList())) {      sql.setNullString("exchIdList");     } else {    sql.setString("exchIdList", batchQueryConfig.getExchIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getExchNameList())) {      sql.setNullString("exchNameList");     } else {    sql.setString("exchNameList", batchQueryConfig.getExchNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getForScene())) {      sql.setNullString("forScene");     } else {    sql.setString("forScene", batchQueryConfig.getForScene());    }    if (batchQueryConfig.getFromSoDate() == null) {      sql.setNullDate("fromSoDate");     } else {    sql.setTimestamp("fromSoDate", batchQueryConfig.getFromSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getPriority())) {      sql.setNullString("priority");     } else {    sql.setString("priority", batchQueryConfig.getPriority());    }       if (StringUtil.isBlank(batchQueryConfig.getProdIdList())) {      sql.setNullString("prodIdList");     } else {    sql.setString("prodIdList", batchQueryConfig.getProdIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getProdNameList())) {      sql.setNullString("prodNameList");     } else {    sql.setString("prodNameList", batchQueryConfig.getProdNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {      sql.setNullLong("queryConfigId");     } else {    sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());    }       if (StringUtil.isBlank(batchQueryConfig.getRelaSoNbr())) {      sql.setNullString("relaSoNbr");     } else {    sql.setString("relaSoNbr", batchQueryConfig.getRelaSoNbr());    }       if (StringUtil.isBlank(batchQueryConfig.getRowsPerPage())) {      sql.setNullLong("rowsPerPage");     } else {    sql.setLong("rowsPerPage", batchQueryConfig.getRowsPerPage());    }       if (StringUtil.isBlank(batchQueryConfig.getRunSts())) {      sql.setNullString("runSts");     } else {    sql.setString("runSts", batchQueryConfig.getRunSts());    }       if (StringUtil.isBlank(batchQueryConfig.getSoMeth())) {      sql.setNullString("soMeth");     } else {    sql.setString("soMeth", batchQueryConfig.getSoMeth());    }       if (StringUtil.isBlank(batchQueryConfig.getSoSts())) {      sql.setNullString("soSts");     } else {    sql.setString("soSts", batchQueryConfig.getSoSts());    }       if (StringUtil.isBlank(batchQueryConfig.getSoType())) {      sql.setNullString("soType");     } else {    sql.setString("soType", batchQueryConfig.getSoType());    }       if (StringUtil.isBlank(batchQueryConfig.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", batchQueryConfig.getStepId());    }    if (batchQueryConfig.getToSoDate() == null) {      sql.setNullDate("toSoDate");     } else {    sql.setTimestamp("toSoDate", batchQueryConfig.getToSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getWorkAreaId())) {      sql.setNullLong("workAreaId");     } else {    sql.setLong("workAreaId", batchQueryConfig.getWorkAreaId());    }       if (StringUtil.isBlank(batchQueryConfig.getWorkMode())) {      sql.setNullString("workMode");     } else {    sql.setString("workMode", batchQueryConfig.getWorkMode());    }       if (StringUtil.isBlank(batchQueryConfig.getWoTypeList())) {      sql.setNullString("woTypeList");     } else {    sql.setString("woTypeList", batchQueryConfig.getWoTypeList());    }       if (StringUtil.isBlank(batchQueryConfig.getWoTypeNameList())) {      sql.setNullString("woTypeNameList");     } else {    sql.setString("woTypeNameList", batchQueryConfig.getWoTypeNameList());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;    if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ACT_TYPE_LIST,ACT_TYPE_NAME_LIST,BILL_TYPE,BOOK_FLAG,BUSI_STS,CHECK_ACT_TYPE,CHECK_BILL_TYPE,CHECK_BOOK_FLAG,CHECK_BUSI_STS,CHECK_CHG_SERV_SPEC,CHECK_EXCH,CHECK_PRIORITY,CHECK_PROD,CHECK_RELA_SO_NBR,CHECK_RUN_STS,CHECK_SO_DATE,CHECK_SO_METH,CHECK_SO_STS,CHECK_SO_TYPE,CHECK_STEP_ID,CHG_DEAL_FLAG,CHG_SERV_SPEC_ID_LIST,CHG_SERV_SPEC_NAME_LIST,CHG_WORK_MODE,CHG_WO_TYPE,DEAL_FLAG,EXCH_ID_LIST,EXCH_NAME_LIST,FOR_SCENE,FROM_SO_DATE,PRIORITY,PROD_ID_LIST,PROD_NAME_LIST,QUERY_CONFIG_ID,RELA_SO_NBR,ROWS_PER_PAGE,RUN_STS,SO_METH,SO_STS,SO_TYPE,STEP_ID,TO_SO_DATE,WORK_AREA_ID,WORK_MODE,WO_TYPE_LIST,WO_TYPE_NAME_LIST FROM BATCH_QUERY_CONFIG WHERE 1=1  ");sql.append(" and QUERY_CONFIG_ID=:queryConfigId");sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      batchQueryConfig =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           batchQueryConfig = new BatchQueryConfigSVO();           batchQueryConfig.setActTypeList(rs.getString("ACT_TYPE_LIST"));           batchQueryConfig.setActTypeNameList(rs.getString("ACT_TYPE_NAME_LIST"));           batchQueryConfig.setBillType(rs.getString("BILL_TYPE"));           batchQueryConfig.setBookFlag(rs.getString("BOOK_FLAG"));           batchQueryConfig.setBusiSts(rs.getString("BUSI_STS"));           batchQueryConfig.setCheckActType(rs.getString("CHECK_ACT_TYPE"));           batchQueryConfig.setCheckBillType(rs.getString("CHECK_BILL_TYPE"));           batchQueryConfig.setCheckBookFlag(rs.getString("CHECK_BOOK_FLAG"));           batchQueryConfig.setCheckBusiSts(rs.getString("CHECK_BUSI_STS"));           batchQueryConfig.setCheckChgServSpec(rs.getString("CHECK_CHG_SERV_SPEC"));           batchQueryConfig.setCheckExch(rs.getString("CHECK_EXCH"));           batchQueryConfig.setCheckPriority(rs.getString("CHECK_PRIORITY"));           batchQueryConfig.setCheckProd(rs.getString("CHECK_PROD"));           batchQueryConfig.setCheckRelaSoNbr(rs.getString("CHECK_RELA_SO_NBR"));           batchQueryConfig.setCheckRunSts(rs.getString("CHECK_RUN_STS"));           batchQueryConfig.setCheckSoDate(rs.getString("CHECK_SO_DATE"));           batchQueryConfig.setCheckSoMeth(rs.getString("CHECK_SO_METH"));           batchQueryConfig.setCheckSoSts(rs.getString("CHECK_SO_STS"));           batchQueryConfig.setCheckSoType(rs.getString("CHECK_SO_TYPE"));           batchQueryConfig.setCheckStepId(rs.getString("CHECK_STEP_ID"));           batchQueryConfig.setChgDealFlag(rs.getString("CHG_DEAL_FLAG"));           batchQueryConfig.setChgServSpecIdList(rs.getString("CHG_SERV_SPEC_ID_LIST"));           batchQueryConfig.setChgServSpecNameList(rs.getString("CHG_SERV_SPEC_NAME_LIST"));           batchQueryConfig.setChgWorkMode(rs.getString("CHG_WORK_MODE"));           batchQueryConfig.setChgWoType(rs.getString("CHG_WO_TYPE"));           batchQueryConfig.setDealFlag(rs.getString("DEAL_FLAG"));           batchQueryConfig.setExchIdList(rs.getString("EXCH_ID_LIST"));           batchQueryConfig.setExchNameList(rs.getString("EXCH_NAME_LIST"));           batchQueryConfig.setForScene(rs.getString("FOR_SCENE"));           batchQueryConfig.setFromSoDate(rs.getTimestamp("FROM_SO_DATE"));           batchQueryConfig.setPriority(rs.getString("PRIORITY"));           batchQueryConfig.setProdIdList(rs.getString("PROD_ID_LIST"));           batchQueryConfig.setProdNameList(rs.getString("PROD_NAME_LIST"));           batchQueryConfig.setQueryConfigId(rs.getString("QUERY_CONFIG_ID"));           batchQueryConfig.setRelaSoNbr(rs.getString("RELA_SO_NBR"));           batchQueryConfig.setRowsPerPage(rs.getString("ROWS_PER_PAGE"));           batchQueryConfig.setRunSts(rs.getString("RUN_STS"));           batchQueryConfig.setSoMeth(rs.getString("SO_METH"));           batchQueryConfig.setSoSts(rs.getString("SO_STS"));           batchQueryConfig.setSoType(rs.getString("SO_TYPE"));           batchQueryConfig.setStepId(rs.getString("STEP_ID"));           batchQueryConfig.setToSoDate(rs.getTimestamp("TO_SO_DATE"));           batchQueryConfig.setWorkAreaId(rs.getString("WORK_AREA_ID"));           batchQueryConfig.setWorkMode(rs.getString("WORK_MODE"));           batchQueryConfig.setWoTypeList(rs.getString("WO_TYPE_LIST"));           batchQueryConfig.setWoTypeNameList(rs.getString("WO_TYPE_NAME_LIST"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return batchQueryConfig;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ACT_TYPE_LIST,ACT_TYPE_NAME_LIST,BILL_TYPE,BOOK_FLAG,BUSI_STS,CHECK_ACT_TYPE,CHECK_BILL_TYPE,CHECK_BOOK_FLAG,CHECK_BUSI_STS,CHECK_CHG_SERV_SPEC,CHECK_EXCH,CHECK_PRIORITY,CHECK_PROD,CHECK_RELA_SO_NBR,CHECK_RUN_STS,CHECK_SO_DATE,CHECK_SO_METH,CHECK_SO_STS,CHECK_SO_TYPE,CHECK_STEP_ID,CHG_DEAL_FLAG,CHG_SERV_SPEC_ID_LIST,CHG_SERV_SPEC_NAME_LIST,CHG_WORK_MODE,CHG_WO_TYPE,DEAL_FLAG,EXCH_ID_LIST,EXCH_NAME_LIST,FOR_SCENE,FROM_SO_DATE,PRIORITY,PROD_ID_LIST,PROD_NAME_LIST,QUERY_CONFIG_ID,RELA_SO_NBR,ROWS_PER_PAGE,RUN_STS,SO_METH,SO_STS,SO_TYPE,STEP_ID,TO_SO_DATE,WORK_AREA_ID,WORK_MODE,WO_TYPE_LIST,WO_TYPE_NAME_LIST FROM BATCH_QUERY_CONFIG WHERE 1=1 ");     try {if (batchQueryConfig.getFlagActTypeList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getActTypeList())) {             sql.append(" and ACT_TYPE_LIST is null ");          }      else{             sql.append(" and ACT_TYPE_LIST=:actTypeList");             sql.setString("actTypeList", batchQueryConfig.getActTypeList());          }   } if (batchQueryConfig.getFlagActTypeNameList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getActTypeNameList())) {             sql.append(" and ACT_TYPE_NAME_LIST is null ");          }      else{             sql.append(" and ACT_TYPE_NAME_LIST=:actTypeNameList");             sql.setString("actTypeNameList", batchQueryConfig.getActTypeNameList());          }   } if (batchQueryConfig.getFlagBillType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getBillType())) {             sql.append(" and BILL_TYPE is null ");          }      else{             sql.append(" and BILL_TYPE=:billType");             sql.setString("billType", batchQueryConfig.getBillType());          }   } if (batchQueryConfig.getFlagBookFlag() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getBookFlag())) {             sql.append(" and BOOK_FLAG is null ");          }      else{             sql.append(" and BOOK_FLAG=:bookFlag");             sql.setString("bookFlag", batchQueryConfig.getBookFlag());          }   } if (batchQueryConfig.getFlagBusiSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getBusiSts())) {             sql.append(" and BUSI_STS is null ");          }      else{             sql.append(" and BUSI_STS=:busiSts");             sql.setString("busiSts", batchQueryConfig.getBusiSts());          }   } if (batchQueryConfig.getFlagCheckActType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckActType())) {             sql.append(" and CHECK_ACT_TYPE is null ");          }      else{             sql.append(" and CHECK_ACT_TYPE=:checkActType");             sql.setString("checkActType", batchQueryConfig.getCheckActType());          }   } if (batchQueryConfig.getFlagCheckBillType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckBillType())) {             sql.append(" and CHECK_BILL_TYPE is null ");          }      else{             sql.append(" and CHECK_BILL_TYPE=:checkBillType");             sql.setString("checkBillType", batchQueryConfig.getCheckBillType());          }   } if (batchQueryConfig.getFlagCheckBookFlag() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckBookFlag())) {             sql.append(" and CHECK_BOOK_FLAG is null ");          }      else{             sql.append(" and CHECK_BOOK_FLAG=:checkBookFlag");             sql.setString("checkBookFlag", batchQueryConfig.getCheckBookFlag());          }   } if (batchQueryConfig.getFlagCheckBusiSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckBusiSts())) {             sql.append(" and CHECK_BUSI_STS is null ");          }      else{             sql.append(" and CHECK_BUSI_STS=:checkBusiSts");             sql.setString("checkBusiSts", batchQueryConfig.getCheckBusiSts());          }   } if (batchQueryConfig.getFlagCheckChgServSpec() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckChgServSpec())) {             sql.append(" and CHECK_CHG_SERV_SPEC is null ");          }      else{             sql.append(" and CHECK_CHG_SERV_SPEC=:checkChgServSpec");             sql.setString("checkChgServSpec", batchQueryConfig.getCheckChgServSpec());          }   } if (batchQueryConfig.getFlagCheckExch() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckExch())) {             sql.append(" and CHECK_EXCH is null ");          }      else{             sql.append(" and CHECK_EXCH=:checkExch");             sql.setString("checkExch", batchQueryConfig.getCheckExch());          }   } if (batchQueryConfig.getFlagCheckPriority() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckPriority())) {             sql.append(" and CHECK_PRIORITY is null ");          }      else{             sql.append(" and CHECK_PRIORITY=:checkPriority");             sql.setString("checkPriority", batchQueryConfig.getCheckPriority());          }   } if (batchQueryConfig.getFlagCheckProd() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckProd())) {             sql.append(" and CHECK_PROD is null ");          }      else{             sql.append(" and CHECK_PROD=:checkProd");             sql.setString("checkProd", batchQueryConfig.getCheckProd());          }   } if (batchQueryConfig.getFlagCheckRelaSoNbr() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckRelaSoNbr())) {             sql.append(" and CHECK_RELA_SO_NBR is null ");          }      else{             sql.append(" and CHECK_RELA_SO_NBR=:checkRelaSoNbr");             sql.setString("checkRelaSoNbr", batchQueryConfig.getCheckRelaSoNbr());          }   } if (batchQueryConfig.getFlagCheckRunSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckRunSts())) {             sql.append(" and CHECK_RUN_STS is null ");          }      else{             sql.append(" and CHECK_RUN_STS=:checkRunSts");             sql.setString("checkRunSts", batchQueryConfig.getCheckRunSts());          }   } if (batchQueryConfig.getFlagCheckSoDate() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckSoDate())) {             sql.append(" and CHECK_SO_DATE is null ");          }      else{             sql.append(" and CHECK_SO_DATE=:checkSoDate");             sql.setString("checkSoDate", batchQueryConfig.getCheckSoDate());          }   } if (batchQueryConfig.getFlagCheckSoMeth() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckSoMeth())) {             sql.append(" and CHECK_SO_METH is null ");          }      else{             sql.append(" and CHECK_SO_METH=:checkSoMeth");             sql.setString("checkSoMeth", batchQueryConfig.getCheckSoMeth());          }   } if (batchQueryConfig.getFlagCheckSoSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckSoSts())) {             sql.append(" and CHECK_SO_STS is null ");          }      else{             sql.append(" and CHECK_SO_STS=:checkSoSts");             sql.setString("checkSoSts", batchQueryConfig.getCheckSoSts());          }   } if (batchQueryConfig.getFlagCheckSoType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckSoType())) {             sql.append(" and CHECK_SO_TYPE is null ");          }      else{             sql.append(" and CHECK_SO_TYPE=:checkSoType");             sql.setString("checkSoType", batchQueryConfig.getCheckSoType());          }   } if (batchQueryConfig.getFlagCheckStepId() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getCheckStepId())) {             sql.append(" and CHECK_STEP_ID is null ");          }      else{             sql.append(" and CHECK_STEP_ID=:checkStepId");             sql.setString("checkStepId", batchQueryConfig.getCheckStepId());          }   } if (batchQueryConfig.getFlagChgDealFlag() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getChgDealFlag())) {             sql.append(" and CHG_DEAL_FLAG is null ");          }      else{             sql.append(" and CHG_DEAL_FLAG=:chgDealFlag");             sql.setString("chgDealFlag", batchQueryConfig.getChgDealFlag());          }   } if (batchQueryConfig.getFlagChgServSpecIdList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getChgServSpecIdList())) {             sql.append(" and CHG_SERV_SPEC_ID_LIST is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_ID_LIST=:chgServSpecIdList");             sql.setString("chgServSpecIdList", batchQueryConfig.getChgServSpecIdList());          }   } if (batchQueryConfig.getFlagChgServSpecNameList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getChgServSpecNameList())) {             sql.append(" and CHG_SERV_SPEC_NAME_LIST is null ");          }      else{             sql.append(" and CHG_SERV_SPEC_NAME_LIST=:chgServSpecNameList");             sql.setString("chgServSpecNameList", batchQueryConfig.getChgServSpecNameList());          }   } if (batchQueryConfig.getFlagChgWorkMode() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getChgWorkMode())) {             sql.append(" and CHG_WORK_MODE is null ");          }      else{             sql.append(" and CHG_WORK_MODE=:chgWorkMode");             sql.setString("chgWorkMode", batchQueryConfig.getChgWorkMode());          }   } if (batchQueryConfig.getFlagChgWoType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getChgWoType())) {             sql.append(" and CHG_WO_TYPE is null ");          }      else{             sql.append(" and CHG_WO_TYPE=:chgWoType");             sql.setString("chgWoType", batchQueryConfig.getChgWoType());          }   } if (batchQueryConfig.getFlagDealFlag() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getDealFlag())) {             sql.append(" and DEAL_FLAG is null ");          }      else{             sql.append(" and DEAL_FLAG=:dealFlag");             sql.setString("dealFlag", batchQueryConfig.getDealFlag());          }   } if (batchQueryConfig.getFlagExchIdList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getExchIdList())) {             sql.append(" and EXCH_ID_LIST is null ");          }      else{             sql.append(" and EXCH_ID_LIST=:exchIdList");             sql.setString("exchIdList", batchQueryConfig.getExchIdList());          }   } if (batchQueryConfig.getFlagExchNameList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getExchNameList())) {             sql.append(" and EXCH_NAME_LIST is null ");          }      else{             sql.append(" and EXCH_NAME_LIST=:exchNameList");             sql.setString("exchNameList", batchQueryConfig.getExchNameList());          }   } if (batchQueryConfig.getFlagForScene() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getForScene())) {             sql.append(" and FOR_SCENE is null ");          }      else{             sql.append(" and FOR_SCENE=:forScene");             sql.setString("forScene", batchQueryConfig.getForScene());          }   } if (batchQueryConfig.getFlagFromSoDate() == 1) {      if (batchQueryConfig.getFromSoDate() == null) {             sql.append(" and FROM_SO_DATE is null ");          }      else{             sql.append(" and FROM_SO_DATE=:fromSoDate");             sql.setTimestamp("fromSoDate", batchQueryConfig.getFromSoDate());          }   } if (batchQueryConfig.getFlagPriority() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getPriority())) {             sql.append(" and PRIORITY is null ");          }      else{             sql.append(" and PRIORITY=:priority");             sql.setString("priority", batchQueryConfig.getPriority());          }   } if (batchQueryConfig.getFlagProdIdList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getProdIdList())) {             sql.append(" and PROD_ID_LIST is null ");          }      else{             sql.append(" and PROD_ID_LIST=:prodIdList");             sql.setString("prodIdList", batchQueryConfig.getProdIdList());          }   } if (batchQueryConfig.getFlagProdNameList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getProdNameList())) {             sql.append(" and PROD_NAME_LIST is null ");          }      else{             sql.append(" and PROD_NAME_LIST=:prodNameList");             sql.setString("prodNameList", batchQueryConfig.getProdNameList());          }   } if (batchQueryConfig.getFlagQueryConfigId() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {             sql.append(" and QUERY_CONFIG_ID is null ");          }      else{             sql.append(" and QUERY_CONFIG_ID=:queryConfigId");             sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());          }   } if (batchQueryConfig.getFlagRelaSoNbr() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getRelaSoNbr())) {             sql.append(" and RELA_SO_NBR is null ");          }      else{             sql.append(" and RELA_SO_NBR=:relaSoNbr");             sql.setString("relaSoNbr", batchQueryConfig.getRelaSoNbr());          }   } if (batchQueryConfig.getFlagRowsPerPage() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getRowsPerPage())) {             sql.append(" and ROWS_PER_PAGE is null ");          }      else{             sql.append(" and ROWS_PER_PAGE=:rowsPerPage");             sql.setLong("rowsPerPage", batchQueryConfig.getRowsPerPage());          }   } if (batchQueryConfig.getFlagRunSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getRunSts())) {             sql.append(" and RUN_STS is null ");          }      else{             sql.append(" and RUN_STS=:runSts");             sql.setString("runSts", batchQueryConfig.getRunSts());          }   } if (batchQueryConfig.getFlagSoMeth() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getSoMeth())) {             sql.append(" and SO_METH is null ");          }      else{             sql.append(" and SO_METH=:soMeth");             sql.setString("soMeth", batchQueryConfig.getSoMeth());          }   } if (batchQueryConfig.getFlagSoSts() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getSoSts())) {             sql.append(" and SO_STS is null ");          }      else{             sql.append(" and SO_STS=:soSts");             sql.setString("soSts", batchQueryConfig.getSoSts());          }   } if (batchQueryConfig.getFlagSoType() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getSoType())) {             sql.append(" and SO_TYPE is null ");          }      else{             sql.append(" and SO_TYPE=:soType");             sql.setString("soType", batchQueryConfig.getSoType());          }   } if (batchQueryConfig.getFlagStepId() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getStepId())) {             sql.append(" and STEP_ID is null ");          }      else{             sql.append(" and STEP_ID=:stepId");             sql.setString("stepId", batchQueryConfig.getStepId());          }   } if (batchQueryConfig.getFlagToSoDate() == 1) {      if (batchQueryConfig.getToSoDate() == null) {             sql.append(" and TO_SO_DATE is null ");          }      else{             sql.append(" and TO_SO_DATE=:toSoDate");             sql.setTimestamp("toSoDate", batchQueryConfig.getToSoDate());          }   } if (batchQueryConfig.getFlagWorkAreaId() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getWorkAreaId())) {             sql.append(" and WORK_AREA_ID is null ");          }      else{             sql.append(" and WORK_AREA_ID=:workAreaId");             sql.setLong("workAreaId", batchQueryConfig.getWorkAreaId());          }   } if (batchQueryConfig.getFlagWorkMode() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getWorkMode())) {             sql.append(" and WORK_MODE is null ");          }      else{             sql.append(" and WORK_MODE=:workMode");             sql.setString("workMode", batchQueryConfig.getWorkMode());          }   } if (batchQueryConfig.getFlagWoTypeList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getWoTypeList())) {             sql.append(" and WO_TYPE_LIST is null ");          }      else{             sql.append(" and WO_TYPE_LIST=:woTypeList");             sql.setString("woTypeList", batchQueryConfig.getWoTypeList());          }   } if (batchQueryConfig.getFlagWoTypeNameList() == 1) {      if (StringUtil.isBlank(batchQueryConfig.getWoTypeNameList())) {             sql.append(" and WO_TYPE_NAME_LIST is null ");          }      else{             sql.append(" and WO_TYPE_NAME_LIST=:woTypeNameList");             sql.setString("woTypeNameList", batchQueryConfig.getWoTypeNameList());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           batchQueryConfig = new BatchQueryConfigSVO();           batchQueryConfig.setActTypeList(rs.getString("ACT_TYPE_LIST"));           batchQueryConfig.setActTypeNameList(rs.getString("ACT_TYPE_NAME_LIST"));           batchQueryConfig.setBillType(rs.getString("BILL_TYPE"));           batchQueryConfig.setBookFlag(rs.getString("BOOK_FLAG"));           batchQueryConfig.setBusiSts(rs.getString("BUSI_STS"));           batchQueryConfig.setCheckActType(rs.getString("CHECK_ACT_TYPE"));           batchQueryConfig.setCheckBillType(rs.getString("CHECK_BILL_TYPE"));           batchQueryConfig.setCheckBookFlag(rs.getString("CHECK_BOOK_FLAG"));           batchQueryConfig.setCheckBusiSts(rs.getString("CHECK_BUSI_STS"));           batchQueryConfig.setCheckChgServSpec(rs.getString("CHECK_CHG_SERV_SPEC"));           batchQueryConfig.setCheckExch(rs.getString("CHECK_EXCH"));           batchQueryConfig.setCheckPriority(rs.getString("CHECK_PRIORITY"));           batchQueryConfig.setCheckProd(rs.getString("CHECK_PROD"));           batchQueryConfig.setCheckRelaSoNbr(rs.getString("CHECK_RELA_SO_NBR"));           batchQueryConfig.setCheckRunSts(rs.getString("CHECK_RUN_STS"));           batchQueryConfig.setCheckSoDate(rs.getString("CHECK_SO_DATE"));           batchQueryConfig.setCheckSoMeth(rs.getString("CHECK_SO_METH"));           batchQueryConfig.setCheckSoSts(rs.getString("CHECK_SO_STS"));           batchQueryConfig.setCheckSoType(rs.getString("CHECK_SO_TYPE"));           batchQueryConfig.setCheckStepId(rs.getString("CHECK_STEP_ID"));           batchQueryConfig.setChgDealFlag(rs.getString("CHG_DEAL_FLAG"));           batchQueryConfig.setChgServSpecIdList(rs.getString("CHG_SERV_SPEC_ID_LIST"));           batchQueryConfig.setChgServSpecNameList(rs.getString("CHG_SERV_SPEC_NAME_LIST"));           batchQueryConfig.setChgWorkMode(rs.getString("CHG_WORK_MODE"));           batchQueryConfig.setChgWoType(rs.getString("CHG_WO_TYPE"));           batchQueryConfig.setDealFlag(rs.getString("DEAL_FLAG"));           batchQueryConfig.setExchIdList(rs.getString("EXCH_ID_LIST"));           batchQueryConfig.setExchNameList(rs.getString("EXCH_NAME_LIST"));           batchQueryConfig.setForScene(rs.getString("FOR_SCENE"));           batchQueryConfig.setFromSoDate(rs.getTimestamp("FROM_SO_DATE"));           batchQueryConfig.setPriority(rs.getString("PRIORITY"));           batchQueryConfig.setProdIdList(rs.getString("PROD_ID_LIST"));           batchQueryConfig.setProdNameList(rs.getString("PROD_NAME_LIST"));           batchQueryConfig.setQueryConfigId(rs.getString("QUERY_CONFIG_ID"));           batchQueryConfig.setRelaSoNbr(rs.getString("RELA_SO_NBR"));           batchQueryConfig.setRowsPerPage(rs.getString("ROWS_PER_PAGE"));           batchQueryConfig.setRunSts(rs.getString("RUN_STS"));           batchQueryConfig.setSoMeth(rs.getString("SO_METH"));           batchQueryConfig.setSoSts(rs.getString("SO_STS"));           batchQueryConfig.setSoType(rs.getString("SO_TYPE"));           batchQueryConfig.setStepId(rs.getString("STEP_ID"));           batchQueryConfig.setToSoDate(rs.getTimestamp("TO_SO_DATE"));           batchQueryConfig.setWorkAreaId(rs.getString("WORK_AREA_ID"));           batchQueryConfig.setWorkMode(rs.getString("WORK_MODE"));           batchQueryConfig.setWoTypeList(rs.getString("WO_TYPE_LIST"));           batchQueryConfig.setWoTypeNameList(rs.getString("WO_TYPE_NAME_LIST"));               res.add(batchQueryConfig);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;    if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE BATCH_QUERY_CONFIG SET ");     try {if (batchQueryConfig.getFlagActTypeList() == 1) {sql.append("ACT_TYPE_LIST=:actTypeList,"); sql.setString("actTypeList", batchQueryConfig.getActTypeList()); } if (batchQueryConfig.getFlagActTypeNameList() == 1) {sql.append("ACT_TYPE_NAME_LIST=:actTypeNameList,"); sql.setString("actTypeNameList", batchQueryConfig.getActTypeNameList()); } if (batchQueryConfig.getFlagBillType() == 1) {sql.append("BILL_TYPE=:billType,"); sql.setString("billType", batchQueryConfig.getBillType()); } if (batchQueryConfig.getFlagBookFlag() == 1) {sql.append("BOOK_FLAG=:bookFlag,"); sql.setString("bookFlag", batchQueryConfig.getBookFlag()); } if (batchQueryConfig.getFlagBusiSts() == 1) {sql.append("BUSI_STS=:busiSts,"); sql.setString("busiSts", batchQueryConfig.getBusiSts()); } if (batchQueryConfig.getFlagCheckActType() == 1) {sql.append("CHECK_ACT_TYPE=:checkActType,"); sql.setString("checkActType", batchQueryConfig.getCheckActType()); } if (batchQueryConfig.getFlagCheckBillType() == 1) {sql.append("CHECK_BILL_TYPE=:checkBillType,"); sql.setString("checkBillType", batchQueryConfig.getCheckBillType()); } if (batchQueryConfig.getFlagCheckBookFlag() == 1) {sql.append("CHECK_BOOK_FLAG=:checkBookFlag,"); sql.setString("checkBookFlag", batchQueryConfig.getCheckBookFlag()); } if (batchQueryConfig.getFlagCheckBusiSts() == 1) {sql.append("CHECK_BUSI_STS=:checkBusiSts,"); sql.setString("checkBusiSts", batchQueryConfig.getCheckBusiSts()); } if (batchQueryConfig.getFlagCheckChgServSpec() == 1) {sql.append("CHECK_CHG_SERV_SPEC=:checkChgServSpec,"); sql.setString("checkChgServSpec", batchQueryConfig.getCheckChgServSpec()); } if (batchQueryConfig.getFlagCheckExch() == 1) {sql.append("CHECK_EXCH=:checkExch,"); sql.setString("checkExch", batchQueryConfig.getCheckExch()); } if (batchQueryConfig.getFlagCheckPriority() == 1) {sql.append("CHECK_PRIORITY=:checkPriority,"); sql.setString("checkPriority", batchQueryConfig.getCheckPriority()); } if (batchQueryConfig.getFlagCheckProd() == 1) {sql.append("CHECK_PROD=:checkProd,"); sql.setString("checkProd", batchQueryConfig.getCheckProd()); } if (batchQueryConfig.getFlagCheckRelaSoNbr() == 1) {sql.append("CHECK_RELA_SO_NBR=:checkRelaSoNbr,"); sql.setString("checkRelaSoNbr", batchQueryConfig.getCheckRelaSoNbr()); } if (batchQueryConfig.getFlagCheckRunSts() == 1) {sql.append("CHECK_RUN_STS=:checkRunSts,"); sql.setString("checkRunSts", batchQueryConfig.getCheckRunSts()); } if (batchQueryConfig.getFlagCheckSoDate() == 1) {sql.append("CHECK_SO_DATE=:checkSoDate,"); sql.setString("checkSoDate", batchQueryConfig.getCheckSoDate()); } if (batchQueryConfig.getFlagCheckSoMeth() == 1) {sql.append("CHECK_SO_METH=:checkSoMeth,"); sql.setString("checkSoMeth", batchQueryConfig.getCheckSoMeth()); } if (batchQueryConfig.getFlagCheckSoSts() == 1) {sql.append("CHECK_SO_STS=:checkSoSts,"); sql.setString("checkSoSts", batchQueryConfig.getCheckSoSts()); } if (batchQueryConfig.getFlagCheckSoType() == 1) {sql.append("CHECK_SO_TYPE=:checkSoType,"); sql.setString("checkSoType", batchQueryConfig.getCheckSoType()); } if (batchQueryConfig.getFlagCheckStepId() == 1) {sql.append("CHECK_STEP_ID=:checkStepId,"); sql.setString("checkStepId", batchQueryConfig.getCheckStepId()); } if (batchQueryConfig.getFlagChgDealFlag() == 1) {sql.append("CHG_DEAL_FLAG=:chgDealFlag,"); sql.setString("chgDealFlag", batchQueryConfig.getChgDealFlag()); } if (batchQueryConfig.getFlagChgServSpecIdList() == 1) {sql.append("CHG_SERV_SPEC_ID_LIST=:chgServSpecIdList,"); sql.setString("chgServSpecIdList", batchQueryConfig.getChgServSpecIdList()); } if (batchQueryConfig.getFlagChgServSpecNameList() == 1) {sql.append("CHG_SERV_SPEC_NAME_LIST=:chgServSpecNameList,"); sql.setString("chgServSpecNameList", batchQueryConfig.getChgServSpecNameList()); } if (batchQueryConfig.getFlagChgWorkMode() == 1) {sql.append("CHG_WORK_MODE=:chgWorkMode,"); sql.setString("chgWorkMode", batchQueryConfig.getChgWorkMode()); } if (batchQueryConfig.getFlagChgWoType() == 1) {sql.append("CHG_WO_TYPE=:chgWoType,"); sql.setString("chgWoType", batchQueryConfig.getChgWoType()); } if (batchQueryConfig.getFlagDealFlag() == 1) {sql.append("DEAL_FLAG=:dealFlag,"); sql.setString("dealFlag", batchQueryConfig.getDealFlag()); } if (batchQueryConfig.getFlagExchIdList() == 1) {sql.append("EXCH_ID_LIST=:exchIdList,"); sql.setString("exchIdList", batchQueryConfig.getExchIdList()); } if (batchQueryConfig.getFlagExchNameList() == 1) {sql.append("EXCH_NAME_LIST=:exchNameList,"); sql.setString("exchNameList", batchQueryConfig.getExchNameList()); } if (batchQueryConfig.getFlagForScene() == 1) {sql.append("FOR_SCENE=:forScene,"); sql.setString("forScene", batchQueryConfig.getForScene()); } if (batchQueryConfig.getFlagFromSoDate() == 1) {sql.append("FROM_SO_DATE=:fromSoDate,"); sql.setTimestamp("fromSoDate", batchQueryConfig.getFromSoDate()); } if (batchQueryConfig.getFlagPriority() == 1) {sql.append("PRIORITY=:priority,"); sql.setString("priority", batchQueryConfig.getPriority()); } if (batchQueryConfig.getFlagProdIdList() == 1) {sql.append("PROD_ID_LIST=:prodIdList,"); sql.setString("prodIdList", batchQueryConfig.getProdIdList()); } if (batchQueryConfig.getFlagProdNameList() == 1) {sql.append("PROD_NAME_LIST=:prodNameList,"); sql.setString("prodNameList", batchQueryConfig.getProdNameList()); } if (batchQueryConfig.getFlagRelaSoNbr() == 1) {sql.append("RELA_SO_NBR=:relaSoNbr,"); sql.setString("relaSoNbr", batchQueryConfig.getRelaSoNbr()); } if (batchQueryConfig.getFlagRowsPerPage() == 1) {sql.append("ROWS_PER_PAGE=:rowsPerPage,");sql.setLong("rowsPerPage", batchQueryConfig.getRowsPerPage()); } if (batchQueryConfig.getFlagRunSts() == 1) {sql.append("RUN_STS=:runSts,"); sql.setString("runSts", batchQueryConfig.getRunSts()); } if (batchQueryConfig.getFlagSoMeth() == 1) {sql.append("SO_METH=:soMeth,"); sql.setString("soMeth", batchQueryConfig.getSoMeth()); } if (batchQueryConfig.getFlagSoSts() == 1) {sql.append("SO_STS=:soSts,"); sql.setString("soSts", batchQueryConfig.getSoSts()); } if (batchQueryConfig.getFlagSoType() == 1) {sql.append("SO_TYPE=:soType,"); sql.setString("soType", batchQueryConfig.getSoType()); } if (batchQueryConfig.getFlagStepId() == 1) {sql.append("STEP_ID=:stepId,"); sql.setString("stepId", batchQueryConfig.getStepId()); } if (batchQueryConfig.getFlagToSoDate() == 1) {sql.append("TO_SO_DATE=:toSoDate,"); sql.setTimestamp("toSoDate", batchQueryConfig.getToSoDate()); } if (batchQueryConfig.getFlagWorkAreaId() == 1) {sql.append("WORK_AREA_ID=:workAreaId,");sql.setLong("workAreaId", batchQueryConfig.getWorkAreaId()); } if (batchQueryConfig.getFlagWorkMode() == 1) {sql.append("WORK_MODE=:workMode,"); sql.setString("workMode", batchQueryConfig.getWorkMode()); } if (batchQueryConfig.getFlagWoTypeList() == 1) {sql.append("WO_TYPE_LIST=:woTypeList,"); sql.setString("woTypeList", batchQueryConfig.getWoTypeList()); } if (batchQueryConfig.getFlagWoTypeNameList() == 1) {sql.append("WO_TYPE_NAME_LIST=:woTypeNameList,"); sql.setString("woTypeNameList", batchQueryConfig.getWoTypeNameList()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and QUERY_CONFIG_ID=:queryConfigId");sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO BATCH_QUERY_CONFIG(ACT_TYPE_LIST,ACT_TYPE_NAME_LIST,BILL_TYPE,BOOK_FLAG,BUSI_STS,CHECK_ACT_TYPE,CHECK_BILL_TYPE,CHECK_BOOK_FLAG,CHECK_BUSI_STS,CHECK_CHG_SERV_SPEC,CHECK_EXCH,CHECK_PRIORITY,CHECK_PROD,CHECK_RELA_SO_NBR,CHECK_RUN_STS,CHECK_SO_DATE,CHECK_SO_METH,CHECK_SO_STS,CHECK_SO_TYPE,CHECK_STEP_ID,CHG_DEAL_FLAG,CHG_SERV_SPEC_ID_LIST,CHG_SERV_SPEC_NAME_LIST,CHG_WORK_MODE,CHG_WO_TYPE,DEAL_FLAG,EXCH_ID_LIST,EXCH_NAME_LIST,FOR_SCENE,FROM_SO_DATE,PRIORITY,PROD_ID_LIST,PROD_NAME_LIST,QUERY_CONFIG_ID,RELA_SO_NBR,ROWS_PER_PAGE,RUN_STS,SO_METH,SO_STS,SO_TYPE,STEP_ID,TO_SO_DATE,WORK_AREA_ID,WORK_MODE,WO_TYPE_LIST,WO_TYPE_NAME_LIST)");sql.append(" VALUES (:actTypeList,:actTypeNameList,:billType,:bookFlag,:busiSts,:checkActType,:checkBillType,:checkBookFlag,:checkBusiSts,:checkChgServSpec,:checkExch,:checkPriority,:checkProd,:checkRelaSoNbr,:checkRunSts,:checkSoDate,:checkSoMeth,:checkSoSts,:checkSoType,:checkStepId,:chgDealFlag,:chgServSpecIdList,:chgServSpecNameList,:chgWorkMode,:chgWoType,:dealFlag,:exchIdList,:exchNameList,:forScene,:fromSoDate,:priority,:prodIdList,:prodNameList,:queryConfigId,:relaSoNbr,:rowsPerPage,:runSts,:soMeth,:soSts,:soType,:stepId,:toSoDate,:workAreaId,:workMode,:woTypeList,:woTypeNameList)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) list.get(i);         if (batchQueryConfig== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(batchQueryConfig.getActTypeList())) {      sql.setNullString("actTypeList");     } else {    sql.setString("actTypeList", batchQueryConfig.getActTypeList());    }       if (StringUtil.isBlank(batchQueryConfig.getActTypeNameList())) {      sql.setNullString("actTypeNameList");     } else {    sql.setString("actTypeNameList", batchQueryConfig.getActTypeNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getBillType())) {      sql.setNullString("billType");     } else {    sql.setString("billType", batchQueryConfig.getBillType());    }       if (StringUtil.isBlank(batchQueryConfig.getBookFlag())) {      sql.setNullString("bookFlag");     } else {    sql.setString("bookFlag", batchQueryConfig.getBookFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getBusiSts())) {      sql.setNullString("busiSts");     } else {    sql.setString("busiSts", batchQueryConfig.getBusiSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckActType())) {      sql.setNullString("checkActType");     } else {    sql.setString("checkActType", batchQueryConfig.getCheckActType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBillType())) {      sql.setNullString("checkBillType");     } else {    sql.setString("checkBillType", batchQueryConfig.getCheckBillType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBookFlag())) {      sql.setNullString("checkBookFlag");     } else {    sql.setString("checkBookFlag", batchQueryConfig.getCheckBookFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckBusiSts())) {      sql.setNullString("checkBusiSts");     } else {    sql.setString("checkBusiSts", batchQueryConfig.getCheckBusiSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckChgServSpec())) {      sql.setNullString("checkChgServSpec");     } else {    sql.setString("checkChgServSpec", batchQueryConfig.getCheckChgServSpec());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckExch())) {      sql.setNullString("checkExch");     } else {    sql.setString("checkExch", batchQueryConfig.getCheckExch());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckPriority())) {      sql.setNullString("checkPriority");     } else {    sql.setString("checkPriority", batchQueryConfig.getCheckPriority());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckProd())) {      sql.setNullString("checkProd");     } else {    sql.setString("checkProd", batchQueryConfig.getCheckProd());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckRelaSoNbr())) {      sql.setNullString("checkRelaSoNbr");     } else {    sql.setString("checkRelaSoNbr", batchQueryConfig.getCheckRelaSoNbr());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckRunSts())) {      sql.setNullString("checkRunSts");     } else {    sql.setString("checkRunSts", batchQueryConfig.getCheckRunSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoDate())) {      sql.setNullString("checkSoDate");     } else {    sql.setString("checkSoDate", batchQueryConfig.getCheckSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoMeth())) {      sql.setNullString("checkSoMeth");     } else {    sql.setString("checkSoMeth", batchQueryConfig.getCheckSoMeth());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoSts())) {      sql.setNullString("checkSoSts");     } else {    sql.setString("checkSoSts", batchQueryConfig.getCheckSoSts());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckSoType())) {      sql.setNullString("checkSoType");     } else {    sql.setString("checkSoType", batchQueryConfig.getCheckSoType());    }       if (StringUtil.isBlank(batchQueryConfig.getCheckStepId())) {      sql.setNullString("checkStepId");     } else {    sql.setString("checkStepId", batchQueryConfig.getCheckStepId());    }       if (StringUtil.isBlank(batchQueryConfig.getChgDealFlag())) {      sql.setNullString("chgDealFlag");     } else {    sql.setString("chgDealFlag", batchQueryConfig.getChgDealFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getChgServSpecIdList())) {      sql.setNullString("chgServSpecIdList");     } else {    sql.setString("chgServSpecIdList", batchQueryConfig.getChgServSpecIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getChgServSpecNameList())) {      sql.setNullString("chgServSpecNameList");     } else {    sql.setString("chgServSpecNameList", batchQueryConfig.getChgServSpecNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getChgWorkMode())) {      sql.setNullString("chgWorkMode");     } else {    sql.setString("chgWorkMode", batchQueryConfig.getChgWorkMode());    }       if (StringUtil.isBlank(batchQueryConfig.getChgWoType())) {      sql.setNullString("chgWoType");     } else {    sql.setString("chgWoType", batchQueryConfig.getChgWoType());    }       if (StringUtil.isBlank(batchQueryConfig.getDealFlag())) {      sql.setNullString("dealFlag");     } else {    sql.setString("dealFlag", batchQueryConfig.getDealFlag());    }       if (StringUtil.isBlank(batchQueryConfig.getExchIdList())) {      sql.setNullString("exchIdList");     } else {    sql.setString("exchIdList", batchQueryConfig.getExchIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getExchNameList())) {      sql.setNullString("exchNameList");     } else {    sql.setString("exchNameList", batchQueryConfig.getExchNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getForScene())) {      sql.setNullString("forScene");     } else {    sql.setString("forScene", batchQueryConfig.getForScene());    }    if (batchQueryConfig.getFromSoDate() == null) {      sql.setNullDate("fromSoDate");     } else {    sql.setTimestamp("fromSoDate", batchQueryConfig.getFromSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getPriority())) {      sql.setNullString("priority");     } else {    sql.setString("priority", batchQueryConfig.getPriority());    }       if (StringUtil.isBlank(batchQueryConfig.getProdIdList())) {      sql.setNullString("prodIdList");     } else {    sql.setString("prodIdList", batchQueryConfig.getProdIdList());    }       if (StringUtil.isBlank(batchQueryConfig.getProdNameList())) {      sql.setNullString("prodNameList");     } else {    sql.setString("prodNameList", batchQueryConfig.getProdNameList());    }       if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {      sql.setNullLong("queryConfigId");     } else {    sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());    }       if (StringUtil.isBlank(batchQueryConfig.getRelaSoNbr())) {      sql.setNullString("relaSoNbr");     } else {    sql.setString("relaSoNbr", batchQueryConfig.getRelaSoNbr());    }       if (StringUtil.isBlank(batchQueryConfig.getRowsPerPage())) {      sql.setNullLong("rowsPerPage");     } else {    sql.setLong("rowsPerPage", batchQueryConfig.getRowsPerPage());    }       if (StringUtil.isBlank(batchQueryConfig.getRunSts())) {      sql.setNullString("runSts");     } else {    sql.setString("runSts", batchQueryConfig.getRunSts());    }       if (StringUtil.isBlank(batchQueryConfig.getSoMeth())) {      sql.setNullString("soMeth");     } else {    sql.setString("soMeth", batchQueryConfig.getSoMeth());    }       if (StringUtil.isBlank(batchQueryConfig.getSoSts())) {      sql.setNullString("soSts");     } else {    sql.setString("soSts", batchQueryConfig.getSoSts());    }       if (StringUtil.isBlank(batchQueryConfig.getSoType())) {      sql.setNullString("soType");     } else {    sql.setString("soType", batchQueryConfig.getSoType());    }       if (StringUtil.isBlank(batchQueryConfig.getStepId())) {      sql.setNullString("stepId");     } else {    sql.setString("stepId", batchQueryConfig.getStepId());    }    if (batchQueryConfig.getToSoDate() == null) {      sql.setNullDate("toSoDate");     } else {    sql.setTimestamp("toSoDate", batchQueryConfig.getToSoDate());    }       if (StringUtil.isBlank(batchQueryConfig.getWorkAreaId())) {      sql.setNullLong("workAreaId");     } else {    sql.setLong("workAreaId", batchQueryConfig.getWorkAreaId());    }       if (StringUtil.isBlank(batchQueryConfig.getWorkMode())) {      sql.setNullString("workMode");     } else {    sql.setString("workMode", batchQueryConfig.getWorkMode());    }       if (StringUtil.isBlank(batchQueryConfig.getWoTypeList())) {      sql.setNullString("woTypeList");     } else {    sql.setString("woTypeList", batchQueryConfig.getWoTypeList());    }       if (StringUtil.isBlank(batchQueryConfig.getWoTypeNameList())) {      sql.setNullString("woTypeNameList");     } else {    sql.setString("woTypeNameList", batchQueryConfig.getWoTypeNameList());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;    if (StringUtil.isBlank(batchQueryConfig.getQueryConfigId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM BATCH_QUERY_CONFIG WHERE 1=1  ");sql.append(" and QUERY_CONFIG_ID=:queryConfigId");sql.setLong("queryConfigId", batchQueryConfig.getQueryConfigId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     BatchQueryConfigSVO batchQueryConfig=(BatchQueryConfigSVO) vo;       }}
