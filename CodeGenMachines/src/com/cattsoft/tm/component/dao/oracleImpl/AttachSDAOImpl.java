package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IAttachSDAO;import com.cattsoft.tm.vo.AttachSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法AttachSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class AttachSDAOImpl implements IAttachSDAO{    private static Logger log = Logger.getLogger(AttachSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AttachSVO attach=(AttachSVO) vo;    if (StringUtil.isBlank(attach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO ATTACH(ARTISTIC_STYLE,ATTACH_DESC,ATTACH_ID,ATTACH_PATH,ATTACH_SIZE,ATTACH_TOPIC,ATTACH_TYPE,AUDIT_STATUS,PLAY_COUNT,PRAISE_COUNT,REAL_FILE_NAME,UPLOAD_TIME,USER_ID)");sql.append(" VALUES (:artisticStyle,:attachDesc,:attachId,:attachPath,:attachSize,:attachTopic,:attachType,:auditStatus,:playCount,:praiseCount,:realFileName,:uploadTime,:userId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(attach.getArtisticStyle())) {      sql.setNullString("artisticStyle");     } else {    sql.setString("artisticStyle", attach.getArtisticStyle());    }       if (StringUtil.isBlank(attach.getAttachDesc())) {      sql.setNullString("attachDesc");     } else {    sql.setString("attachDesc", attach.getAttachDesc());    }       if (StringUtil.isBlank(attach.getAttachId())) {      sql.setNullLong("attachId");     } else {    sql.setLong("attachId", attach.getAttachId());    }       if (StringUtil.isBlank(attach.getAttachPath())) {      sql.setNullString("attachPath");     } else {    sql.setString("attachPath", attach.getAttachPath());    }       if (StringUtil.isBlank(attach.getAttachSize())) {      sql.setNullString("attachSize");     } else {    sql.setString("attachSize", attach.getAttachSize());    }       if (StringUtil.isBlank(attach.getAttachTopic())) {      sql.setNullString("attachTopic");     } else {    sql.setString("attachTopic", attach.getAttachTopic());    }       if (StringUtil.isBlank(attach.getAttachType())) {      sql.setNullString("attachType");     } else {    sql.setString("attachType", attach.getAttachType());    }       if (StringUtil.isBlank(attach.getAuditStatus())) {      sql.setNullString("auditStatus");     } else {    sql.setString("auditStatus", attach.getAuditStatus());    }       if (StringUtil.isBlank(attach.getPlayCount())) {      sql.setNullString("playCount");     } else {    sql.setString("playCount", attach.getPlayCount());    }       if (StringUtil.isBlank(attach.getPraiseCount())) {      sql.setNullString("praiseCount");     } else {    sql.setString("praiseCount", attach.getPraiseCount());    }       if (StringUtil.isBlank(attach.getRealFileName())) {      sql.setNullString("realFileName");     } else {    sql.setString("realFileName", attach.getRealFileName());    }    if (attach.getUploadTime() == null) {      sql.setNullDate("uploadTime");     } else {    sql.setTimestamp("uploadTime", attach.getUploadTime());    }       if (StringUtil.isBlank(attach.getUserId())) {      sql.setNullString("userId");     } else {    sql.setString("userId", attach.getUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AttachSVO attach=(AttachSVO) vo;    if (StringUtil.isBlank(attach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT ARTISTIC_STYLE,ATTACH_DESC,ATTACH_ID,ATTACH_PATH,ATTACH_SIZE,ATTACH_TOPIC,ATTACH_TYPE,AUDIT_STATUS,PLAY_COUNT,PRAISE_COUNT,REAL_FILE_NAME,UPLOAD_TIME,USER_ID FROM ATTACH WHERE 1=1  ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", attach.getAttachId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      attach =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           attach = new AttachSVO();           attach.setArtisticStyle(rs.getString("ARTISTIC_STYLE"));           attach.setAttachDesc(rs.getString("ATTACH_DESC"));           attach.setAttachId(rs.getString("ATTACH_ID"));           attach.setAttachPath(rs.getString("ATTACH_PATH"));           attach.setAttachSize(rs.getString("ATTACH_SIZE"));           attach.setAttachTopic(rs.getString("ATTACH_TOPIC"));           attach.setAttachType(rs.getString("ATTACH_TYPE"));           attach.setAuditStatus(rs.getString("AUDIT_STATUS"));           attach.setPlayCount(rs.getString("PLAY_COUNT"));           attach.setPraiseCount(rs.getString("PRAISE_COUNT"));           attach.setRealFileName(rs.getString("REAL_FILE_NAME"));           attach.setUploadTime(rs.getTimestamp("UPLOAD_TIME"));           attach.setUserId(rs.getString("USER_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return attach;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       AttachSVO attach=(AttachSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ARTISTIC_STYLE,ATTACH_DESC,ATTACH_ID,ATTACH_PATH,ATTACH_SIZE,ATTACH_TOPIC,ATTACH_TYPE,AUDIT_STATUS,PLAY_COUNT,PRAISE_COUNT,REAL_FILE_NAME,UPLOAD_TIME,USER_ID FROM ATTACH WHERE 1=1 ");     try {if (attach.getFlagArtisticStyle() == 1) {      if (StringUtil.isBlank(attach.getArtisticStyle())) {             sql.append(" and ARTISTIC_STYLE is null ");          }      else{             sql.append(" and ARTISTIC_STYLE=:artisticStyle");             sql.setString("artisticStyle", attach.getArtisticStyle());          }   } if (attach.getFlagAttachDesc() == 1) {      if (StringUtil.isBlank(attach.getAttachDesc())) {             sql.append(" and ATTACH_DESC is null ");          }      else{             sql.append(" and ATTACH_DESC=:attachDesc");             sql.setString("attachDesc", attach.getAttachDesc());          }   } if (attach.getFlagAttachId() == 1) {      if (StringUtil.isBlank(attach.getAttachId())) {             sql.append(" and ATTACH_ID is null ");          }      else{             sql.append(" and ATTACH_ID=:attachId");             sql.setLong("attachId", attach.getAttachId());          }   } if (attach.getFlagAttachPath() == 1) {      if (StringUtil.isBlank(attach.getAttachPath())) {             sql.append(" and ATTACH_PATH is null ");          }      else{             sql.append(" and ATTACH_PATH=:attachPath");             sql.setString("attachPath", attach.getAttachPath());          }   } if (attach.getFlagAttachSize() == 1) {      if (StringUtil.isBlank(attach.getAttachSize())) {             sql.append(" and ATTACH_SIZE is null ");          }      else{             sql.append(" and ATTACH_SIZE=:attachSize");             sql.setString("attachSize", attach.getAttachSize());          }   } if (attach.getFlagAttachTopic() == 1) {      if (StringUtil.isBlank(attach.getAttachTopic())) {             sql.append(" and ATTACH_TOPIC is null ");          }      else{             sql.append(" and ATTACH_TOPIC=:attachTopic");             sql.setString("attachTopic", attach.getAttachTopic());          }   } if (attach.getFlagAttachType() == 1) {      if (StringUtil.isBlank(attach.getAttachType())) {             sql.append(" and ATTACH_TYPE is null ");          }      else{             sql.append(" and ATTACH_TYPE=:attachType");             sql.setString("attachType", attach.getAttachType());          }   } if (attach.getFlagAuditStatus() == 1) {      if (StringUtil.isBlank(attach.getAuditStatus())) {             sql.append(" and AUDIT_STATUS is null ");          }      else{             sql.append(" and AUDIT_STATUS=:auditStatus");             sql.setString("auditStatus", attach.getAuditStatus());          }   } if (attach.getFlagPlayCount() == 1) {      if (StringUtil.isBlank(attach.getPlayCount())) {             sql.append(" and PLAY_COUNT is null ");          }      else{             sql.append(" and PLAY_COUNT=:playCount");             sql.setString("playCount", attach.getPlayCount());          }   } if (attach.getFlagPraiseCount() == 1) {      if (StringUtil.isBlank(attach.getPraiseCount())) {             sql.append(" and PRAISE_COUNT is null ");          }      else{             sql.append(" and PRAISE_COUNT=:praiseCount");             sql.setString("praiseCount", attach.getPraiseCount());          }   } if (attach.getFlagRealFileName() == 1) {      if (StringUtil.isBlank(attach.getRealFileName())) {             sql.append(" and REAL_FILE_NAME is null ");          }      else{             sql.append(" and REAL_FILE_NAME=:realFileName");             sql.setString("realFileName", attach.getRealFileName());          }   } if (attach.getFlagUploadTime() == 1) {      if (attach.getUploadTime() == null) {             sql.append(" and UPLOAD_TIME is null ");          }      else{             sql.append(" and UPLOAD_TIME=:uploadTime");             sql.setTimestamp("uploadTime", attach.getUploadTime());          }   } if (attach.getFlagUserId() == 1) {      if (StringUtil.isBlank(attach.getUserId())) {             sql.append(" and USER_ID is null ");          }      else{             sql.append(" and USER_ID=:userId");             sql.setString("userId", attach.getUserId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           attach = new AttachSVO();           attach.setArtisticStyle(rs.getString("ARTISTIC_STYLE"));           attach.setAttachDesc(rs.getString("ATTACH_DESC"));           attach.setAttachId(rs.getString("ATTACH_ID"));           attach.setAttachPath(rs.getString("ATTACH_PATH"));           attach.setAttachSize(rs.getString("ATTACH_SIZE"));           attach.setAttachTopic(rs.getString("ATTACH_TOPIC"));           attach.setAttachType(rs.getString("ATTACH_TYPE"));           attach.setAuditStatus(rs.getString("AUDIT_STATUS"));           attach.setPlayCount(rs.getString("PLAY_COUNT"));           attach.setPraiseCount(rs.getString("PRAISE_COUNT"));           attach.setRealFileName(rs.getString("REAL_FILE_NAME"));           attach.setUploadTime(rs.getTimestamp("UPLOAD_TIME"));           attach.setUserId(rs.getString("USER_ID"));               res.add(attach);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       AttachSVO attach=(AttachSVO) vo;    if (StringUtil.isBlank(attach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE ATTACH SET ");     try {if (attach.getFlagArtisticStyle() == 1) {sql.append("ARTISTIC_STYLE=:artisticStyle,"); sql.setString("artisticStyle", attach.getArtisticStyle()); } if (attach.getFlagAttachDesc() == 1) {sql.append("ATTACH_DESC=:attachDesc,"); sql.setString("attachDesc", attach.getAttachDesc()); } if (attach.getFlagAttachPath() == 1) {sql.append("ATTACH_PATH=:attachPath,"); sql.setString("attachPath", attach.getAttachPath()); } if (attach.getFlagAttachSize() == 1) {sql.append("ATTACH_SIZE=:attachSize,"); sql.setString("attachSize", attach.getAttachSize()); } if (attach.getFlagAttachTopic() == 1) {sql.append("ATTACH_TOPIC=:attachTopic,"); sql.setString("attachTopic", attach.getAttachTopic()); } if (attach.getFlagAttachType() == 1) {sql.append("ATTACH_TYPE=:attachType,"); sql.setString("attachType", attach.getAttachType()); } if (attach.getFlagAuditStatus() == 1) {sql.append("AUDIT_STATUS=:auditStatus,"); sql.setString("auditStatus", attach.getAuditStatus()); } if (attach.getFlagPlayCount() == 1) {sql.append("PLAY_COUNT=:playCount,"); sql.setString("playCount", attach.getPlayCount()); } if (attach.getFlagPraiseCount() == 1) {sql.append("PRAISE_COUNT=:praiseCount,"); sql.setString("praiseCount", attach.getPraiseCount()); } if (attach.getFlagRealFileName() == 1) {sql.append("REAL_FILE_NAME=:realFileName,"); sql.setString("realFileName", attach.getRealFileName()); } if (attach.getFlagUploadTime() == 1) {sql.append("UPLOAD_TIME=:uploadTime,"); sql.setTimestamp("uploadTime", attach.getUploadTime()); } if (attach.getFlagUserId() == 1) {sql.append("USER_ID=:userId,"); sql.setString("userId", attach.getUserId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", attach.getAttachId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO ATTACH(ARTISTIC_STYLE,ATTACH_DESC,ATTACH_ID,ATTACH_PATH,ATTACH_SIZE,ATTACH_TOPIC,ATTACH_TYPE,AUDIT_STATUS,PLAY_COUNT,PRAISE_COUNT,REAL_FILE_NAME,UPLOAD_TIME,USER_ID)");sql.append(" VALUES (:artisticStyle,:attachDesc,:attachId,:attachPath,:attachSize,:attachTopic,:attachType,:auditStatus,:playCount,:praiseCount,:realFileName,:uploadTime,:userId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       AttachSVO attach=(AttachSVO) list.get(i);         if (attach== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(attach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(attach.getArtisticStyle())) {      sql.setNullString("artisticStyle");     } else {    sql.setString("artisticStyle", attach.getArtisticStyle());    }       if (StringUtil.isBlank(attach.getAttachDesc())) {      sql.setNullString("attachDesc");     } else {    sql.setString("attachDesc", attach.getAttachDesc());    }       if (StringUtil.isBlank(attach.getAttachId())) {      sql.setNullLong("attachId");     } else {    sql.setLong("attachId", attach.getAttachId());    }       if (StringUtil.isBlank(attach.getAttachPath())) {      sql.setNullString("attachPath");     } else {    sql.setString("attachPath", attach.getAttachPath());    }       if (StringUtil.isBlank(attach.getAttachSize())) {      sql.setNullString("attachSize");     } else {    sql.setString("attachSize", attach.getAttachSize());    }       if (StringUtil.isBlank(attach.getAttachTopic())) {      sql.setNullString("attachTopic");     } else {    sql.setString("attachTopic", attach.getAttachTopic());    }       if (StringUtil.isBlank(attach.getAttachType())) {      sql.setNullString("attachType");     } else {    sql.setString("attachType", attach.getAttachType());    }       if (StringUtil.isBlank(attach.getAuditStatus())) {      sql.setNullString("auditStatus");     } else {    sql.setString("auditStatus", attach.getAuditStatus());    }       if (StringUtil.isBlank(attach.getPlayCount())) {      sql.setNullString("playCount");     } else {    sql.setString("playCount", attach.getPlayCount());    }       if (StringUtil.isBlank(attach.getPraiseCount())) {      sql.setNullString("praiseCount");     } else {    sql.setString("praiseCount", attach.getPraiseCount());    }       if (StringUtil.isBlank(attach.getRealFileName())) {      sql.setNullString("realFileName");     } else {    sql.setString("realFileName", attach.getRealFileName());    }    if (attach.getUploadTime() == null) {      sql.setNullDate("uploadTime");     } else {    sql.setTimestamp("uploadTime", attach.getUploadTime());    }       if (StringUtil.isBlank(attach.getUserId())) {      sql.setNullString("userId");     } else {    sql.setString("userId", attach.getUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     AttachSVO attach=(AttachSVO) vo;    if (StringUtil.isBlank(attach.getAttachId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM ATTACH WHERE 1=1  ");sql.append(" and ATTACH_ID=:attachId");sql.setLong("attachId", attach.getAttachId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     AttachSVO attach=(AttachSVO) vo;       }}
