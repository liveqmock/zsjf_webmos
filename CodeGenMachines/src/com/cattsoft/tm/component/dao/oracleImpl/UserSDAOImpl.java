package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IUserSDAO;import com.cattsoft.tm.vo.UserSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil;/** * 方法UserSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class UserSDAOImpl implements IUserSDAO {	private static Logger log = Logger.getLogger(UserSDAOImpl.class);	private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		UserSVO user = (UserSVO) vo;		if (StringUtil.isBlank(user.getUserId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO USER(CREATE_DATE,CURRENT_CITY,CURRENT_PROVINCE,EDUCATIONAL,E_MAIL,GRADUATE_INSTITUTIONS,INTEREST,MAJOR,NATION,OTHER_SPECIALITY,PASS_WORD,PERSONAL_WEBSITE,PW_SECRET_LEVEL,QQ_NUMBER,QQ_SECRET_LEVEL,REAL_NAME,SEX,SPECIALITY,SUMMARY,TEL_NBR,TEL_SECRET_LEVEL,UPDATE_DATE,USER_ID,USER_NAME,USER_TYPE)");		sql				.append(" VALUES (:createDate,:currentCity,:currentProvince,:educational,:eMail,:graduateInstitutions,:interest,:major,:nation,:otherSpeciality,:passWord,:personalWebsite,:pwSecretLevel,:qqNumber,:qqSecretLevel,:realName,:sex,:speciality,:summary,:telNbr,:telSecretLevel,:updateDate,:userId,:userName,:userType)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (user.getCreateDate() == null) {				sql.setNullDate("createDate");			} else {				sql.setTimestamp("createDate", user.getCreateDate());			}			if (StringUtil.isBlank(user.getCurrentCity())) {				sql.setNullString("currentCity");			} else {				sql.setString("currentCity", user.getCurrentCity());			}			if (StringUtil.isBlank(user.getCurrentProvince())) {				sql.setNullString("currentProvince");			} else {				sql.setString("currentProvince", user.getCurrentProvince());			}			if (StringUtil.isBlank(user.getEducational())) {				sql.setNullString("educational");			} else {				sql.setString("educational", user.getEducational());			}			if (StringUtil.isBlank(user.getEMail())) {				sql.setNullString("eMail");			} else {				sql.setString("eMail", user.getEMail());			}			if (StringUtil.isBlank(user.getGraduateInstitutions())) {				sql.setNullString("graduateInstitutions");			} else {				sql.setString("graduateInstitutions", user						.getGraduateInstitutions());			}			if (StringUtil.isBlank(user.getInterest())) {				sql.setNullString("interest");			} else {				sql.setString("interest", user.getInterest());			}			if (StringUtil.isBlank(user.getMajor())) {				sql.setNullString("major");			} else {				sql.setString("major", user.getMajor());			}			if (StringUtil.isBlank(user.getNation())) {				sql.setNullString("nation");			} else {				sql.setString("nation", user.getNation());			}			if (StringUtil.isBlank(user.getOtherSpeciality())) {				sql.setNullString("otherSpeciality");			} else {				sql.setString("otherSpeciality", user.getOtherSpeciality());			}			if (StringUtil.isBlank(user.getPassWord())) {				sql.setNullString("passWord");			} else {				sql.setString("passWord", user.getPassWord());			}			if (StringUtil.isBlank(user.getPersonalWebsite())) {				sql.setNullString("personalWebsite");			} else {				sql.setString("personalWebsite", user.getPersonalWebsite());			}			if (StringUtil.isBlank(user.getPwSecretLevel())) {				sql.setNullString("pwSecretLevel");			} else {				sql.setString("pwSecretLevel", user.getPwSecretLevel());			}			if (StringUtil.isBlank(user.getQqNumber())) {				sql.setNullString("qqNumber");			} else {				sql.setString("qqNumber", user.getQqNumber());			}			if (StringUtil.isBlank(user.getQqSecretLevel())) {				sql.setNullString("qqSecretLevel");			} else {				sql.setString("qqSecretLevel", user.getQqSecretLevel());			}			if (StringUtil.isBlank(user.getRealName())) {				sql.setNullString("realName");			} else {				sql.setString("realName", user.getRealName());			}			if (StringUtil.isBlank(user.getSex())) {				sql.setNullString("sex");			} else {				sql.setString("sex", user.getSex());			}			if (StringUtil.isBlank(user.getSpeciality())) {				sql.setNullString("speciality");			} else {				sql.setString("speciality", user.getSpeciality());			}			if (StringUtil.isBlank(user.getSummary())) {				sql.setNullString("summary");			} else {				sql.setString("summary", user.getSummary());			}			if (StringUtil.isBlank(user.getTelNbr())) {				sql.setNullString("telNbr");			} else {				sql.setString("telNbr", user.getTelNbr());			}			if (StringUtil.isBlank(user.getTelSecretLevel())) {				sql.setNullString("telSecretLevel");			} else {				sql.setString("telSecretLevel", user.getTelSecretLevel());			}			if (user.getUpdateDate() == null) {				sql.setNullDate("updateDate");			} else {				sql.setTimestamp("updateDate", user.getUpdateDate());			}			if (StringUtil.isBlank(user.getUserId())) {				sql.setNullString("userId");			} else {				sql.setString("userId", user.getUserId());			}			if (StringUtil.isBlank(user.getUserName())) {				sql.setNullString("userName");			} else {				sql.setString("userName", user.getUserName());			}			if (StringUtil.isBlank(user.getUserType())) {				sql.setNullString("userType");			} else {				sql.setString("userType", user.getUserType());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		UserSVO user = (UserSVO) vo;		if (StringUtil.isBlank(user.getUserId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT CREATE_DATE,CURRENT_CITY,CURRENT_PROVINCE,EDUCATIONAL,E_MAIL,GRADUATE_INSTITUTIONS,INTEREST,MAJOR,NATION,OTHER_SPECIALITY,PASS_WORD,PERSONAL_WEBSITE,PW_SECRET_LEVEL,QQ_NUMBER,QQ_SECRET_LEVEL,REAL_NAME,SEX,SPECIALITY,SUMMARY,TEL_NBR,TEL_SECRET_LEVEL,UPDATE_DATE,USER_ID,USER_NAME,USER_TYPE FROM USER WHERE 1=1  ");		sql.append(" and USER_ID=:userId");		sql.setString("userId", user.getUserId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		user = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				user = new UserSVO();				user.setCreateDate(rs.getTimestamp("CREATE_DATE"));				user.setCurrentCity(rs.getString("CURRENT_CITY"));				user.setCurrentProvince(rs.getString("CURRENT_PROVINCE"));				user.setEducational(rs.getString("EDUCATIONAL"));				user.setEMail(rs.getString("E_MAIL"));				user.setGraduateInstitutions(rs						.getString("GRADUATE_INSTITUTIONS"));				user.setInterest(rs.getString("INTEREST"));				user.setMajor(rs.getString("MAJOR"));				user.setNation(rs.getString("NATION"));				user.setOtherSpeciality(rs.getString("OTHER_SPECIALITY"));				user.setPassWord(rs.getString("PASS_WORD"));				user.setPersonalWebsite(rs.getString("PERSONAL_WEBSITE"));				user.setPwSecretLevel(rs.getString("PW_SECRET_LEVEL"));				user.setQqNumber(rs.getString("QQ_NUMBER"));				user.setQqSecretLevel(rs.getString("QQ_SECRET_LEVEL"));				user.setRealName(rs.getString("REAL_NAME"));				user.setSex(rs.getString("SEX"));				user.setSpeciality(rs.getString("SPECIALITY"));				user.setSummary(rs.getString("SUMMARY"));				user.setTelNbr(rs.getString("TEL_NBR"));				user.setTelSecretLevel(rs.getString("TEL_SECRET_LEVEL"));				user.setUpdateDate(rs.getTimestamp("UPDATE_DATE"));				user.setUserId(rs.getString("USER_ID"));				user.setUserName(rs.getString("USER_NAME"));				user.setUserType(rs.getString("USER_TYPE"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return user;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		log.debug("ffffffffffffffffffffffffffffffff");		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		UserSVO user = (UserSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT CREATE_DATE,CURRENT_CITY,CURRENT_PROVINCE,EDUCATIONAL,E_MAIL,GRADUATE_INSTITUTIONS,INTEREST,MAJOR,NATION,OTHER_SPECIALITY,PASS_WORD,PERSONAL_WEBSITE,PW_SECRET_LEVEL,QQ_NUMBER,QQ_SECRET_LEVEL,REAL_NAME,SEX,SPECIALITY,SUMMARY,TEL_NBR,TEL_SECRET_LEVEL,UPDATE_DATE,USER_ID,USER_NAME,USER_TYPE FROM USER WHERE 1=1 ");		try {			if (user.getFlagCreateDate() == 1) {				if (user.getCreateDate() == null) {					sql.append(" and CREATE_DATE is null ");				} else {					sql.append(" and CREATE_DATE=:createDate");					sql.setTimestamp("createDate", user.getCreateDate());				}			}			if (user.getFlagCurrentCity() == 1) {				if (StringUtil.isBlank(user.getCurrentCity())) {					sql.append(" and CURRENT_CITY is null ");				} else {					sql.append(" and CURRENT_CITY=:currentCity");					sql.setString("currentCity", user.getCurrentCity());				}			}			if (user.getFlagCurrentProvince() == 1) {				if (StringUtil.isBlank(user.getCurrentProvince())) {					sql.append(" and CURRENT_PROVINCE is null ");				} else {					sql.append(" and CURRENT_PROVINCE=:currentProvince");					sql.setString("currentProvince", user.getCurrentProvince());				}			}			if (user.getFlagEducational() == 1) {				if (StringUtil.isBlank(user.getEducational())) {					sql.append(" and EDUCATIONAL is null ");				} else {					sql.append(" and EDUCATIONAL=:educational");					sql.setString("educational", user.getEducational());				}			}			if (user.getFlagEMail() == 1) {				if (StringUtil.isBlank(user.getEMail())) {					sql.append(" and E_MAIL is null ");				} else {					sql.append(" and E_MAIL=:eMail");					sql.setString("eMail", user.getEMail());				}			}			if (user.getFlagGraduateInstitutions() == 1) {				if (StringUtil.isBlank(user.getGraduateInstitutions())) {					sql.append(" and GRADUATE_INSTITUTIONS is null ");				} else {					sql							.append(" and GRADUATE_INSTITUTIONS=:graduateInstitutions");					sql.setString("graduateInstitutions", user							.getGraduateInstitutions());				}			}			if (user.getFlagInterest() == 1) {				if (StringUtil.isBlank(user.getInterest())) {					sql.append(" and INTEREST is null ");				} else {					sql.append(" and INTEREST=:interest");					sql.setString("interest", user.getInterest());				}			}			if (user.getFlagMajor() == 1) {				if (StringUtil.isBlank(user.getMajor())) {					sql.append(" and MAJOR is null ");				} else {					sql.append(" and MAJOR=:major");					sql.setString("major", user.getMajor());				}			}			if (user.getFlagNation() == 1) {				if (StringUtil.isBlank(user.getNation())) {					sql.append(" and NATION is null ");				} else {					sql.append(" and NATION=:nation");					sql.setString("nation", user.getNation());				}			}			if (user.getFlagOtherSpeciality() == 1) {				if (StringUtil.isBlank(user.getOtherSpeciality())) {					sql.append(" and OTHER_SPECIALITY is null ");				} else {					sql.append(" and OTHER_SPECIALITY=:otherSpeciality");					sql.setString("otherSpeciality", user.getOtherSpeciality());				}			}			if (user.getFlagPassWord() == 1) {				if (StringUtil.isBlank(user.getPassWord())) {					sql.append(" and PASS_WORD is null ");				} else {					sql.append(" and PASS_WORD=:passWord");					sql.setString("passWord", user.getPassWord());				}			}			if (user.getFlagPersonalWebsite() == 1) {				if (StringUtil.isBlank(user.getPersonalWebsite())) {					sql.append(" and PERSONAL_WEBSITE is null ");				} else {					sql.append(" and PERSONAL_WEBSITE=:personalWebsite");					sql.setString("personalWebsite", user.getPersonalWebsite());				}			}			if (user.getFlagPwSecretLevel() == 1) {				if (StringUtil.isBlank(user.getPwSecretLevel())) {					sql.append(" and PW_SECRET_LEVEL is null ");				} else {					sql.append(" and PW_SECRET_LEVEL=:pwSecretLevel");					sql.setString("pwSecretLevel", user.getPwSecretLevel());				}			}			if (user.getFlagQqNumber() == 1) {				if (StringUtil.isBlank(user.getQqNumber())) {					sql.append(" and QQ_NUMBER is null ");				} else {					sql.append(" and QQ_NUMBER=:qqNumber");					sql.setString("qqNumber", user.getQqNumber());				}			}			if (user.getFlagQqSecretLevel() == 1) {				if (StringUtil.isBlank(user.getQqSecretLevel())) {					sql.append(" and QQ_SECRET_LEVEL is null ");				} else {					sql.append(" and QQ_SECRET_LEVEL=:qqSecretLevel");					sql.setString("qqSecretLevel", user.getQqSecretLevel());				}			}			if (user.getFlagRealName() == 1) {				if (StringUtil.isBlank(user.getRealName())) {					sql.append(" and REAL_NAME is null ");				} else {					sql.append(" and REAL_NAME=:realName");					sql.setString("realName", user.getRealName());				}			}			if (user.getFlagSex() == 1) {				if (StringUtil.isBlank(user.getSex())) {					sql.append(" and SEX is null ");				} else {					sql.append(" and SEX=:sex");					sql.setString("sex", user.getSex());				}			}			if (user.getFlagSpeciality() == 1) {				if (StringUtil.isBlank(user.getSpeciality())) {					sql.append(" and SPECIALITY is null ");				} else {					sql.append(" and SPECIALITY=:speciality");					sql.setString("speciality", user.getSpeciality());				}			}			if (user.getFlagSummary() == 1) {				if (StringUtil.isBlank(user.getSummary())) {					sql.append(" and SUMMARY is null ");				} else {					sql.append(" and SUMMARY=:summary");					sql.setString("summary", user.getSummary());				}			}			if (user.getFlagTelNbr() == 1) {				if (StringUtil.isBlank(user.getTelNbr())) {					sql.append(" and TEL_NBR is null ");				} else {					sql.append(" and TEL_NBR=:telNbr");					sql.setString("telNbr", user.getTelNbr());				}			}			if (user.getFlagTelSecretLevel() == 1) {				if (StringUtil.isBlank(user.getTelSecretLevel())) {					sql.append(" and TEL_SECRET_LEVEL is null ");				} else {					sql.append(" and TEL_SECRET_LEVEL=:telSecretLevel");					sql.setString("telSecretLevel", user.getTelSecretLevel());				}			}			if (user.getFlagUpdateDate() == 1) {				if (user.getUpdateDate() == null) {					sql.append(" and UPDATE_DATE is null ");				} else {					sql.append(" and UPDATE_DATE=:updateDate");					sql.setTimestamp("updateDate", user.getUpdateDate());				}			}			if (user.getFlagUserId() == 1) {				if (StringUtil.isBlank(user.getUserId())) {					sql.append(" and USER_ID is null ");				} else {					sql.append(" and USER_ID=:userId");					sql.setString("userId", user.getUserId());				}			}			if (user.getFlagUserName() == 1) {				if (StringUtil.isBlank(user.getUserName())) {					sql.append(" and USER_NAME is null ");				} else {					sql.append(" and USER_NAME=:userName");					sql.setString("userName", user.getUserName());				}			}			if (user.getFlagUserType() == 1) {				if (StringUtil.isBlank(user.getUserType())) {					sql.append(" and USER_TYPE is null ");				} else {					sql.append(" and USER_TYPE=:userType");					sql.setString("userType", user.getUserType());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				user = new UserSVO();				user.setCreateDate(rs.getTimestamp("CREATE_DATE"));				user.setCurrentCity(rs.getString("CURRENT_CITY"));				user.setCurrentProvince(rs.getString("CURRENT_PROVINCE"));				user.setEducational(rs.getString("EDUCATIONAL"));				user.setEMail(rs.getString("E_MAIL"));				user.setGraduateInstitutions(rs						.getString("GRADUATE_INSTITUTIONS"));				user.setInterest(rs.getString("INTEREST"));				user.setMajor(rs.getString("MAJOR"));				user.setNation(rs.getString("NATION"));				user.setOtherSpeciality(rs.getString("OTHER_SPECIALITY"));				user.setPassWord(rs.getString("PASS_WORD"));				user.setPersonalWebsite(rs.getString("PERSONAL_WEBSITE"));				user.setPwSecretLevel(rs.getString("PW_SECRET_LEVEL"));				user.setQqNumber(rs.getString("QQ_NUMBER"));				user.setQqSecretLevel(rs.getString("QQ_SECRET_LEVEL"));				user.setRealName(rs.getString("REAL_NAME"));				user.setSex(rs.getString("SEX"));				user.setSpeciality(rs.getString("SPECIALITY"));				user.setSummary(rs.getString("SUMMARY"));				user.setTelNbr(rs.getString("TEL_NBR"));				user.setTelSecretLevel(rs.getString("TEL_SECRET_LEVEL"));				user.setUpdateDate(rs.getTimestamp("UPDATE_DATE"));				user.setUserId(rs.getString("USER_ID"));				user.setUserName(rs.getString("USER_NAME"));				user.setUserType(rs.getString("USER_TYPE"));				res.add(user);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		UserSVO user = (UserSVO) vo;		if (StringUtil.isBlank(user.getUserId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE USER SET ");		try {			if (user.getFlagCreateDate() == 1) {				sql.append("CREATE_DATE=:createDate,");				sql.setTimestamp("createDate", user.getCreateDate());			}			if (user.getFlagCurrentCity() == 1) {				sql.append("CURRENT_CITY=:currentCity,");				sql.setString("currentCity", user.getCurrentCity());			}			if (user.getFlagCurrentProvince() == 1) {				sql.append("CURRENT_PROVINCE=:currentProvince,");				sql.setString("currentProvince", user.getCurrentProvince());			}			if (user.getFlagEducational() == 1) {				sql.append("EDUCATIONAL=:educational,");				sql.setString("educational", user.getEducational());			}			if (user.getFlagEMail() == 1) {				sql.append("E_MAIL=:eMail,");				sql.setString("eMail", user.getEMail());			}			if (user.getFlagGraduateInstitutions() == 1) {				sql.append("GRADUATE_INSTITUTIONS=:graduateInstitutions,");				sql.setString("graduateInstitutions", user						.getGraduateInstitutions());			}			if (user.getFlagInterest() == 1) {				sql.append("INTEREST=:interest,");				sql.setString("interest", user.getInterest());			}			if (user.getFlagMajor() == 1) {				sql.append("MAJOR=:major,");				sql.setString("major", user.getMajor());			}			if (user.getFlagNation() == 1) {				sql.append("NATION=:nation,");				sql.setString("nation", user.getNation());			}			if (user.getFlagOtherSpeciality() == 1) {				sql.append("OTHER_SPECIALITY=:otherSpeciality,");				sql.setString("otherSpeciality", user.getOtherSpeciality());			}			if (user.getFlagPassWord() == 1) {				sql.append("PASS_WORD=:passWord,");				sql.setString("passWord", user.getPassWord());			}			if (user.getFlagPersonalWebsite() == 1) {				sql.append("PERSONAL_WEBSITE=:personalWebsite,");				sql.setString("personalWebsite", user.getPersonalWebsite());			}			if (user.getFlagPwSecretLevel() == 1) {				sql.append("PW_SECRET_LEVEL=:pwSecretLevel,");				sql.setString("pwSecretLevel", user.getPwSecretLevel());			}			if (user.getFlagQqNumber() == 1) {				sql.append("QQ_NUMBER=:qqNumber,");				sql.setString("qqNumber", user.getQqNumber());			}			if (user.getFlagQqSecretLevel() == 1) {				sql.append("QQ_SECRET_LEVEL=:qqSecretLevel,");				sql.setString("qqSecretLevel", user.getQqSecretLevel());			}			if (user.getFlagRealName() == 1) {				sql.append("REAL_NAME=:realName,");				sql.setString("realName", user.getRealName());			}			if (user.getFlagSex() == 1) {				sql.append("SEX=:sex,");				sql.setString("sex", user.getSex());			}			if (user.getFlagSpeciality() == 1) {				sql.append("SPECIALITY=:speciality,");				sql.setString("speciality", user.getSpeciality());			}			if (user.getFlagSummary() == 1) {				sql.append("SUMMARY=:summary,");				sql.setString("summary", user.getSummary());			}			if (user.getFlagTelNbr() == 1) {				sql.append("TEL_NBR=:telNbr,");				sql.setString("telNbr", user.getTelNbr());			}			if (user.getFlagTelSecretLevel() == 1) {				sql.append("TEL_SECRET_LEVEL=:telSecretLevel,");				sql.setString("telSecretLevel", user.getTelSecretLevel());			}			if (user.getFlagUpdateDate() == 1) {				sql.append("UPDATE_DATE=:updateDate,");				sql.setTimestamp("updateDate", user.getUpdateDate());			}			if (user.getFlagUserName() == 1) {				sql.append("USER_NAME=:userName,");				sql.setString("userName", user.getUserName());			}			if (user.getFlagUserType() == 1) {				sql.append("USER_TYPE=:userType,");				sql.setString("userType", user.getUserType());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and USER_ID=:userId");			sql.setString("userId", user.getUserId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO USER(CREATE_DATE,CURRENT_CITY,CURRENT_PROVINCE,EDUCATIONAL,E_MAIL,GRADUATE_INSTITUTIONS,INTEREST,MAJOR,NATION,OTHER_SPECIALITY,PASS_WORD,PERSONAL_WEBSITE,PW_SECRET_LEVEL,QQ_NUMBER,QQ_SECRET_LEVEL,REAL_NAME,SEX,SPECIALITY,SUMMARY,TEL_NBR,TEL_SECRET_LEVEL,UPDATE_DATE,USER_ID,USER_NAME,USER_TYPE)");		sql				.append(" VALUES (:createDate,:currentCity,:currentProvince,:educational,:eMail,:graduateInstitutions,:interest,:major,:nation,:otherSpeciality,:passWord,:personalWebsite,:pwSecretLevel,:qqNumber,:qqSecretLevel,:realName,:sex,:speciality,:summary,:telNbr,:telSecretLevel,:updateDate,:userId,:userName,:userType)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				UserSVO user = (UserSVO) list.get(i);				if (user == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(user.getUserId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (user.getCreateDate() == null) {					sql.setNullDate("createDate");				} else {					sql.setTimestamp("createDate", user.getCreateDate());				}				if (StringUtil.isBlank(user.getCurrentCity())) {					sql.setNullString("currentCity");				} else {					sql.setString("currentCity", user.getCurrentCity());				}				if (StringUtil.isBlank(user.getCurrentProvince())) {					sql.setNullString("currentProvince");				} else {					sql.setString("currentProvince", user.getCurrentProvince());				}				if (StringUtil.isBlank(user.getEducational())) {					sql.setNullString("educational");				} else {					sql.setString("educational", user.getEducational());				}				if (StringUtil.isBlank(user.getEMail())) {					sql.setNullString("eMail");				} else {					sql.setString("eMail", user.getEMail());				}				if (StringUtil.isBlank(user.getGraduateInstitutions())) {					sql.setNullString("graduateInstitutions");				} else {					sql.setString("graduateInstitutions", user							.getGraduateInstitutions());				}				if (StringUtil.isBlank(user.getInterest())) {					sql.setNullString("interest");				} else {					sql.setString("interest", user.getInterest());				}				if (StringUtil.isBlank(user.getMajor())) {					sql.setNullString("major");				} else {					sql.setString("major", user.getMajor());				}				if (StringUtil.isBlank(user.getNation())) {					sql.setNullString("nation");				} else {					sql.setString("nation", user.getNation());				}				if (StringUtil.isBlank(user.getOtherSpeciality())) {					sql.setNullString("otherSpeciality");				} else {					sql.setString("otherSpeciality", user.getOtherSpeciality());				}				if (StringUtil.isBlank(user.getPassWord())) {					sql.setNullString("passWord");				} else {					sql.setString("passWord", user.getPassWord());				}				if (StringUtil.isBlank(user.getPersonalWebsite())) {					sql.setNullString("personalWebsite");				} else {					sql.setString("personalWebsite", user.getPersonalWebsite());				}				if (StringUtil.isBlank(user.getPwSecretLevel())) {					sql.setNullString("pwSecretLevel");				} else {					sql.setString("pwSecretLevel", user.getPwSecretLevel());				}				if (StringUtil.isBlank(user.getQqNumber())) {					sql.setNullString("qqNumber");				} else {					sql.setString("qqNumber", user.getQqNumber());				}				if (StringUtil.isBlank(user.getQqSecretLevel())) {					sql.setNullString("qqSecretLevel");				} else {					sql.setString("qqSecretLevel", user.getQqSecretLevel());				}				if (StringUtil.isBlank(user.getRealName())) {					sql.setNullString("realName");				} else {					sql.setString("realName", user.getRealName());				}				if (StringUtil.isBlank(user.getSex())) {					sql.setNullString("sex");				} else {					sql.setString("sex", user.getSex());				}				if (StringUtil.isBlank(user.getSpeciality())) {					sql.setNullString("speciality");				} else {					sql.setString("speciality", user.getSpeciality());				}				if (StringUtil.isBlank(user.getSummary())) {					sql.setNullString("summary");				} else {					sql.setString("summary", user.getSummary());				}				if (StringUtil.isBlank(user.getTelNbr())) {					sql.setNullString("telNbr");				} else {					sql.setString("telNbr", user.getTelNbr());				}				if (StringUtil.isBlank(user.getTelSecretLevel())) {					sql.setNullString("telSecretLevel");				} else {					sql.setString("telSecretLevel", user.getTelSecretLevel());				}				if (user.getUpdateDate() == null) {					sql.setNullDate("updateDate");				} else {					sql.setTimestamp("updateDate", user.getUpdateDate());				}				if (StringUtil.isBlank(user.getUserId())) {					sql.setNullString("userId");				} else {					sql.setString("userId", user.getUserId());				}				if (StringUtil.isBlank(user.getUserName())) {					sql.setNullString("userName");				} else {					sql.setString("userName", user.getUserName());				}				if (StringUtil.isBlank(user.getUserType())) {					sql.setNullString("userType");				} else {					sql.setString("userType", user.getUserType());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		UserSVO user = (UserSVO) vo;		if (StringUtil.isBlank(user.getUserId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM USER WHERE 1=1  ");		sql.append(" and USER_ID=:userId");		sql.setString("userId", user.getUserId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		UserSVO user = (UserSVO) vo;	}}